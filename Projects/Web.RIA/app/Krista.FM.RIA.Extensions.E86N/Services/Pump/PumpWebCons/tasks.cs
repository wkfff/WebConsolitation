//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.6387
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.tasks
{
    /// <summary>
    /// <para>
    /// Regular expression: (ReportPeriodPeriodickey)
    /// </para>
    /// </summary>
    public partial class reportPeriodAbstract : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportPeriodAbstract(XElement xe) { return XTypedServices.ToXTypedElement<reportPeriodAbstract>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportPeriodAbstract()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public reportPeriodAbstract()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportPeriodPeriodickey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportPeriodAbstract", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportPeriodAbstract Load(string xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Parse(string xml)
        {
            return XTypedServices.Parse<reportPeriodAbstract>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportPeriodAbstract>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey)
    /// </para>
    /// </summary>
    public partial class previousTask : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator previousTask(XElement xe) { return XTypedServices.ToXTypedElement<previousTask>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static previousTask()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public previousTask()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportCollectingPeriodkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("previousTask", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static previousTask Load(string xmlFile)
        {
            return XTypedServices.Load<previousTask>(xmlFile);
        }

        public static previousTask Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<previousTask>(xmlFile);
        }

        public static previousTask Parse(string xml)
        {
            return XTypedServices.Parse<previousTask>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<previousTask>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator author(XElement xe) { return XTypedServices.ToXTypedElement<author>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static author()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public author()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("author", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static author Load(string xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Parse(string xml)
        {
            return XTypedServices.Parse<author>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<author>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey+)
    /// </para>
    /// </summary>
    public partial class attachedTasks : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey> ReportCollectingPeriodkeyField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator attachedTasks(XElement xe) { return XTypedServices.ToXTypedElement<attachedTasks>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static attachedTasks()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey+)
        /// </para>
        /// </summary>
        public attachedTasks()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.ReportCollectingPeriodkey> ReportCollectingPeriodkey
        {
            get
            {
                if ((this.ReportCollectingPeriodkeyField == null))
                {
                    this.ReportCollectingPeriodkeyField = new XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                }
                return this.ReportCollectingPeriodkeyField;
            }
            set
            {
                if ((value == null))
                {
                    this.ReportCollectingPeriodkeyField = null;
                }
                else
                {
                    if ((this.ReportCollectingPeriodkeyField == null))
                    {
                        this.ReportCollectingPeriodkeyField = XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.ReportCollectingPeriodkey>(this.ReportCollectingPeriodkeyField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("attachedTasks", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static attachedTasks Load(string xmlFile)
        {
            return XTypedServices.Load<attachedTasks>(xmlFile);
        }

        public static attachedTasks Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<attachedTasks>(xmlFile);
        }

        public static attachedTasks Parse(string xml)
        {
            return XTypedServices.Parse<attachedTasks>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<attachedTasks>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey+)
    /// </para>
    /// </summary>
    public partial class attachToTasks : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey> ReportCollectingPeriodkeyField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator attachToTasks(XElement xe) { return XTypedServices.ToXTypedElement<attachToTasks>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static attachToTasks()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey+)
        /// </para>
        /// </summary>
        public attachToTasks()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.ReportCollectingPeriodkey> ReportCollectingPeriodkey
        {
            get
            {
                if ((this.ReportCollectingPeriodkeyField == null))
                {
                    this.ReportCollectingPeriodkeyField = new XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                }
                return this.ReportCollectingPeriodkeyField;
            }
            set
            {
                if ((value == null))
                {
                    this.ReportCollectingPeriodkeyField = null;
                }
                else
                {
                    if ((this.ReportCollectingPeriodkeyField == null))
                    {
                        this.ReportCollectingPeriodkeyField = XTypedList<ru.krista.consolidation.model.ReportCollectingPeriodkey>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.ReportCollectingPeriodkey>(this.ReportCollectingPeriodkeyField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("attachToTasks", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static attachToTasks Load(string xmlFile)
        {
            return XTypedServices.Load<attachToTasks>(xmlFile);
        }

        public static attachToTasks Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<attachToTasks>(xmlFile);
        }

        public static attachToTasks Parse(string xml)
        {
            return XTypedServices.Parse<attachToTasks>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<attachToTasks>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriod+)
    /// </para>
    /// </summary>
    public partial class Objects : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.ReportCollectingPeriod> ReportCollectingPeriodField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Objects(XElement xe) { return XTypedServices.ToXTypedElement<Objects>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Objects()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriod+)
        /// </para>
        /// </summary>
        public Objects()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriod+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.ReportCollectingPeriod> ReportCollectingPeriod
        {
            get
            {
                if ((this.ReportCollectingPeriodField == null))
                {
                    this.ReportCollectingPeriodField = new XTypedList<ru.krista.consolidation.model.ReportCollectingPeriod>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model"));
                }
                return this.ReportCollectingPeriodField;
            }
            set
            {
                if ((value == null))
                {
                    this.ReportCollectingPeriodField = null;
                }
                else
                {
                    if ((this.ReportCollectingPeriodField == null))
                    {
                        this.ReportCollectingPeriodField = XTypedList<ru.krista.consolidation.model.ReportCollectingPeriod>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.ReportCollectingPeriod>(this.ReportCollectingPeriodField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Objects", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Objects Load(string xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Parse(string xml)
        {
            return XTypedServices.Parse<Objects>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Objects>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriod));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(/*global::*/reportPeriodAbstract));
            elementDictionary.Add(XName.Get("previousTask", ""), typeof(/*global::*/previousTask));
            elementDictionary.Add(XName.Get("author", ""), typeof(/*global::*/author));
            elementDictionary.Add(XName.Get("attachedTasks", ""), typeof(/*global::*/attachedTasks));
            elementDictionary.Add(XName.Get("attachToTasks", ""), typeof(/*global::*/attachToTasks));
            elementDictionary.Add(XName.Get("Objects", ""), typeof(/*global::*/Objects));
            elementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportSubjectkey));
            elementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey));
            elementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey));
            elementDictionary.Add(XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriod));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("reportPeriodAbstract", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public reportPeriodAbstract reportPeriodAbstract { get { return rootObject as reportPeriodAbstract; } }

        public previousTask previousTask { get { return rootObject as previousTask; } }

        public author author { get { return rootObject as author; } }

        public attachedTasks attachedTasks { get { return rootObject as attachedTasks; } }

        public attachToTasks attachToTasks { get { return rootObject as attachToTasks; } }

        public Objects Objects { get { return rootObject as Objects; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(previousTask root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(attachedTasks root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(attachToTasks root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public reportPeriodAbstract reportPeriodAbstract { get { return rootObject as reportPeriodAbstract; } }

        public previousTask previousTask { get { return rootObject as previousTask; } }

        public author author { get { return rootObject as author; } }

        public attachedTasks attachedTasks { get { return rootObject as attachedTasks; } }

        public attachToTasks attachToTasks { get { return rootObject as attachToTasks; } }

        public Objects Objects { get { return rootObject as Objects; } }

        public /*global::*/ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportSubjectkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey; } }

        public /*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportCollectingPeriod ReportCollectingPeriod { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportCollectingPeriod; } }

        private XRoot()
        {
        }

        public XRoot(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(previousTask root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(attachedTasks root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(attachToTasks root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportSubjectkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    namespace ru.krista.consolidation.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class ReportSubjectkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportSubjectkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportSubjectkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportSubjectkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubject-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportPeriodPeriodickey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportPeriodPeriodickey(XElement xe) { return XTypedServices.ToXTypedElement<ReportPeriodPeriodickey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportPeriodPeriodickey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportPeriodPeriodickey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Parse(string xml)
            {
                return XTypedServices.Parse<ReportPeriodPeriodickey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportPeriodPeriodickey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportCollectingPeriodkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportCollectingPeriodkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportCollectingPeriodkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportCollectingPeriodkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportCollectingPeriodkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportCollectingPeriodkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportCollectingPeriodkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
        /// </para>
        /// </summary>
        public partial class ReportCollectingPeriod : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<author> authorField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<previousTask> previousTaskField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportPeriodAbstract> reportPeriodAbstractField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            public static explicit operator ReportCollectingPeriod(XElement xe) { return XTypedServices.ToXTypedElement<ReportCollectingPeriod>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ReportCollectingPeriod()
            {
                BuildElementDictionary();
            }

            /// <summary>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public ReportCollectingPeriod()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public attachToTasks attachToTasks
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("attachToTasks", ""));
                    return ((attachToTasks)(x));
                }
                set
                {
                    this.SetElement(XName.Get("attachToTasks", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public attachedTasks attachedTasks
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("attachedTasks", ""));
                    return ((attachedTasks)(x));
                }
                set
                {
                    this.SetElement(XName.Get("attachedTasks", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public IList<author> author
            {
                get
                {
                    if ((this.authorField == null))
                    {
                        this.authorField = new XTypedList<author>(this, LinqToXsdTypeManager.Instance, XName.Get("author", ""));
                    }
                    return this.authorField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.authorField = null;
                    }
                    else
                    {
                        if ((this.authorField == null))
                        {
                            this.authorField = XTypedList<author>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("author", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<author>(this.authorField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public IList<previousTask> previousTask
            {
                get
                {
                    if ((this.previousTaskField == null))
                    {
                        this.previousTaskField = new XTypedList<previousTask>(this, LinqToXsdTypeManager.Instance, XName.Get("previousTask", ""));
                    }
                    return this.previousTaskField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.previousTaskField = null;
                    }
                    else
                    {
                        if ((this.previousTaskField == null))
                        {
                            this.previousTaskField = XTypedList<previousTask>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("previousTask", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<previousTask>(this.previousTaskField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (((attachToTasks | attachedTasks), author, previousTask?, reportPeriodAbstract)|(author, previousTask?, reportPeriodAbstract))
            /// </para>
            /// </summary>
            public IList<reportPeriodAbstract> reportPeriodAbstract
            {
                get
                {
                    if ((this.reportPeriodAbstractField == null))
                    {
                        this.reportPeriodAbstractField = new XTypedList<reportPeriodAbstract>(this, LinqToXsdTypeManager.Instance, XName.Get("reportPeriodAbstract", ""));
                    }
                    return this.reportPeriodAbstractField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.reportPeriodAbstractField = null;
                    }
                    else
                    {
                        if ((this.reportPeriodAbstractField == null))
                        {
                            this.reportPeriodAbstractField = XTypedList<reportPeriodAbstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportPeriodAbstract", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<reportPeriodAbstract>(this.reportPeriodAbstractField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string createDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("createDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("createDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string completeDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("completeDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("completeDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportCollectingPeriod", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportCollectingPeriod Load(string xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriod>(xmlFile);
            }

            public static ReportCollectingPeriod Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriod>(xmlFile);
            }

            public static ReportCollectingPeriod Parse(string xml)
            {
                return XTypedServices.Parse<ReportCollectingPeriod>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportCollectingPeriod>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("attachToTasks", ""), typeof(attachToTasks));
                localElementDictionary.Add(XName.Get("attachedTasks", ""), typeof(attachedTasks));
                localElementDictionary.Add(XName.Get("author", ""), typeof(author));
                localElementDictionary.Add(XName.Get("previousTask", ""), typeof(previousTask));
                localElementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public ReportSubjectkey ReportSubjectkey { get { return rootObject as ReportSubjectkey; } }

            public ReportPeriodPeriodickey ReportPeriodPeriodickey { get { return rootObject as ReportPeriodPeriodickey; } }

            public ReportCollectingPeriodkey ReportCollectingPeriodkey { get { return rootObject as ReportCollectingPeriodkey; } }

            public ReportCollectingPeriod ReportCollectingPeriod { get { return rootObject as ReportCollectingPeriod; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(ReportSubjectkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportPeriodPeriodickey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportCollectingPeriodkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportCollectingPeriod root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
}



