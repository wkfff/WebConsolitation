//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.6387
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects
{
    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectRolekey)
    /// </para>
    /// </summary>
    public partial class subjectRole : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator subjectRole(XElement xe) { return XTypedServices.ToXTypedElement<subjectRole>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static subjectRole()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public subjectRole()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectRolekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("subjectRole", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static subjectRole Load(string xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Parse(string xml)
        {
            return XTypedServices.Parse<subjectRole>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<subjectRole>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class servicePerson : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator servicePerson(XElement xe) { return XTypedServices.ToXTypedElement<servicePerson>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static servicePerson()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public servicePerson()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("servicePerson", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static servicePerson Load(string xmlFile)
        {
            return XTypedServices.Load<servicePerson>(xmlFile);
        }

        public static servicePerson Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<servicePerson>(xmlFile);
        }

        public static servicePerson Parse(string xml)
        {
            return XTypedServices.Parse<servicePerson>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<servicePerson>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportLevelkey)
    /// </para>
    /// </summary>
    public partial class reportLevel : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportLevel(XElement xe) { return XTypedServices.ToXTypedElement<reportLevel>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportLevel()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportLevel-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public reportLevel()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportLevelkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportLevel", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportLevel Load(string xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Parse(string xml)
        {
            return XTypedServices.Parse<reportLevel>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportLevel>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class person : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator person(XElement xe) { return XTypedServices.ToXTypedElement<person>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static person()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public person()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("person", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static person Load(string xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Parse(string xml)
        {
            return XTypedServices.Parse<person>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<person>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKFSkey)
    /// </para>
    /// </summary>
    public partial class patternOfOwnership : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator patternOfOwnership(XElement xe) { return XTypedServices.ToXTypedElement<patternOfOwnership>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static patternOfOwnership()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKFS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKFSkey)
        /// </para>
        /// </summary>
        public patternOfOwnership()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKFSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKFSkey ClsOKFSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKFS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKFSkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("patternOfOwnership", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static patternOfOwnership Load(string xmlFile)
        {
            return XTypedServices.Load<patternOfOwnership>(xmlFile);
        }

        public static patternOfOwnership Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<patternOfOwnership>(xmlFile);
        }

        public static patternOfOwnership Parse(string xml)
        {
            return XTypedServices.Parse<patternOfOwnership>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<patternOfOwnership>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKFSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsGRBSkey)
    /// </para>
    /// </summary>
    public partial class grbs : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator grbs(XElement xe) { return XTypedServices.ToXTypedElement<grbs>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static grbs()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsGRBS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public grbs()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsGRBSkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("grbs", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static grbs Load(string xmlFile)
        {
            return XTypedServices.Load<grbs>(xmlFile);
        }

        public static grbs Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<grbs>(xmlFile);
        }

        public static grbs Parse(string xml)
        {
            return XTypedServices.Parse<grbs>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<grbs>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class chiefAccountant : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator chiefAccountant(XElement xe) { return XTypedServices.ToXTypedElement<chiefAccountant>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static chiefAccountant()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public chiefAccountant()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("chiefAccountant", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static chiefAccountant Load(string xmlFile)
        {
            return XTypedServices.Load<chiefAccountant>(xmlFile);
        }

        public static chiefAccountant Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<chiefAccountant>(xmlFile);
        }

        public static chiefAccountant Parse(string xml)
        {
            return XTypedServices.Parse<chiefAccountant>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<chiefAccountant>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class chief : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator chief(XElement xe) { return XTypedServices.ToXTypedElement<chief>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static chief()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public chief()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("chief", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static chief Load(string xmlFile)
        {
            return XTypedServices.Load<chief>(xmlFile);
        }

        public static chief Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<chief>(xmlFile);
        }

        public static chief Parse(string xml)
        {
            return XTypedServices.Parse<chief>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<chief>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Budgetkey)
    /// </para>
    /// </summary>
    public partial class budget : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator budget(XElement xe) { return XTypedServices.ToXTypedElement<budget>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static budget()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Budget-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public budget()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Budgetkey Budgetkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Budget-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Budgetkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Budget-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("budget", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static budget Load(string xmlFile)
        {
            return XTypedServices.Load<budget>(xmlFile);
        }

        public static budget Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<budget>(xmlFile);
        }

        public static budget Parse(string xml)
        {
            return XTypedServices.Parse<budget>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<budget>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Budget-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Budgetkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ATOkey)
    /// </para>
    /// </summary>
    public partial class ato : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ato(XElement xe) { return XTypedServices.ToXTypedElement<ato>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static ato()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ATO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ato()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ATOkey ATOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ATO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ATOkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ATO-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ato", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ato Load(string xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Parse(string xml)
        {
            return XTypedServices.Parse<ato>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ato>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubject*, Office*)
    /// </para>
    /// </summary>
    public partial class Objects : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.ReportSubject> ReportSubjectField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.budget.model.Office> OfficeField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Objects(XElement xe) { return XTypedServices.ToXTypedElement<Objects>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Objects()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject", "ru.krista.consolidation.model")), new NamedContentModelEntity(XName.Get("Office", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubject*, Office*)
        /// </para>
        /// </summary>
        public Objects()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject*, Office*)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.ReportSubject> ReportSubject
        {
            get
            {
                if ((this.ReportSubjectField == null))
                {
                    this.ReportSubjectField = new XTypedList<ru.krista.consolidation.model.ReportSubject>(this, LinqToXsdTypeManager.Instance, XName.Get("ReportSubject", "ru.krista.consolidation.model"));
                }
                return this.ReportSubjectField;
            }
            set
            {
                if ((value == null))
                {
                    this.ReportSubjectField = null;
                }
                else
                {
                    if ((this.ReportSubjectField == null))
                    {
                        this.ReportSubjectField = XTypedList<ru.krista.consolidation.model.ReportSubject>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ReportSubject", "ru.krista.consolidation.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.ReportSubject>(this.ReportSubjectField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject*, Office*)
        /// </para>
        /// </summary>
        public IList<ru.krista.budget.model.Office> Office
        {
            get
            {
                if ((this.OfficeField == null))
                {
                    this.OfficeField = new XTypedList<ru.krista.budget.model.Office>(this, LinqToXsdTypeManager.Instance, XName.Get("Office", "ru.krista.budget.model"));
                }
                return this.OfficeField;
            }
            set
            {
                if ((value == null))
                {
                    this.OfficeField = null;
                }
                else
                {
                    if ((this.OfficeField == null))
                    {
                        this.OfficeField = XTypedList<ru.krista.budget.model.Office>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Office", "ru.krista.budget.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.budget.model.Office>(this.OfficeField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Objects", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Objects Load(string xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Parse(string xml)
        {
            return XTypedServices.Parse<Objects>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Objects>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubject));
            localElementDictionary.Add(XName.Get("Office", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Office));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("subjectRole", ""), typeof(/*global::*/subjectRole));
            elementDictionary.Add(XName.Get("servicePerson", ""), typeof(/*global::*/servicePerson));
            elementDictionary.Add(XName.Get("reportLevel", ""), typeof(/*global::*/reportLevel));
            elementDictionary.Add(XName.Get("person", ""), typeof(/*global::*/person));
            elementDictionary.Add(XName.Get("patternOfOwnership", ""), typeof(/*global::*/patternOfOwnership));
            elementDictionary.Add(XName.Get("grbs", ""), typeof(/*global::*/grbs));
            elementDictionary.Add(XName.Get("chiefAccountant", ""), typeof(/*global::*/chiefAccountant));
            elementDictionary.Add(XName.Get("chief", ""), typeof(/*global::*/chief));
            elementDictionary.Add(XName.Get("budget", ""), typeof(/*global::*/budget));
            elementDictionary.Add(XName.Get("ato", ""), typeof(/*global::*/ato));
            elementDictionary.Add(XName.Get("Objects", ""), typeof(/*global::*/Objects));
            elementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportSubjectRolekey));
            elementDictionary.Add(XName.Get("ReportSubject", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportSubject));
            elementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportLevelkey));
            elementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.Officekey));
            elementDictionary.Add(XName.Get("Office", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.Office));
            elementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.Employeekey));
            elementDictionary.Add(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ClsOKFSkey));
            elementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ClsGRBSkey));
            elementDictionary.Add(XName.Get("Budget-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.Budgetkey));
            elementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ATOkey));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("subjectRole", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public subjectRole subjectRole { get { return rootObject as subjectRole; } }

        public servicePerson servicePerson { get { return rootObject as servicePerson; } }

        public reportLevel reportLevel { get { return rootObject as reportLevel; } }

        public person person { get { return rootObject as person; } }

        public patternOfOwnership patternOfOwnership { get { return rootObject as patternOfOwnership; } }

        public grbs grbs { get { return rootObject as grbs; } }

        public chiefAccountant chiefAccountant { get { return rootObject as chiefAccountant; } }

        public chief chief { get { return rootObject as chief; } }

        public budget budget { get { return rootObject as budget; } }

        public ato ato { get { return rootObject as ato; } }

        public Objects Objects { get { return rootObject as Objects; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(servicePerson root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(patternOfOwnership root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(grbs root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(chiefAccountant root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(chief root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(budget root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public subjectRole subjectRole { get { return rootObject as subjectRole; } }

        public servicePerson servicePerson { get { return rootObject as servicePerson; } }

        public reportLevel reportLevel { get { return rootObject as reportLevel; } }

        public person person { get { return rootObject as person; } }

        public patternOfOwnership patternOfOwnership { get { return rootObject as patternOfOwnership; } }

        public grbs grbs { get { return rootObject as grbs; } }

        public chiefAccountant chiefAccountant { get { return rootObject as chiefAccountant; } }

        public chief chief { get { return rootObject as chief; } }

        public budget budget { get { return rootObject as budget; } }

        public ato ato { get { return rootObject as ato; } }

        public Objects Objects { get { return rootObject as Objects; } }

        public /*global::*/ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportSubjectRolekey; } }

        public /*global::*/ru.krista.consolidation.model.ReportSubject ReportSubject { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportSubject; } }

        public /*global::*/ru.krista.consolidation.model.ReportLevelkey ReportLevelkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportLevelkey; } }

        public /*global::*/ru.krista.budget.model.Officekey Officekey { get { return rootObject as /*global::*/ru.krista.budget.model.Officekey; } }

        public /*global::*/ru.krista.budget.model.Office Office { get { return rootObject as /*global::*/ru.krista.budget.model.Office; } }

        public /*global::*/ru.krista.budget.model.Employeekey Employeekey { get { return rootObject as /*global::*/ru.krista.budget.model.Employeekey; } }

        public /*global::*/ru.krista.budget.model.ClsOKFSkey ClsOKFSkey { get { return rootObject as /*global::*/ru.krista.budget.model.ClsOKFSkey; } }

        public /*global::*/ru.krista.budget.model.ClsGRBSkey ClsGRBSkey { get { return rootObject as /*global::*/ru.krista.budget.model.ClsGRBSkey; } }

        public /*global::*/ru.krista.budget.model.Budgetkey Budgetkey { get { return rootObject as /*global::*/ru.krista.budget.model.Budgetkey; } }

        public /*global::*/ru.krista.budget.model.ATOkey ATOkey { get { return rootObject as /*global::*/ru.krista.budget.model.ATOkey; } }

        private XRoot()
        {
        }

        public XRoot(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(servicePerson root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(patternOfOwnership root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(grbs root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(chiefAccountant root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(chief root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(budget root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportSubjectRolekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportLevelkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.Officekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.Office root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.Employeekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ClsOKFSkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ClsGRBSkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.Budgetkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ATOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
    namespace ru.krista.consolidation.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class ReportSubjectRolekey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportSubjectRolekey(XElement xe) { return XTypedServices.ToXTypedElement<ReportSubjectRolekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportSubjectRolekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectRolekey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectRolekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectRolekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
        /// </para>
        /// </summary>
        public partial class ReportSubject : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportSubject(XElement xe) { return XTypedServices.ToXTypedElement<ReportSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ReportSubject()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("person", "")), new NamedContentModelEntity(XName.Get("reportLevel", "")), new NamedContentModelEntity(XName.Get("servicePerson", "")), new NamedContentModelEntity(XName.Get("subjectRole", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
            /// </para>
            /// </summary>
            public ReportSubject()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set
                {
                    this.SetElement(XName.Get("person", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
            /// </para>
            /// </summary>
            public reportLevel reportLevel
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportLevel", ""));
                    return ((reportLevel)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportLevel", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
            /// </para>
            /// </summary>
            public servicePerson servicePerson
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("servicePerson", ""));
                    return ((servicePerson)(x));
                }
                set
                {
                    this.SetElement(XName.Get("servicePerson", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, servicePerson?, subjectRole)
            /// </para>
            /// </summary>
            public subjectRole subjectRole
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("subjectRole", ""));
                    return ((subjectRole)(x));
                }
                set
                {
                    this.SetElement(XName.Get("subjectRole", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubject", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubject Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubject>(xmlFile);
            }

            public static ReportSubject Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubject>(xmlFile);
            }

            public static ReportSubject Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubject>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubject>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
                localElementDictionary.Add(XName.Get("servicePerson", ""), typeof(servicePerson));
                localElementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ReportLevelkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportLevelkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportLevelkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportLevelkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportLevel-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportLevelkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportLevelkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportLevelkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public ReportSubjectRolekey ReportSubjectRolekey { get { return rootObject as ReportSubjectRolekey; } }

            public ReportSubject ReportSubject { get { return rootObject as ReportSubject; } }

            public ReportLevelkey ReportLevelkey { get { return rootObject as ReportLevelkey; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(ReportSubjectRolekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubject root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportLevelkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
    namespace ru.krista.budget.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class Officekey : XTypedElement, IXMetaData
        {

            public static explicit operator Officekey(XElement xe) { return XTypedServices.ToXTypedElement<Officekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public Officekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Office-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Officekey Load(string xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Parse(string xml)
            {
                return XTypedServices.Parse<Officekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Officekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
        /// </para>
        /// </summary>
        public partial class Office : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget> budgetField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<chief> chiefField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<patternOfOwnership> patternOfOwnershipField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<grbs> grbsField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<chiefAccountant> chiefAccountantField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            public static explicit operator Office(XElement xe) { return XTypedServices.ToXTypedElement<Office>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static Office()
            {
                BuildElementDictionary();
            }

            /// <summary>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public Office()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public IList<Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget> budget
            {
                get
                {
                    if ((this.budgetField == null))
                    {
                        this.budgetField = new XTypedList<Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", ""));
                    }
                    return this.budgetField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.budgetField = null;
                    }
                    else
                    {
                        if ((this.budgetField == null))
                        {
                            this.budgetField = XTypedList<Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget>(this.budgetField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public IList<chief> chief
            {
                get
                {
                    if ((this.chiefField == null))
                    {
                        this.chiefField = new XTypedList<chief>(this, LinqToXsdTypeManager.Instance, XName.Get("chief", ""));
                    }
                    return this.chiefField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.chiefField = null;
                    }
                    else
                    {
                        if ((this.chiefField == null))
                        {
                            this.chiefField = XTypedList<chief>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("chief", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<chief>(this.chiefField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public IList<patternOfOwnership> patternOfOwnership
            {
                get
                {
                    if ((this.patternOfOwnershipField == null))
                    {
                        this.patternOfOwnershipField = new XTypedList<patternOfOwnership>(this, LinqToXsdTypeManager.Instance, XName.Get("patternOfOwnership", ""));
                    }
                    return this.patternOfOwnershipField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.patternOfOwnershipField = null;
                    }
                    else
                    {
                        if ((this.patternOfOwnershipField == null))
                        {
                            this.patternOfOwnershipField = XTypedList<patternOfOwnership>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("patternOfOwnership", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<patternOfOwnership>(this.patternOfOwnershipField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ato", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public IList<grbs> grbs
            {
                get
                {
                    if ((this.grbsField == null))
                    {
                        this.grbsField = new XTypedList<grbs>(this, LinqToXsdTypeManager.Instance, XName.Get("grbs", ""));
                    }
                    return this.grbsField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.grbsField = null;
                    }
                    else
                    {
                        if ((this.grbsField == null))
                        {
                            this.grbsField = XTypedList<grbs>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("grbs", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<grbs>(this.grbsField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((budget, chief, patternOfOwnership)|(ato, budget, ((grbs?, patternOfOwnership)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?)|(chief, (patternOfOwnership | (grbs, patternOfOwnership?)|(chiefAccountant, (patternOfOwnership | (grbs, patternOfOwnership?))?))?))?))
            /// </para>
            /// </summary>
            public IList<chiefAccountant> chiefAccountant
            {
                get
                {
                    if ((this.chiefAccountantField == null))
                    {
                        this.chiefAccountantField = new XTypedList<chiefAccountant>(this, LinqToXsdTypeManager.Instance, XName.Get("chiefAccountant", ""));
                    }
                    return this.chiefAccountantField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.chiefAccountantField = null;
                    }
                    else
                    {
                        if ((this.chiefAccountantField == null))
                        {
                            this.chiefAccountantField = XTypedList<chiefAccountant>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("chiefAccountant", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<chiefAccountant>(this.chiefAccountantField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<short> rbps
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("rbps", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("rbps", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<int> okpo
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("okpo", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("okpo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<long> ogrn
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ogrn", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ogrn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string mailingAddress
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("mailingAddress", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("mailingAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string locationAddress
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("locationAddress", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("locationAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string kpp
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("kpp", ""));
                    /*if ((x == null))
                    {
                        return null;
                    }*/
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("kpp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string inn
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("inn", ""));
                    /*if ((x == null))
                    {
                        return null;
                    }*/
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("inn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string fullName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("fullName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("fullName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string caption
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("caption", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Office", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Office Load(string xmlFile)
            {
                return XTypedServices.Load<Office>(xmlFile);
            }

            public static Office Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Office>(xmlFile);
            }

            public static Office Parse(string xml)
            {
                return XTypedServices.Parse<Office>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Office>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("budget", ""), typeof(Krista.FM.RIA.Extensions.E86N.Services.Pump.PumpWebCons.subjects.budget));
                localElementDictionary.Add(XName.Get("chief", ""), typeof(chief));
                localElementDictionary.Add(XName.Get("patternOfOwnership", ""), typeof(patternOfOwnership));
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
                localElementDictionary.Add(XName.Get("grbs", ""), typeof(grbs));
                localElementDictionary.Add(XName.Get("chiefAccountant", ""), typeof(chiefAccountant));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class Employeekey : XTypedElement, IXMetaData
        {

            public static explicit operator Employeekey(XElement xe) { return XTypedServices.ToXTypedElement<Employeekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public Employeekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Employee-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Employeekey Load(string xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Parse(string xml)
            {
                return XTypedServices.Parse<Employeekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Employeekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKFSkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKFSkey(XElement xe) { return XTypedServices.ToXTypedElement<ClsOKFSkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ClsOKFSkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsOKFS-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKFSkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKFSkey>(xmlFile);
            }

            public static ClsOKFSkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKFSkey>(xmlFile);
            }

            public static ClsOKFSkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKFSkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKFSkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsGRBSkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsGRBSkey(XElement xe) { return XTypedServices.ToXTypedElement<ClsGRBSkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ClsGRBSkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsGRBS-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsGRBSkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsGRBSkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsGRBSkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class Budgetkey : XTypedElement, IXMetaData
        {

            public static explicit operator Budgetkey(XElement xe) { return XTypedServices.ToXTypedElement<Budgetkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public Budgetkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Budget-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Budgetkey Load(string xmlFile)
            {
                return XTypedServices.Load<Budgetkey>(xmlFile);
            }

            public static Budgetkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Budgetkey>(xmlFile);
            }

            public static Budgetkey Parse(string xml)
            {
                return XTypedServices.Parse<Budgetkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Budgetkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ATOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ATOkey(XElement xe) { return XTypedServices.ToXTypedElement<ATOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ATOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ATO-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ATOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Parse(string xml)
            {
                return XTypedServices.Parse<ATOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ATOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public Officekey Officekey { get { return rootObject as Officekey; } }

            public Office Office { get { return rootObject as Office; } }

            public Employeekey Employeekey { get { return rootObject as Employeekey; } }

            public ClsOKFSkey ClsOKFSkey { get { return rootObject as ClsOKFSkey; } }

            public ClsGRBSkey ClsGRBSkey { get { return rootObject as ClsGRBSkey; } }

            public Budgetkey Budgetkey { get { return rootObject as Budgetkey; } }

            public ATOkey ATOkey { get { return rootObject as ATOkey; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(Officekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Office root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Employeekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKFSkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsGRBSkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Budgetkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ATOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
}

