//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.239
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Krista.FM.RIA.Extensions.MarksOMSU.Resources {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Krista.FM.RIA.Extensions.MarksOMSU.Resources.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.isDirty = function () {
        ///    return false;
        ///}
        ///
        ///ViewPersistence.refresh = function () {
        ///    targetMarkStore.reload()
        ///}
        ///
        ///ShowDifferenceWarning = function () {
        ///    var warningsFound = false;
        ///    for (i = 0; i &lt; targetFactsStore.getCount(); i++) {
        ///        warningsFound = warningsFound || (targetFactsStore.getAt(i).get(&apos;HasWarning&apos;) != &apos;&apos;);
        ///    }
        ///    if (warningsFound) {
        ///        Ext.Msg.show({
        ///            title: &apos;Внимание!&apos;,
        ///            msg: &apos;В некоторых МО есть устаревшие значения  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string IneffExpensesControl {
            get {
                return ResourceManager.GetString("IneffExpensesControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.refresh = function () {
        ///    var comboBox = this.marksCombo;
        ///    comboBox.clear();
        ///    comboBox.store.addListener(
        ///        &apos;load&apos;,
        ///        function () {
        ///            if (comboBox.store.data.length &gt; 0) {
        ///                comboBox.selectByIndex(0);
        ///            } else {
        ///                comboBox.clear();
        ///            }
        ///            comboBox.fireEvent(&apos;select&apos;);
        ///        },
        ///        this,
        ///        { single: true }
        ///    );
        ///    comboBox.store.reload();
        ///    comboBox.lastQuery = &apos;&apos;;
        ///};
        ///
        ///V [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksCompareView {
            get {
                return ResourceManager.GetString("MarksCompareView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на columnRenderStatus = function (v, p, r) {
        ///    var s;
        ///    if (v != null) {
        ///        var st = r.get(&apos;RefStatusData&apos;);
        ///        if (st == 1) {
        ///            s = &apos;&lt;img class=&quot;x-panel-inline-icon icon-useredit&quot; src=&quot;/extjs/resources/images/default/s-gif/ext.axd&quot; alt=&quot;&quot;&gt;&apos;;
        ///        } else if (st == 2) {
        ///            s = &apos;&lt;img class=&quot;x-panel-inline-icon icon-usermagnify&quot; src=&quot;/extjs/resources/images/default/s-gif/ext.axd&quot; alt=&quot;&quot;&gt;&apos;;
        ///        } else if (st == 3) {
        ///            s = &apos;&lt;img class=&quot;x-panel-inline-icon i [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksOivGridControl {
            get {
                return ResourceManager.GetString("MarksOivGridControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.isDirty = function () {
        ///    return this.dsMarks.isDirty();
        ///};
        ///
        ///ViewPersistence.refresh = function () {
        ///    var comboBox = this.marksCombo;
        ///    comboBox.clear();
        ///    comboBox.store.addListener(
        ///        &apos;load&apos;,
        ///        function () {
        ///            if (comboBox.store.data.length &gt; 0) {
        ///                comboBox.selectByIndex(0);
        ///            } else {
        ///                comboBox.clear();
        ///            }
        ///            comboBox.fireEvent(&apos;select&apos;);
        ///        },
        ///        this,
        ///        { single:  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksOivView {
            get {
                return ResourceManager.GetString("MarksOivView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.isDirty = function () {
        ///    return false;
        ///}
        ///
        ///ViewPersistence.refresh = function () {
        ///}.
        /// </summary>
        internal static string MarksOmsuEstimateView {
            get {
                return ResourceManager.GetString("MarksOmsuEstimateView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на function beforeEditCell(e) {
        ///    if (e.record.get(&apos;RefStatusData&apos;) != 1) {
        ///        return false;
        ///    } else if (e.field == &apos;PriorValue&apos; || e.field == &apos;CurrentValue&apos;) {
        ///        return !e.record.get(&apos;ReadonlyCurrent&apos;);
        ///    } else if (e.field == &apos;Prognoz1&apos; || e.field == &apos;Prognoz2&apos; || e.field == &apos;Prognoz3&apos;) {
        ///        return !e.record.get(&apos;ReadonlyPrognoz&apos;);
        ///    }
        ///    return true;
        ///}
        ///
        ///function getFormatter(scale, okei) {
        ///    if (okei == &apos;ДА/НЕТ&apos;) {
        ///        return function (val) {
        ///            if (val [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksOmsuGridControl {
            get {
                return ResourceManager.GetString("MarksOmsuGridControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.isDirty = function () {
        ///    if (this.dsMarks.isDirty()) {
        ///        return true;
        ///    }
        ///    for (p in this) {
        ///        if (p.substring(0, 9) == &apos;StoreRow_&apos;) {
        ///            var store = this[p];
        ///            if (store.isDirty()) {
        ///                return true;
        ///            }
        ///        }
        ///    }
        ///    return false;
        ///};
        ///
        ///ViewPersistence.refresh = function () {
        ///    this.regionsCombo.store.reload();
        ///};
        ///
        ///function beforeEditCellReadonly(e) {
        ///    return false;
        ///}
        ///
        ///function saveData() {
        ///    va [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksOmsuReportView {
            get {
                return ResourceManager.GetString("MarksOmsuReportView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ViewPersistence.refresh = function () {
        ///    this.dsMarks.reload();
        ///};
        ///
        ///ViewPersistence.isDirty = function () {
        ///    if (this.dsMarks.isDirty()) {
        ///        return true;
        ///    }
        ///    for (p in this) {
        ///        if (p.substring(0, 9) == &apos;StoreRow_&apos;) {
        ///            var store = this[p];
        ///            if (store.isDirty()) {
        ///                return true;
        ///            }
        ///        }
        ///    }
        ///    return false;
        ///};
        ///
        ///function saveData() {
        ///    var func = function(item){
        ///        try {
        ///            var store = eval(&apos;St [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MarksOmsuView {
            get {
                return ResourceManager.GetString("MarksOmsuView", resourceCulture);
            }
        }
        
        internal static byte[] TemplateExportForOiv {
            get {
                object obj = ResourceManager.GetObject("TemplateExportForOiv", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] TemplateExportForOmsu {
            get {
                object obj = ResourceManager.GetObject("TemplateExportForOmsu", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] TemplateExportIneffExpences {
            get {
                object obj = ResourceManager.GetObject("TemplateExportIneffExpences", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] TemplateExportOivInputData {
            get {
                object obj = ResourceManager.GetObject("TemplateExportOivInputData", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
