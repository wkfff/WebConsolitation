//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8745
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace egrul.nalog.ruvo_rugf_2_311_26_04_04_02_custom
{
    /// <summary>
    /// <para>
    /// Regular expression: (СвЮЛ*)
    /// </para>
    /// </summary>
    public partial class EGRUL : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<СвЮЛLocalType> СвЮЛField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator EGRUL(XElement xe)
        {
            return XTypedServices.ToXTypedElement<EGRUL>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static EGRUL()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвЮЛ", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (СвЮЛ*)
        /// </para>
        /// </summary>
        public EGRUL()
        {
        }

        /// <summary>
        /// <para>
        /// Сведения о  юридическом лице
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (СвЮЛ*)
        /// </para>
        /// </summary>
        public IList<EGRUL.СвЮЛLocalType> СвЮЛ
        {
            get
            {
                if ((this.СвЮЛField == null))
                {
                    this.СвЮЛField = new XTypedList<СвЮЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвЮЛ", ""));
                }
                return this.СвЮЛField;
            }
            set
            {
                if ((value == null))
                {
                    this.СвЮЛField = null;
                }
                else
                {
                    if ((this.СвЮЛField == null))
                    {
                        this.СвЮЛField = XTypedList<СвЮЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвЮЛ", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<СвЮЛLocalType>(this.СвЮЛField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ДатаВыг
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаВыг", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаВыг", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("EGRUL", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static EGRUL Load(string xmlFile)
        {
            return XTypedServices.Load<EGRUL>(xmlFile);
        }

        public static EGRUL Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<EGRUL>(xmlFile);
        }

        public static EGRUL Parse(string xml)
        {
            return XTypedServices.Parse<EGRUL>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<EGRUL>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("СвЮЛ", ""), typeof(СвЮЛLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
        /// </para>
        /// </summary>
        public partial class СвЮЛLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвСтатусLocalType> СвСтатусField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвУпрОргLocalType> СвУпрОргField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СведДолжнФЛLocalType> СведДолжнФЛField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвЛицензияLocalType> СвЛицензияField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвРеоргLocalType> СвРеоргField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвПредшLocalType> СвПредшField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвКФХПредшLocalType> СвКФХПредшField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвПреемLocalType> СвПреемField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<СвЗапЕГРЮЛLocalType> СвЗапЕГРЮЛField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator СвЮЛLocalType(XElement xe)
            {
                return XTypedServices.ToXTypedElement<СвЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static СвЮЛLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("СвНаимЮЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвАдресЮЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвАдрЭлПочты", "")),
                    new NamedContentModelEntity(XName.Get("СвОбрЮЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвРегОрг", "")),
                    new NamedContentModelEntity(XName.Get("СвСтатус", "")),
                    new NamedContentModelEntity(XName.Get("СвПрекрЮЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвУчетНО", "")),
                    new NamedContentModelEntity(XName.Get("СвРегПФ", "")),
                    new NamedContentModelEntity(XName.Get("СвРегФСС", "")),
                    new NamedContentModelEntity(XName.Get("СвУстКап", "")),
                    new NamedContentModelEntity(XName.Get("СвУпрОрг", "")),
                    new NamedContentModelEntity(XName.Get("СведДолжнФЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвУчредит", "")),
                    new NamedContentModelEntity(XName.Get("СвДоляООО", "")),
                    new NamedContentModelEntity(XName.Get("СвДержРеестрАО", "")),
                    new NamedContentModelEntity(XName.Get("СвОКВЭД", "")),
                    new NamedContentModelEntity(XName.Get("СвЛицензия", "")),
                    new NamedContentModelEntity(XName.Get("СвПодразд", "")),
                    new NamedContentModelEntity(XName.Get("СвРеорг", "")),
                    new NamedContentModelEntity(XName.Get("СвПредш", "")),
                    new NamedContentModelEntity(XName.Get("СвКФХПредш", "")),
                    new NamedContentModelEntity(XName.Get("СвПреем", "")),
                    new NamedContentModelEntity(XName.Get("СвКФХПреем", "")),
                    new NamedContentModelEntity(XName.Get("СвЗапЕГРЮЛ", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвЮЛLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Сведения о наименовании юридического лица
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвНаимЮЛLocalType СвНаимЮЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвНаимЮЛ", ""));
                    return ((СвНаимЮЛLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвНаимЮЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об адресе (месте нахождения)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвАдресЮЛLocalType СвАдресЮЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвАдресЮЛ", ""));
                    return ((СвАдресЮЛLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвАдресЮЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об адресе электронной почты юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвАдрЭлПочтыLocalType СвАдрЭлПочты
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвАдрЭлПочты", ""));
                    return ((СвАдрЭлПочтыLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвАдрЭлПочты", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о регистрации (образовании) юридического лица
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвОбрЮЛLocalType СвОбрЮЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвОбрЮЛ", ""));
                    return ((СвОбрЮЛLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвОбрЮЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о регистрирующем органе по месту нахождения юридического лица
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвРегОргLocalType СвРегОрг
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвРегОрг", ""));
                    return ((СвРегОргLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвРегОрг", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о состоянии (статусе) юридического лица
            /// </para>
            /// <para>
            /// Формируется только в случае, если код состояния по справочнику СЮЛСТ больше "001" и меньше "200" (включая состояние о нахождении хозяйственного общества в процессе уменьшения уставного капитала) либо код СЮЛСТ = 701, 702 или 801. В случае если в отношении ЮЛ внесено несколько статусов с указанными кодами (например, ЮЛ находится в состоянии нескольких реорганизаций), то формируются сведения по каждому из этих статусов
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвСтатусLocalType> СвСтатус
            {
                get
                {
                    if ((this.СвСтатусField == null))
                    {
                        this.СвСтатусField = new XTypedList<СвСтатусLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвСтатус", ""));
                    }
                    return this.СвСтатусField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвСтатусField = null;
                    }
                    else
                    {
                        if ((this.СвСтатусField == null))
                        {
                            this.СвСтатусField = XTypedList<СвСтатусLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвСтатус", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвСтатусLocalType>(this.СвСтатусField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о прекращении юридического лица
            /// </para>
            /// <para>
            /// Формируется только в случае, если код статуса ЮЛ по справочнику СЮЛСТ больше 200 и меньше 700
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвПрекрЮЛLocalType СвПрекрЮЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвПрекрЮЛ", ""));
                    return ((СвПрекрЮЛLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвПрекрЮЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об учете в налоговом органе
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвУчетНОLocalType СвУчетНО
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвУчетНО", ""));
                    return ((СвУчетНОLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвУчетНО", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о регистрации юридического лица в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвРегПФLocalType СвРегПФ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвРегПФ", ""));
                    return ((СвРегПФLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвРегПФ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о регистрации юридического лица в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвРегФССLocalType СвРегФСС
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвРегФСС", ""));
                    return ((СвРегФССLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвРегФСС", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвУстКапLocalType СвУстКап
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвУстКап", ""));
                    return ((СвУстКапLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвУстКап", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об управляющей организации
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвУпрОргLocalType> СвУпрОрг
            {
                get
                {
                    if ((this.СвУпрОргField == null))
                    {
                        this.СвУпрОргField = new XTypedList<СвУпрОргLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвУпрОрг", ""));
                    }
                    return this.СвУпрОргField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвУпрОргField = null;
                    }
                    else
                    {
                        if ((this.СвУпрОргField == null))
                        {
                            this.СвУпрОргField = XTypedList<СвУпрОргLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвУпрОрг", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвУпрОргLocalType>(this.СвУпрОргField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о лице, имеющем право без доверенности действовать от имени юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СведДолжнФЛLocalType> СведДолжнФЛ
            {
                get
                {
                    if ((this.СведДолжнФЛField == null))
                    {
                        this.СведДолжнФЛField = new XTypedList<СведДолжнФЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СведДолжнФЛ", ""));
                    }
                    return this.СведДолжнФЛField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СведДолжнФЛField = null;
                    }
                    else
                    {
                        if ((this.СведДолжнФЛField == null))
                        {
                            this.СведДолжнФЛField = XTypedList<СведДолжнФЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СведДолжнФЛ", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СведДолжнФЛLocalType>(this.СведДолжнФЛField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об учредителях (участниках) юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвУчредитLocalType СвУчредит
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвУчредит", ""));
                    return ((СвУчредитLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвУчредит", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public ДоляУстКапЕГРЮЛТип СвДоляООО
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвДоляООО", ""));
                    return ((ДоляУстКапЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвДоляООО", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о держателе реестра акционеров акционерного общества
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвДержРеестрАОLocalType СвДержРеестрАО
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвДержРеестрАО", ""));
                    return ((СвДержРеестрАОLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвДержРеестрАО", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвОКВЭДLocalType СвОКВЭД
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвОКВЭД", ""));
                    return ((СвОКВЭДLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвОКВЭД", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о лицензиях, выданных ЮЛ
            /// </para>
            /// <para>
            /// Передаются сведения только о действующих лицензиях или лицензиях, действие которых приостановлено. При передаче сведений о ЮЛ, прекратившем деятельность, сведения о лицензиях не передаются
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвЛицензияLocalType> СвЛицензия
            {
                get
                {
                    if ((this.СвЛицензияField == null))
                    {
                        this.СвЛицензияField = new XTypedList<СвЛицензияLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвЛицензия", ""));
                    }
                    return this.СвЛицензияField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвЛицензияField = null;
                    }
                    else
                    {
                        if ((this.СвЛицензияField == null))
                        {
                            this.СвЛицензияField = XTypedList<СвЛицензияLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвЛицензия", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвЛицензияLocalType>(this.СвЛицензияField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об обособленных подразделениях юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвПодраздLocalType СвПодразд
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвПодразд", ""));
                    return ((СвПодраздLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвПодразд", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об участии в реорганизации
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвРеоргLocalType> СвРеорг
            {
                get
                {
                    if ((this.СвРеоргField == null))
                    {
                        this.СвРеоргField = new XTypedList<СвРеоргLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвРеорг", ""));
                    }
                    return this.СвРеоргField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвРеоргField = null;
                    }
                    else
                    {
                        if ((this.СвРеоргField == null))
                        {
                            this.СвРеоргField = XTypedList<СвРеоргLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвРеорг", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвРеоргLocalType>(this.СвРеоргField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о правопредшественнике
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвПредшLocalType> СвПредш
            {
                get
                {
                    if ((this.СвПредшField == null))
                    {
                        this.СвПредшField = new XTypedList<СвПредшLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвПредш", ""));
                    }
                    return this.СвПредшField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвПредшField = null;
                    }
                    else
                    {
                        if ((this.СвПредшField == null))
                        {
                            this.СвПредшField = XTypedList<СвПредшLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвПредш", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвПредшLocalType>(this.СвПредшField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвКФХПредшLocalType> СвКФХПредш
            {
                get
                {
                    if ((this.СвКФХПредшField == null))
                    {
                        this.СвКФХПредшField = new XTypedList<СвКФХПредшLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвКФХПредш", ""));
                    }
                    return this.СвКФХПредшField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвКФХПредшField = null;
                    }
                    else
                    {
                        if ((this.СвКФХПредшField == null))
                        {
                            this.СвКФХПредшField = XTypedList<СвКФХПредшLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвКФХПредш", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвКФХПредшLocalType>(this.СвКФХПредшField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о правопреемнике
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвПреемLocalType> СвПреем
            {
                get
                {
                    if ((this.СвПреемField == null))
                    {
                        this.СвПреемField = new XTypedList<СвПреемLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвПреем", ""));
                    }
                    return this.СвПреемField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвПреемField = null;
                    }
                    else
                    {
                        if ((this.СвПреемField == null))
                        {
                            this.СвПреемField = XTypedList<СвПреемLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвПреем", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвПреемLocalType>(this.СвПреемField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о крестьянском (фермерском) хозяйстве, которые  внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public СвКФХПреемLocalType СвКФХПреем
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвКФХПреем", ""));
                    return ((СвКФХПреемLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвКФХПреем", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о записях, внесенных в ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (СвНаимЮЛ, СвАдресЮЛ, СвАдрЭлПочты?, СвОбрЮЛ, СвРегОрг, СвСтатус*, СвПрекрЮЛ?, СвУчетНО?, СвРегПФ?, СвРегФСС?, СвУстКап?, СвУпрОрг*, СведДолжнФЛ*, СвУчредит?, СвДоляООО?, СвДержРеестрАО?, СвОКВЭД?, СвЛицензия*, СвПодразд?, СвРеорг*, СвПредш*, СвКФХПредш*, СвПреем*, СвКФХПреем?, СвЗапЕГРЮЛ+)
            /// </para>
            /// </summary>
            public IList<EGRUL.СвЮЛLocalType.СвЗапЕГРЮЛLocalType> СвЗапЕГРЮЛ
            {
                get
                {
                    if ((this.СвЗапЕГРЮЛField == null))
                    {
                        this.СвЗапЕГРЮЛField = new XTypedList<СвЗапЕГРЮЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвЗапЕГРЮЛ", ""));
                    }
                    return this.СвЗапЕГРЮЛField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.СвЗапЕГРЮЛField = null;
                    }
                    else
                    {
                        if ((this.СвЗапЕГРЮЛField == null))
                        {
                            this.СвЗапЕГРЮЛField = XTypedList<СвЗапЕГРЮЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвЗапЕГРЮЛ", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<СвЗапЕГРЮЛLocalType>(this.СвЗапЕГРЮЛField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Дата формирования сведений из ЕГРЮЛ в отношении юридического лица
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.DateTime ДатаВып
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ДатаВып", ""));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ДатаВып", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Основной государственный регистрационный номер юридического лица
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string ОГРН
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Дата присвоения ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.DateTime ДатаОГРН
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ДатаОГРН", ""));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ДатаОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// ИНН юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ИНН
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// КПП юридического лица
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string КПП
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("КПП", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("КПП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Наименование классификатора, по которому введены сведения об организационно-правовой форме: ОКОПФ, КОПФ
            /// </para>
            /// <para>
            /// , где:
            ///КОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору КОПФ. В этом случае в реквизите «КодОПФ» указывается 2-х значный код по классификатору КОПФ.
            ///ОКОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору ОКОПФ ОК 028 – 99. В этом случае в реквизите «КодОПФ» указывается 2-х значный код по данному классификатору.
            ///ОКОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору ОКОПФ ОК 028 – 99, ОК 028-2012, ОК 028-2012 (изм.2/2014).
            ///При передаче сведений об ОПФ по классификатору ОКОПФ ОК 028 – 99 в реквизите «КодОПФ» указывается 2-х значный код по данному классификатору.
            ///При передаче сведений об ОПФ классификаторам ОК 028-2012, ОК 028-2012 (изм.2/2014) в реквизите «КодОПФ» указывается 5-ти значный код по данным классификаторам.
            ///Отсутствует, если сведения об организационно-правовой форме внесены в ЕГРЮЛ без учета классификаторов
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string СпрОПФ
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("СпрОПФ", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("СпрОПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Код по выбранному классификатору
            /// </para>
            /// <para>
            /// Является обязательным при наличии реквизита СпрОПФ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string КодОПФ
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("КодОПФ", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("КодОПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Полное наименование организационно-правовой формы
            /// </para>
            /// <para>
            /// Передается в случае, если сведения об ОПФ были внесены без учета классификатора
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ПолнНаимОПФ
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ПолнНаимОПФ", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ПолнНаимОПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("СвЮЛ", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<СвЮЛLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("СвНаимЮЛ", ""), typeof(СвНаимЮЛLocalType));
                localElementDictionary.Add(XName.Get("СвАдресЮЛ", ""), typeof(СвАдресЮЛLocalType));
                localElementDictionary.Add(XName.Get("СвАдрЭлПочты", ""), typeof(СвАдрЭлПочтыLocalType));
                localElementDictionary.Add(XName.Get("СвОбрЮЛ", ""), typeof(СвОбрЮЛLocalType));
                localElementDictionary.Add(XName.Get("СвРегОрг", ""), typeof(СвРегОргLocalType));
                localElementDictionary.Add(XName.Get("СвСтатус", ""), typeof(СвСтатусLocalType));
                localElementDictionary.Add(XName.Get("СвПрекрЮЛ", ""), typeof(СвПрекрЮЛLocalType));
                localElementDictionary.Add(XName.Get("СвУчетНО", ""), typeof(СвУчетНОLocalType));
                localElementDictionary.Add(XName.Get("СвРегПФ", ""), typeof(СвРегПФLocalType));
                localElementDictionary.Add(XName.Get("СвРегФСС", ""), typeof(СвРегФССLocalType));
                localElementDictionary.Add(XName.Get("СвУстКап", ""), typeof(СвУстКапLocalType));
                localElementDictionary.Add(XName.Get("СвУпрОрг", ""), typeof(СвУпрОргLocalType));
                localElementDictionary.Add(XName.Get("СведДолжнФЛ", ""), typeof(СведДолжнФЛLocalType));
                localElementDictionary.Add(XName.Get("СвУчредит", ""), typeof(СвУчредитLocalType));
                localElementDictionary.Add(XName.Get("СвДоляООО", ""), typeof(ДоляУстКапЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("СвДержРеестрАО", ""), typeof(СвДержРеестрАОLocalType));
                localElementDictionary.Add(XName.Get("СвОКВЭД", ""), typeof(СвОКВЭДLocalType));
                localElementDictionary.Add(XName.Get("СвЛицензия", ""), typeof(СвЛицензияLocalType));
                localElementDictionary.Add(XName.Get("СвПодразд", ""), typeof(СвПодраздLocalType));
                localElementDictionary.Add(XName.Get("СвРеорг", ""), typeof(СвРеоргLocalType));
                localElementDictionary.Add(XName.Get("СвПредш", ""), typeof(СвПредшLocalType));
                localElementDictionary.Add(XName.Get("СвКФХПредш", ""), typeof(СвКФХПредшLocalType));
                localElementDictionary.Add(XName.Get("СвПреем", ""), typeof(СвПреемLocalType));
                localElementDictionary.Add(XName.Get("СвКФХПреем", ""), typeof(СвКФХПреемLocalType));
                localElementDictionary.Add(XName.Get("СвЗапЕГРЮЛ", ""), typeof(СвЗапЕГРЮЛLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвНаимЮЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвНаимЮЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвНаимЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвНаимЮЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвНаимЮЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Полное наименование юридического лица на русском языке
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НаимЮЛПолн
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Сокращенное наименование юридического лица на русском языке
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string НаимЮЛСокр
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимЮЛСокр", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимЮЛСокр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвНаимЮЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвНаимЮЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (АдресРФ, СведОтсутАдресЮЛ*)
            /// </para>
            /// </summary>
            public partial class СвАдресЮЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СведОтсутАдресЮЛLocalType> СведОтсутАдресЮЛField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвАдресЮЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвАдресЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвАдресЮЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("АдресРФ", "")), new NamedContentModelEntity(XName.Get("СведОтсутАдресЮЛ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (АдресРФ, СведОтсутАдресЮЛ*)
                /// </para>
                /// </summary>
                public СвАдресЮЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Адрес (место нахождения) юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (АдресРФ, СведОтсутАдресЮЛ*)
                /// </para>
                /// </summary>
                public АдрРФЕГРЮЛТип АдресРФ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("АдресРФ", ""));
                        return ((АдрРФЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("АдресРФ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о недостоверности адреса или отсутствии связи с ЮЛ по указанному адресу
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (АдресРФ, СведОтсутАдресЮЛ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвАдресЮЛLocalType.СведОтсутАдресЮЛLocalType> СведОтсутАдресЮЛ
                {
                    get
                    {
                        if ((this.СведОтсутАдресЮЛField == null))
                        {
                            this.СведОтсутАдресЮЛField = new XTypedList<СведОтсутАдресЮЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СведОтсутАдресЮЛ", ""));
                        }
                        return this.СведОтсутАдресЮЛField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СведОтсутАдресЮЛField = null;
                        }
                        else
                        {
                            if ((this.СведОтсутАдресЮЛField == null))
                            {
                                this.СведОтсутАдресЮЛField = XTypedList<СведОтсутАдресЮЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СведОтсутАдресЮЛ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СведОтсутАдресЮЛLocalType>(this.СведОтсутАдресЮЛField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвАдресЮЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвАдресЮЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("АдресРФ", ""), typeof(АдрРФЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СведОтсутАдресЮЛ", ""), typeof(СведОтсутАдресЮЛLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (РешСудНедАдр?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СведОтсутАдресЮЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СведОтсутАдресЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СведОтсутАдресЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СведОтсутАдресЮЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("РешСудНедАдр", "")),
                            new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                            new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (РешСудНедАдр?, ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СведОтсутАдресЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о решении суда, на основании которого адрес признан недостоверным
                    /// </para>
                    /// <para>
                    /// Формируется в случае, если значение реквизита ПризнОтсутАдресЮЛ = 3
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (РешСудНедАдр?, ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public РешСудТип РешСудНедАдр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("РешСудНедАдр", ""));
                            return ((РешСудТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("РешСудНедАдр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (РешСудНедАдр?, ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (РешСудНедАдр?, ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Признак невозможности взаимодействия с юридическим лицом по содержащемуся в ЕГРЮЛ адресу
                    /// </para>
                    /// <para>
                    ///  , где:
                    ///1 - связь с юридическим лицом по указанному в ЕГРЮЛ адресу отсутствует;
                    ///2 - адрес, указанный юридическим лицом при государственной регистрации, не существует
                    ///3 - сведения об адресе являются недостоверными на основании решения суда
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ПризнОтсутАдресЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ПризнОтсутАдресЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ПризнОтсутАдресЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СведОтсутАдресЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СведОтсутАдресЮЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("РешСудНедАдр", ""), typeof(РешСудТип));
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвАдрЭлПочтыLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвАдрЭлПочтыLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвАдрЭлПочтыLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвАдрЭлПочтыLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвАдрЭлПочтыLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической  ошибки в указанных сведениях
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Адрес электронной почты
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string Email
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("E-mail", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("E-mail", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвАдрЭлПочты", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвАдрЭлПочтыLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СпОбрЮЛ, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвОбрЮЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвОбрЮЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвОбрЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвОбрЮЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СпОбрЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СпОбрЮЛ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвОбрЮЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Способ образования юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СпОбрЮЛ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СпОбрЮЛLocalType СпОбрЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СпОбрЮЛ", ""));
                        return ((СпОбрЮЛLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СпОбрЮЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СпОбрЮЛ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СпОбрЮЛ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Основной государственный регистрационный номер юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string ОГРН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата присвоения ОГРН
                /// </para>
                /// <para>
                /// Для ЮЛ, созданных после 01.07.2002 г., является датой регистрации ЮЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаОГРН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаОГРН", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Регистрационный номер, присвоенный российскому юридическому лицу до 1 июля 2002 года, или регистрационный номер юридического лица на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя
                /// </para>
                /// <para>
                /// Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03»)
                ///								Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string РегНом
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("РегНом", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("РегНом", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата регистрации юридического лица
                /// </para>
                /// <para>
                /// 
                ///								Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03»)
                ///Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<System.DateTime> ДатаРег
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаРег", ""));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаРег", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Наименование органа, зарегистрировавшего юридическое лицо
                /// </para>
                /// <para>
                /// Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03»)
                ///Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string НаимРО
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимРО", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимРО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвОбрЮЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвОбрЮЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СпОбрЮЛ", ""), typeof(СпОбрЮЛLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СпОбрЮЛLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СпОбрЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СпОбрЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СпОбрЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код способа образования по справочнику СЮЛНД
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодСпОбрЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодСпОбрЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодСпОбрЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование способа образования юридического лица
                    /// </para>
                    /// <para>
                    /// Отсутствует в случае, если в реквизите КодСпОбрЮЛ  передается код =«03» (Сведения о регистрации на территории Республики Крым или территории города федерального значения Севастополя на день принятия в Российскую Федерацию Республики Крым и образования в составе Российской Федерации новых субъектов - Республики Крым и города федерального значения Севастополя)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string НаимСпОбрЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимСпОбрЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимСпОбрЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СпОбрЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СпОбрЮЛLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДата)
            /// </para>
            /// </summary>
            public partial class СвРегОргLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвРегОргLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвРегОргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвРегОргLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата)
                /// </para>
                /// </summary>
                public СвРегОргLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДата)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Код органа по справочнику СОНО
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string КодНО
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("КодНО", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("КодНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Наименование регистрирующего (налогового) органа
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НаимНО
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимНО", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Адрес регистрирующего органа
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string АдрРО
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("АдрРО", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("АдрРО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвРегОрг", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвРегОргLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвСтатусLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвСтатусLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвСтатусLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвСтатусLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвСтатус", "")),
                        new NamedContentModelEntity(XName.Get("СвРешИсклЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвСтатусLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о правоспособности (статусе) юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвСтатусLocalType1 СвСтатус
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвСтатус", ""));
                        return ((СвСтатусLocalType1)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвСтатус", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о решении о предстоящем исключении недействующего ЮЛ из ЕГРЮЛ и его публикации 
                /// </para>
                /// <para>
                /// Формируется только в случае, если передается код статуса ЮЛ по справочнику СЮЛСТ=105
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвРешИсклЮЛLocalType СвРешИсклЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвРешИсклЮЛ", ""));
                        return ((СвРешИсклЮЛLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвРешИсклЮЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, СвРешИсклЮЛ?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвСтатус", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвСтатусLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвСтатус", ""), typeof(СвСтатусLocalType1));
                    localElementDictionary.Add(XName.Get("СвРешИсклЮЛ", ""), typeof(СвРешИсклЮЛLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвСтатусLocalType1 : XTypedElement, IXMetaData
                {

                    public static explicit operator СвСтатусLocalType1(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвСтатусLocalType1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвСтатусLocalType1()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код статуса юридического лица по справочнику СЮЛСТ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодСтатусЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодСтатусЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодСтатусЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование статуса юридического лица по справочнику СЮЛСТ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимСтатусЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимСтатусЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимСтатусЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвСтатус", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвСтатусLocalType1>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                public partial class СвРешИсклЮЛLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвРешИсклЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвРешИсклЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвРешИсклЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Дата решения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаРеш
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаРеш", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаРеш", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Номер решения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НомерРеш
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НомерРеш", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НомерРеш", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата публикации решения 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаПубликации
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаПубликации", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаПубликации", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Номер журнала, в котором опубликовано решение
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string НомерЖурнала
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НомерЖурнала", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НомерЖурнала", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвРешИсклЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвРешИсклЮЛLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СпПрекрЮЛ, СвРегОрг, ГРНДата)
            /// </para>
            /// </summary>
            public partial class СвПрекрЮЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвПрекрЮЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвПрекрЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвПрекрЮЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СпПрекрЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("СвРегОрг", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СпПрекрЮЛ, СвРегОрг, ГРНДата)
                /// </para>
                /// </summary>
                public СвПрекрЮЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Способ прекращения юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СпПрекрЮЛ, СвРегОрг, ГРНДата)
                /// </para>
                /// </summary>
                public СпПрекрЮЛLocalType СпПрекрЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СпПрекрЮЛ", ""));
                        return ((СпПрекрЮЛLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СпПрекрЮЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о регистрирующем (налоговом) органе, внесшем запись о прекращении юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СпПрекрЮЛ, СвРегОрг, ГРНДата)
                /// </para>
                /// </summary>
                public СвРегОргТип СвРегОрг
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвРегОрг", ""));
                        return ((СвРегОргТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвРегОрг", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СпПрекрЮЛ, СвРегОрг, ГРНДата)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата прекращения юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаПрекрЮЛ
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаПрекрЮЛ", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаПрекрЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвПрекрЮЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвПрекрЮЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СпПрекрЮЛ", ""), typeof(СпПрекрЮЛLocalType));
                    localElementDictionary.Add(XName.Get("СвРегОрг", ""), typeof(СвРегОргТип));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СпПрекрЮЛLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СпПрекрЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СпПрекрЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СпПрекрЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код способа прекращения по справочнику СЮЛПД
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодСпПрекрЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодСпПрекрЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодСпПрекрЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование способа прекращения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимСпПрекрЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимСпПрекрЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимСпПрекрЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СпПрекрЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СпПрекрЮЛLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвУчетНОLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвУчетНОLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвУчетНОLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвУчетНОLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвНО", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвУчетНОLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о налоговом органе, в котором юридическое лицо состоит (для ЮЛ, прекративших деятельность - состояло) на учете
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвНОТип СвНО
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвНО", ""));
                        return ((СвНОТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвНО", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ИНН юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string ИНН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// КПП юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string КПП
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("КПП", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("КПП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата постановки на учет в налоговом органе
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаПостУч
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаПостУч", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаПостУч", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвУчетНО", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвУчетНОLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвНО", ""), typeof(СвНОТип));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвОргПФ, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвРегПФLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвРегПФLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвРегПФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвРегПФLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвОргПФ", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвОргПФ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвРегПФLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвОргПФ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвОргПФLocalType СвОргПФ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвОргПФ", ""));
                        return ((СвОргПФLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвОргПФ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвОргПФ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвОргПФ, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Регистрационный номер в территориальном органе Пенсионного фонда Российской Федерации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string РегНомПФ
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("РегНомПФ", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("РегНомПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата регистрации юридического лица в качестве страхователя
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаРег
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаРег", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаРег", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвРегПФ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвРегПФLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвОргПФ", ""), typeof(СвОргПФLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвОргПФLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвОргПФLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвОргПФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвОргПФLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код по справочнику СТОПФ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодПФ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодПФ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимПФ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимПФ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвОргПФ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвОргПФLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвОргФСС, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвРегФССLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвРегФССLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвРегФССLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвРегФССLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвОргФСС", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвОргФСС, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвРегФССLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения об  исполнительном органе Фонда социального страхования Российской Федерации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвОргФСС, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвОргФССLocalType СвОргФСС
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвОргФСС", ""));
                        return ((СвОргФССLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвОргФСС", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвОргФСС, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвОргФСС, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Регистрационный номер в исполнительном органе Фонда социального страхования Российской Федерации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string РегНомФСС
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("РегНомФСС", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("РегНомФСС", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата регистрации юридического лица в качестве страхователя
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаРег
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаРег", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаРег", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвРегФСС", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвРегФССLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвОргФСС", ""), typeof(СвОргФССLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвОргФССLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвОргФССLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвОргФССLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвОргФССLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код по справочнику СТОФСС
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодФСС
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодФСС", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодФСС", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимФСС
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимФСС", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимФСС", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвОргФСС", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвОргФССLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
            /// </para>
            /// </summary>
            public partial class СвУстКапLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвУстКапLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвУстКапLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвУстКапLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("ДоляРубля", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")),
                        new NamedContentModelEntity(XName.Get("СведУмУК", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
                /// </para>
                /// </summary>
                public СвУстКапLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Доля рубля в капитале
                /// </para>
                /// <para>
                /// Указывается в случае, если сумма уставного капитала включает в себя часть рубля в виде простой дроби
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
                /// </para>
                /// </summary>
                public ДробьТип ДоляРубля
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ДоляРубля", ""));
                        return ((ДробьТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ДоляРубля", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала
                /// </para>
                /// <para>
                /// Формируется только в случае, если хозяйственным обществом принято решение об уменьшении уставного капитала и оно не отменено и уставный капитал еще не уменьшен
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ДоляРубля?, ГРНДата, ГРНДатаИспр?, СведУмУК?)
                /// </para>
                /// </summary>
                public СведУмУКLocalType СведУмУК
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СведУмУК", ""));
                        return ((СведУмУКLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СведУмУК", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Наименование вида капитала
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НаимВидКап
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимВидКап", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимВидКап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Размер в рублях
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public decimal СумКап
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("СумКап", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("СумКап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвУстКап", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвУстКапLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ДоляРубля", ""), typeof(ДробьТип));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("СведУмУК", ""), typeof(СведУмУКLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СведУмУКLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СведУмУКLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СведУмУКLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СведУмУКLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СведУмУКLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Величина, на которую уменьшается уставный капитал (в рублях)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public decimal ВелУмУК
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ВелУмУК", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ВелУмУК", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата принятия решения об уменьшении уставного капитала
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаРеш
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаРеш", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаРеш", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СведУмУК", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СведУмУКLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
            /// </para>
            /// </summary>
            public partial class СвУпрОргLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвУпрОргLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвУпрОргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвУпрОргLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                        new NamedContentModelEntity(XName.Get("НаимИННЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("СвРегИн", "")),
                        new NamedContentModelEntity(XName.Get("СвПредЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("СвАдрРФ", "")),
                        new NamedContentModelEntity(XName.Get("СвНомТел", "")),
                        new NamedContentModelEntity(XName.Get("ПредИнЮЛ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public СвУпрОргLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаПерв
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ - управляющей организации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public СвЮЛЕГРЮЛТип НаимИННЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("НаимИННЮЛ", ""));
                        return ((СвЮЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("НаимИННЮЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о регистрации в стране происхождения
                /// </para>
                /// <para>
                /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении управляющей организации - иностранном ЮЛ
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public СвРегИнЮЛЕГРЮЛТип СвРегИн
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвРегИн", ""));
                        return ((СвРегИнЮЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвРегИн", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
                /// </para>
                /// <para>
                /// Формируется только при наличии в ЕГРЮЛ сведений о наименовании представительства или филиала, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public СвПредЮЛLocalType СвПредЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвПредЮЛ", ""));
                        return ((СвПредЮЛLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвПредЮЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об адресе управляющей организации в Российской Федерации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public АдрРФЕГРЮЛТип СвАдрРФ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвАдрРФ", ""));
                        return ((АдрРФЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвАдрРФ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о контактном телефоне
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public СвНомТелТип СвНомТел
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвНомТел", ""));
                        return ((СвНомТелТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвНомТел", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о лице, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвПредЮЛ?, СвАдрРФ?, СвНомТел?, ПредИнЮЛ?)
                /// </para>
                /// </summary>
                public ПредИнЮЛLocalType ПредИнЮЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ПредИнЮЛ", ""));
                        return ((ПредИнЮЛLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ПредИнЮЛ", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвУпрОрг", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвУпрОргLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("НаимИННЮЛ", ""), typeof(СвЮЛЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СвРегИн", ""), typeof(СвРегИнЮЛЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СвПредЮЛ", ""), typeof(СвПредЮЛLocalType));
                    localElementDictionary.Add(XName.Get("СвАдрРФ", ""), typeof(АдрРФЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СвНомТел", ""), typeof(СвНомТелТип));
                    localElementDictionary.Add(XName.Get("ПредИнЮЛ", ""), typeof(ПредИнЮЛLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СвПредЮЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвПредЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвПредЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвПредЮЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СвПредЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Полное наименование представительства или филиала в Российской Федерации, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимПредЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимПредЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимПредЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвПредЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвПредЮЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                /// </para>
                /// </summary>
                public partial class ПредИнЮЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ПредИнЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<ПредИнЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static ПредИнЮЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвНомТел", "")),
                            new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                            new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                            new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                            new NamedContentModelEntity(XName.Get("АдрМЖИн", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public ПредИнЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о ФИО и (при наличии) ИНН ФЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public СвФЛЕГРЮЛТип СвФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                            return ((СвФЛЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о контактном телефоне ФЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public СвНомТелТип СвНомТел
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвНомТел", ""));
                            return ((СвНомТелТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвНомТел", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о рождении ФЛ
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public СвРождЕГРЮЛТип СвРождФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                            return ((СвРождЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвРождФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о документе, удостоверяющем личность
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public УдЛичнЕГРЮЛТип УдЛичнФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                            return ((УдЛичнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об адресе места жительства в Российской Федерации
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public АдрРФЕГРЮЛТип АдресМЖРФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                            return ((АдрРФЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об адресе места жительства за пределами территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public АдрИнЕГРЮЛТип АдрМЖИн
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                            return ((АдрИнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМЖИн", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ПредИнЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ПредИнЮЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвНомТел", ""), typeof(СвНомТелТип));
                        localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
            /// </para>
            /// </summary>
            public partial class СведДолжнФЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвДисквLocalType> СвДисквField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СведДолжнФЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СведДолжнФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СведДолжнФЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                        new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                        new NamedContentModelEntity(XName.Get("СвДолжн", "")),
                        new NamedContentModelEntity(XName.Get("СвНомТел", "")),
                        new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                        new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                        new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                        new NamedContentModelEntity(XName.Get("АдрМЖИн", "")),
                        new NamedContentModelEntity(XName.Get("СвДискв", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public СведДолжнФЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаПерв
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о ФИО и (при наличии) ИНН ФЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public СвФЛЕГРЮЛТип СвФЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                        return ((СвФЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвФЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о должности ФЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public СвДолжнLocalType СвДолжн
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвДолжн", ""));
                        return ((СвДолжнLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвДолжн", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о контактном телефоне ФЛ
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public СвНомТелТип СвНомТел
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвНомТел", ""));
                        return ((СвНомТелТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвНомТел", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о рождении ФЛ
                /// </para>
                /// <para>
                /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public СвРождЕГРЮЛТип СвРождФЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                        return ((СвРождЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвРождФЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о документе, удостоверяющем личность
                /// </para>
                /// <para>
                /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public УдЛичнЕГРЮЛТип УдЛичнФЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                        return ((УдЛичнЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об адресе места жительства в Российской Федерации
                /// </para>
                /// <para>
                /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public АдрРФЕГРЮЛТип АдресМЖРФ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                        return ((АдрРФЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об адресе места жительства за пределами территории Российской Федерации
                /// </para>
                /// <para>
                /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public АдрИнЕГРЮЛТип АдрМЖИн
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                        return ((АдрИнЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("АдрМЖИн", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о дисквалификации
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвДолжн, СвНомТел?, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвДискв*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СведДолжнФЛLocalType.СвДисквLocalType> СвДискв
                {
                    get
                    {
                        if ((this.СвДисквField == null))
                        {
                            this.СвДисквField = new XTypedList<СвДисквLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвДискв", ""));
                        }
                        return this.СвДисквField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвДисквField = null;
                        }
                        else
                        {
                            if ((this.СвДисквField == null))
                            {
                                this.СвДисквField = XTypedList<СвДисквLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвДискв", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвДисквLocalType>(this.СвДисквField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СведДолжнФЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СведДолжнФЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СвДолжн", ""), typeof(СвДолжнLocalType));
                    localElementDictionary.Add(XName.Get("СвНомТел", ""), typeof(СвНомТелТип));
                    localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                    localElementDictionary.Add(XName.Get("СвДискв", ""), typeof(СвДисквLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СвДолжнLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвДолжнLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвДолжнLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвДолжнLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СвДолжнLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Основной государственный регистрационный номер индивидуального предпринимателя - управляющего юридическим лицом
                    /// </para>
                    /// <para>
                    /// Формируется только для управляющего - индивидуального предпринимателя при наличии этих сведений в ЕГРЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string ОГРНИП
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ОГРНИП", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ОГРНИП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Вид должностного лица по справочнику СКФЛЮЛ (указывается код по справочнику)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ВидДолжн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ВидДолжн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ВидДолжн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование вида должностного лица по справочнику СКФЛЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимВидДолжн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимВидДолжн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимВидДолжн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование должности
                    /// </para>
                    /// <para>
                    /// При отсутствии наименования должности указывается наименование вида должностного лица по справочнику СКФЛЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимДолжн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимДолжн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимДолжн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвДолжн", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвДолжнLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СвДисквLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвДисквLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвДисквLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвДисквLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СвДисквLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата начала дисквалификации
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаНачДискв
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаНачДискв", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаНачДискв", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата окончания дисквалификации
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаОкончДискв
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаОкончДискв", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаОкончДискв", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата вынесения  судебным органом постановления о дисквалификации 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаРеш
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаРеш", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаРеш", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвДискв", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвДисквLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
            /// </para>
            /// </summary>
            public partial class СвУчредитLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<УчрЮЛРосLocalType> УчрЮЛРосField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<УчрЮЛИнLocalType> УчрЮЛИнField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<УчрФЛLocalType> УчрФЛField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<УчрРФСубМОLocalType> УчрРФСубМОField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<УчрПИФLocalType> УчрПИФField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвУчредитLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвУчредитLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвУчредитLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("УчрЮЛРос", "")),
                        new NamedContentModelEntity(XName.Get("УчрЮЛИн", "")),
                        new NamedContentModelEntity(XName.Get("УчрФЛ", "")),
                        new NamedContentModelEntity(XName.Get("УчрРФСубМО", "")),
                        new NamedContentModelEntity(XName.Get("УчрПИФ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public СвУчредитLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения об учредителе (участнике) - российском юридическом лице
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрЮЛРосLocalType> УчрЮЛРос
                {
                    get
                    {
                        if ((this.УчрЮЛРосField == null))
                        {
                            this.УчрЮЛРосField = new XTypedList<УчрЮЛРосLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("УчрЮЛРос", ""));
                        }
                        return this.УчрЮЛРосField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.УчрЮЛРосField = null;
                        }
                        else
                        {
                            if ((this.УчрЮЛРосField == null))
                            {
                                this.УчрЮЛРосField = XTypedList<УчрЮЛРосLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("УчрЮЛРос", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<УчрЮЛРосLocalType>(this.УчрЮЛРосField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об учредителе (участнике) - иностранном юридическом лице
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрЮЛИнLocalType> УчрЮЛИн
                {
                    get
                    {
                        if ((this.УчрЮЛИнField == null))
                        {
                            this.УчрЮЛИнField = new XTypedList<УчрЮЛИнLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("УчрЮЛИн", ""));
                        }
                        return this.УчрЮЛИнField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.УчрЮЛИнField = null;
                        }
                        else
                        {
                            if ((this.УчрЮЛИнField == null))
                            {
                                this.УчрЮЛИнField = XTypedList<УчрЮЛИнLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("УчрЮЛИн", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<УчрЮЛИнLocalType>(this.УчрЮЛИнField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об учредителе (участнике) - физическом лице
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрФЛLocalType> УчрФЛ
                {
                    get
                    {
                        if ((this.УчрФЛField == null))
                        {
                            this.УчрФЛField = new XTypedList<УчрФЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("УчрФЛ", ""));
                        }
                        return this.УчрФЛField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.УчрФЛField = null;
                        }
                        else
                        {
                            if ((this.УчрФЛField == null))
                            {
                                this.УчрФЛField = XTypedList<УчрФЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("УчрФЛ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<УчрФЛLocalType>(this.УчрФЛField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрРФСубМОLocalType> УчрРФСубМО
                {
                    get
                    {
                        if ((this.УчрРФСубМОField == null))
                        {
                            this.УчрРФСубМОField = new XTypedList<УчрРФСубМОLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("УчрРФСубМО", ""));
                        }
                        return this.УчрРФСубМОField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.УчрРФСубМОField = null;
                        }
                        else
                        {
                            if ((this.УчрРФСубМОField == null))
                            {
                                this.УчрРФСубМОField = XTypedList<УчрРФСубМОLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("УчрРФСубМО", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<УчрРФСубМОLocalType>(this.УчрРФСубМОField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале 
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (УчрЮЛРос*, УчрЮЛИн*, УчрФЛ*, УчрРФСубМО*, УчрПИФ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрПИФLocalType> УчрПИФ
                {
                    get
                    {
                        if ((this.УчрПИФField == null))
                        {
                            this.УчрПИФField = new XTypedList<УчрПИФLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("УчрПИФ", ""));
                        }
                        return this.УчрПИФField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.УчрПИФField = null;
                        }
                        else
                        {
                            if ((this.УчрПИФField == null))
                            {
                                this.УчрПИФField = XTypedList<УчрПИФLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("УчрПИФ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<УчрПИФLocalType>(this.УчрПИФField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвУчредит", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвУчредитLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("УчрЮЛРос", ""), typeof(УчрЮЛРосLocalType));
                    localElementDictionary.Add(XName.Get("УчрЮЛИн", ""), typeof(УчрЮЛИнLocalType));
                    localElementDictionary.Add(XName.Get("УчрФЛ", ""), typeof(УчрФЛLocalType));
                    localElementDictionary.Add(XName.Get("УчрРФСубМО", ""), typeof(УчрРФСубМОLocalType));
                    localElementDictionary.Add(XName.Get("УчрПИФ", ""), typeof(УчрПИФLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                /// </para>
                /// </summary>
                public partial class УчрЮЛРосLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОбремТип> СвОбремField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator УчрЮЛРосLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<УчрЮЛРосLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static УчрЮЛРосLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("НаимИННЮЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвРегСтарые", "")),
                            new NamedContentModelEntity(XName.Get("ДоляУстКап", "")),
                            new NamedContentModelEntity(XName.Get("СвОбрем", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public УчрЮЛРосLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвЮЛЕГРЮЛТип НаимИННЮЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("НаимИННЮЛ", ""));
                            return ((СвЮЛЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("НаимИННЮЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о регистрации учредителя (участника) до 01.07.2002 г
                    /// </para>
                    /// <para>
                    /// Формируется только при отсутствии у ЮЛ ОГРН и наличии сведений о регистрации до 01.07.2002 г
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвРегСтарыеLocalType СвРегСтарые
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвРегСтарые", ""));
                            return ((СвРегСтарыеLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвРегСтарые", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доле учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ДоляУстКапЕГРЮЛТип ДоляУстКап
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДоляУстКап", ""));
                            return ((ДоляУстКапЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ДоляУстКап", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об обременении доли участника
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегСтарые?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<СвОбремТип> СвОбрем
                    {
                        get
                        {
                            if ((this.СвОбремField == null))
                            {
                                this.СвОбремField = new XTypedList<СвОбремТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОбрем", ""));
                            }
                            return this.СвОбремField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОбремField = null;
                            }
                            else
                            {
                                if ((this.СвОбремField == null))
                                {
                                    this.СвОбремField = XTypedList<СвОбремТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОбрем", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОбремТип>(this.СвОбремField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("УчрЮЛРос", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<УчрЮЛРосLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("НаимИННЮЛ", ""), typeof(СвЮЛЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвРегСтарые", ""), typeof(СвРегСтарыеLocalType));
                        localElementDictionary.Add(XName.Get("ДоляУстКап", ""), typeof(ДоляУстКапЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвОбрем", ""), typeof(СвОбремТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public partial class СвРегСтарыеLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвРегСтарыеLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвРегСтарыеLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвРегСтарыеLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public СвРегСтарыеLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДата
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДата", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                        /// </para>
                        /// <para>
                        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаИспр
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Регистрационный номер, присвоенный юридическому лицу до 1 июля 2002 года
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string РегНом
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("РегНом", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("РегНом", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Дата регистрации юридического лица до 1 июля 2002 года
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public System.Nullable<System.DateTime> ДатаРег
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ДатаРег", ""));
                                if ((x == null))
                                {
                                    return null;
                                }
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ДатаРег", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Наименование органа, зарегистрировавшего юридическое лицо до 1 июля 2002 года
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string НаимРО
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимРО", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимРО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвРегСтарые", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвРегСтарыеLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                /// </para>
                /// </summary>
                public partial class УчрЮЛИнLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОбремТип> СвОбремField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator УчрЮЛИнLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<УчрЮЛИнLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static УчрЮЛИнLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("НаимИННЮЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвРегИн", "")),
                            new NamedContentModelEntity(XName.Get("ДоляУстКап", "")),
                            new NamedContentModelEntity(XName.Get("СвОбрем", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public УчрЮЛИнLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о наименовании и (при наличии) ИНН ЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвЮЛЕГРЮЛТип НаимИННЮЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("НаимИННЮЛ", ""));
                            return ((СвЮЛЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("НаимИННЮЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о регистрации в стране происхождения
                    /// </para>
                    /// <para>
                    /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении управляющей организации - иностранного ЮЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвРегИнЮЛЕГРЮЛТип СвРегИн
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвРегИн", ""));
                            return ((СвРегИнЮЛЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвРегИн", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доле учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ДоляУстКапЕГРЮЛТип ДоляУстКап
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДоляУстКап", ""));
                            return ((ДоляУстКапЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ДоляУстКап", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об обременении доли участника
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<СвОбремТип> СвОбрем
                    {
                        get
                        {
                            if ((this.СвОбремField == null))
                            {
                                this.СвОбремField = new XTypedList<СвОбремТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОбрем", ""));
                            }
                            return this.СвОбремField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОбремField = null;
                            }
                            else
                            {
                                if ((this.СвОбремField == null))
                                {
                                    this.СвОбремField = XTypedList<СвОбремТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОбрем", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОбремТип>(this.СвОбремField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("УчрЮЛИн", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<УчрЮЛИнLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("НаимИННЮЛ", ""), typeof(СвЮЛЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвРегИн", ""), typeof(СвРегИнЮЛЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("ДоляУстКап", ""), typeof(ДоляУстКапЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвОбрем", ""), typeof(СвОбремТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                /// </para>
                /// </summary>
                public partial class УчрФЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОбремТип> СвОбремField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator УчрФЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<УчрФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static УчрФЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                            new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                            new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                            new NamedContentModelEntity(XName.Get("АдрМЖИн", "")),
                            new NamedContentModelEntity(XName.Get("ДоляУстКап", "")),
                            new NamedContentModelEntity(XName.Get("СвОбрем", "")),
                            new NamedContentModelEntity(XName.Get("СвДовУпрЮЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвДовУпрФЛ", "")),
                            new NamedContentModelEntity(XName.Get("ЛицоУпрНасл", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public УчрФЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о ФИО и (при наличии) ИНН ФЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public СвФЛЕГРЮЛТип СвФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                            return ((СвФЛЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о рождении ФЛ
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public СвРождЕГРЮЛТип СвРождФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                            return ((СвРождЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвРождФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о документе, удостоверяющем личность
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public УдЛичнЕГРЮЛТип УдЛичнФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                            return ((УдЛичнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об адресе места жительства в Российской Федерации
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public АдрРФЕГРЮЛТип АдресМЖРФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                            return ((АдрРФЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об адресе места жительства за пределами территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public АдрИнЕГРЮЛТип АдрМЖИн
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                            return ((АдрИнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМЖИн", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доле учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public ДоляУстКапЕГРЮЛТип ДоляУстКап
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДоляУстКап", ""));
                            return ((ДоляУстКапЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ДоляУстКап", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об обременении доли участника
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public IList<СвОбремТип> СвОбрем
                    {
                        get
                        {
                            if ((this.СвОбремField == null))
                            {
                                this.СвОбремField = new XTypedList<СвОбремТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОбрем", ""));
                            }
                            return this.СвОбремField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОбремField = null;
                            }
                            else
                            {
                                if ((this.СвОбремField == null))
                                {
                                    this.СвОбремField = XTypedList<СвОбремТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОбрем", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОбремТип>(this.СвОбремField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доверительном управляющем - ЮЛ 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public СвДовУпрЮЛLocalType СвДовУпрЮЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвДовУпрЮЛ", ""));
                            return ((СвДовУпрЮЛLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвДовУпрЮЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доверительном управляющем - ФЛ
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public СвДовУпрФЛLocalType СвДовУпрФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвДовУпрФЛ", ""));
                            return ((СвДовУпрФЛLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвДовУпрФЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о лице, осуществляющем управление долей, переходящей в порядке наследования
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, ДоляУстКап?, СвОбрем*, СвДовУпрЮЛ?, СвДовУпрФЛ?, ЛицоУпрНасл?)
                    /// </para>
                    /// </summary>
                    public ЛицоУпрНаслLocalType ЛицоУпрНасл
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ЛицоУпрНасл", ""));
                            return ((ЛицоУпрНаслLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ЛицоУпрНасл", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("УчрФЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<УчрФЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("ДоляУстКап", ""), typeof(ДоляУстКапЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвОбрем", ""), typeof(СвОбремТип));
                        localElementDictionary.Add(XName.Get("СвДовУпрЮЛ", ""), typeof(СвДовУпрЮЛLocalType));
                        localElementDictionary.Add(XName.Get("СвДовУпрФЛ", ""), typeof(СвДовУпрФЛLocalType));
                        localElementDictionary.Add(XName.Get("ЛицоУпрНасл", ""), typeof(ЛицоУпрНаслLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННДовУпр)
                    /// </para>
                    /// </summary>
                    public partial class СвДовУпрЮЛLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвДовУпрЮЛLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвДовУпрЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвДовУпрЮЛLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(
                                new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                                new NamedContentModelEntity(XName.Get("НаимИННДовУпр", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННДовУпр)
                        /// </para>
                        /// </summary>
                        public СвДовУпрЮЛLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННДовУпр)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННДовУпр)
                        /// </para>
                        /// </summary>
                        public СвЮЛЕГРЮЛТип НаимИННДовУпр
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("НаимИННДовУпр", ""));
                                return ((СвЮЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("НаимИННДовУпр", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвДовУпрЮЛ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвДовУпрЮЛLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("НаимИННДовУпр", ""), typeof(СвЮЛЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public partial class СвДовУпрФЛLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвДовУпрФЛLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвДовУпрФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвДовУпрФЛLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(
                                new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                                new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                                new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                                new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                                new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                                new NamedContentModelEntity(XName.Get("АдрМЖИн", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвДовУпрФЛLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о ФИО и (при наличии) ИНН ФЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФЛЕГРЮЛТип СвФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                                return ((СвФЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о рождении ФЛ
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвРождЕГРЮЛТип СвРождФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                                return ((СвРождЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвРождФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о документе, удостоверяющем личность
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public УдЛичнЕГРЮЛТип УдЛичнФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                                return ((УдЛичнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства в Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрРФЕГРЮЛТип АдресМЖРФ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                                return ((АдрРФЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства за пределами территории Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрИнЕГРЮЛТип АдрМЖИн
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                                return ((АдрИнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдрМЖИн", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвДовУпрФЛ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвДовУпрФЛLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public partial class ЛицоУпрНаслLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator ЛицоУпрНаслLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<ЛицоУпрНаслLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static ЛицоУпрНаслLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(
                                new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                                new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                                new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                                new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                                new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                                new NamedContentModelEntity(XName.Get("АдрМЖИн", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public ЛицоУпрНаслLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о ФИО и (при наличии) ИНН ФЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФЛЕГРЮЛТип СвФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                                return ((СвФЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о рождении ФЛ
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвРождЕГРЮЛТип СвРождФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                                return ((СвРождЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвРождФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о документе, удостоверяющем личность
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public УдЛичнЕГРЮЛТип УдЛичнФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                                return ((УдЛичнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства в Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрРФЕГРЮЛТип АдресМЖРФ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                                return ((АдрРФЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства за пределами территории Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрИнЕГРЮЛТип АдрМЖИн
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                                return ((АдрИнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдрМЖИн", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Дата открытия наследства (дата смерти участника)
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public System.DateTime ДатаОткрНасл
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ДатаОткрНасл", ""));
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ДатаОткрНасл", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("ЛицоУпрНасл", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ЛицоУпрНаслLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                /// </para>
                /// </summary>
                public partial class УчрРФСубМОLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОргОсущПрLocalType> СвОргОсущПрField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвФЛОсущПрLocalType> СвФЛОсущПрField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОбремТип> СвОбремField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator УчрРФСубМОLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<УчрРФСубМОLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static УчрРФСубМОLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("ВидНаимУчр", "")),
                            new NamedContentModelEntity(XName.Get("ДоляУстКап", "")),
                            new NamedContentModelEntity(XName.Get("СвОргОсущПр", "")),
                            new NamedContentModelEntity(XName.Get("СвФЛОсущПр", "")),
                            new NamedContentModelEntity(XName.Get("СвОбрем", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public УчрРФСубМОLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о виде учредителя (участника) и (при необходимости) наименовании муниципального образования и региона
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ВидНаимУчрLocalType ВидНаимУчр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ВидНаимУчр", ""));
                            return ((ВидНаимУчрLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ВидНаимУчр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доле учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ДоляУстКапЕГРЮЛТип ДоляУстКап
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДоляУстКап", ""));
                            return ((ДоляУстКапЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ДоляУстКап", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрРФСубМОLocalType.СвОргОсущПрLocalType> СвОргОсущПр
                    {
                        get
                        {
                            if ((this.СвОргОсущПрField == null))
                            {
                                this.СвОргОсущПрField = new XTypedList<СвОргОсущПрLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОргОсущПр", ""));
                            }
                            return this.СвОргОсущПрField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОргОсущПрField = null;
                            }
                            else
                            {
                                if ((this.СвОргОсущПрField == null))
                                {
                                    this.СвОргОсущПрField = XTypedList<СвОргОсущПрLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОргОсущПр", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОргОсущПрLocalType>(this.СвОргОсущПрField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о физическом лице, осуществляющем права учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<EGRUL.СвЮЛLocalType.СвУчредитLocalType.УчрРФСубМОLocalType.СвФЛОсущПрLocalType> СвФЛОсущПр
                    {
                        get
                        {
                            if ((this.СвФЛОсущПрField == null))
                            {
                                this.СвФЛОсущПрField = new XTypedList<СвФЛОсущПрLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвФЛОсущПр", ""));
                            }
                            return this.СвФЛОсущПрField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвФЛОсущПрField = null;
                            }
                            else
                            {
                                if ((this.СвФЛОсущПрField == null))
                                {
                                    this.СвФЛОсущПрField = XTypedList<СвФЛОсущПрLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвФЛОсущПр", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвФЛОсущПрLocalType>(this.СвФЛОсущПрField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об обременении доли участника
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, ВидНаимУчр, ДоляУстКап?, СвОргОсущПр*, СвФЛОсущПр*, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<СвОбремТип> СвОбрем
                    {
                        get
                        {
                            if ((this.СвОбремField == null))
                            {
                                this.СвОбремField = new XTypedList<СвОбремТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОбрем", ""));
                            }
                            return this.СвОбремField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОбремField = null;
                            }
                            else
                            {
                                if ((this.СвОбремField == null))
                                {
                                    this.СвОбремField = XTypedList<СвОбремТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОбрем", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОбремТип>(this.СвОбремField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("УчрРФСубМО", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<УчрРФСубМОLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ВидНаимУчр", ""), typeof(ВидНаимУчрLocalType));
                        localElementDictionary.Add(XName.Get("ДоляУстКап", ""), typeof(ДоляУстКапЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвОргОсущПр", ""), typeof(СвОргОсущПрLocalType));
                        localElementDictionary.Add(XName.Get("СвФЛОсущПр", ""), typeof(СвФЛОсущПрLocalType));
                        localElementDictionary.Add(XName.Get("СвОбрем", ""), typeof(СвОбремТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    public partial class ВидНаимУчрLocalType : XTypedElement, IXMetaData
                    {

                        public static explicit operator ВидНаимУчрLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<ВидНаимУчрLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        public ВидНаимУчрLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Код вида учредителя
                        /// </para>
                        /// <para>
                        /// , где: 
                        ///														1 - если учредителем (участником) является  Российская Федерация;
                        ///2 - если учредителем (участником) является субъект Российской организации;
                        ///3 - если учредителем (участником) является муниципальное образование
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string КодУчрРФСубМО
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("КодУчрРФСубМО", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("КодУчрРФСубМО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Наименование муниципального образования
                        /// </para>
                        /// <para>
                        /// Является обязательным, если значение атрибута КодУчрРФСубМО=3
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string НаимМО
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимМО", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимМО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Код субъекта Российской Федерации, который является учредителем (участником) юридического лица или на территории которого находится муниципальное образование, которое является учредителем (участником) юридического лица
                        /// </para>
                        /// <para>
                        /// Является обязательным, если значение атрибута КодУчрРФСубМО=2 или 3
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string КодРегион
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("КодРегион", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("КодРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Наименование субъекта Российской Федерации
                        /// </para>
                        /// <para>
                        /// Является обязательным, если значение атрибута КодУчрРФСубМО=2 или 3
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string НаимРегион
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимРегион", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("ВидНаимУчр", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ВидНаимУчрLocalType>(this);
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return ContentModelEntity.Default;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ)
                    /// </para>
                    /// </summary>
                    public partial class СвОргОсущПрLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвОргОсущПрLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвОргОсущПрLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвОргОсущПрLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")), new NamedContentModelEntity(XName.Get("НаимИННЮЛ", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ)
                        /// </para>
                        /// </summary>
                        public СвОргОсущПрLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о наименовании и (при наличии) ОГРН и ИНН органа государственной власти, органа местного самоуправления или ЮЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ)
                        /// </para>
                        /// </summary>
                        public СвЮЛЕГРЮЛТип НаимИННЮЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("НаимИННЮЛ", ""));
                                return ((СвЮЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("НаимИННЮЛ", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвОргОсущПр", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвОргОсущПрLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("НаимИННЮЛ", ""), typeof(СвЮЛЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public partial class СвФЛОсущПрLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвФЛОсущПрLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвФЛОсущПрLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвФЛОсущПрLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(
                                new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                                new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                                new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                                new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                                new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                                new NamedContentModelEntity(XName.Get("АдрМЖИн", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФЛОсущПрLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о ФИО и (при наличии) ИНН ФЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФЛЕГРЮЛТип СвФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                                return ((СвФЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о рождении ФЛ
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвРождЕГРЮЛТип СвРождФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                                return ((СвРождЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвРождФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о документе, удостоверяющем личность
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public УдЛичнЕГРЮЛТип УдЛичнФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                                return ((УдЛичнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства в Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрРФЕГРЮЛТип АдресМЖРФ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                                return ((АдрРФЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства за пределами территории Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрИнЕГРЮЛТип АдрМЖИн
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                                return ((АдрИнЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдрМЖИн", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвФЛОсущПр", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвФЛОсущПрLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                            localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                /// </para>
                /// </summary>
                public partial class УчрПИФLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<СвОбремТип> СвОбремField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator УчрПИФLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<УчрПИФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static УчрПИФLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("СвНаимПИФ", "")),
                            new NamedContentModelEntity(XName.Get("СвУпрКомпПИФ", "")),
                            new NamedContentModelEntity(XName.Get("ДоляУстКап", "")),
                            new NamedContentModelEntity(XName.Get("СвОбрем", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public УчрПИФLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвНаимПИФLocalType СвНаимПИФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвНаимПИФ", ""));
                            return ((СвНаимПИФLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвНаимПИФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об управляющей компании паевого инвестиционного фонда
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public СвУпрКомпПИФLocalType СвУпрКомпПИФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвУпрКомпПИФ", ""));
                            return ((СвУпрКомпПИФLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвУпрКомпПИФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о доле учредителя (участника)
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public ДоляУстКапЕГРЮЛТип ДоляУстКап
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДоляУстКап", ""));
                            return ((ДоляУстКапЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ДоляУстКап", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об обременении доли участника
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаимПИФ, СвУпрКомпПИФ, ДоляУстКап?, СвОбрем*)
                    /// </para>
                    /// </summary>
                    public IList<СвОбремТип> СвОбрем
                    {
                        get
                        {
                            if ((this.СвОбремField == null))
                            {
                                this.СвОбремField = new XTypedList<СвОбремТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОбрем", ""));
                            }
                            return this.СвОбремField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.СвОбремField = null;
                            }
                            else
                            {
                                if ((this.СвОбремField == null))
                                {
                                    this.СвОбремField = XTypedList<СвОбремТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОбрем", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<СвОбремТип>(this.СвОбремField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("УчрПИФ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<УчрПИФLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("СвНаимПИФ", ""), typeof(СвНаимПИФLocalType));
                        localElementDictionary.Add(XName.Get("СвУпрКомпПИФ", ""), typeof(СвУпрКомпПИФLocalType));
                        localElementDictionary.Add(XName.Get("ДоляУстКап", ""), typeof(ДоляУстКапЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвОбрем", ""), typeof(СвОбремТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public partial class СвНаимПИФLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвНаимПИФLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвНаимПИФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвНаимПИФLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public СвНаимПИФLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДата
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДата", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                        /// </para>
                        /// <para>
                        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаИспр
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Название (индивидуальное обозначение) паевого инвестиционного фонда
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string НаимПИФ
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимПИФ", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимПИФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвНаимПИФ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвНаимПИФLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, УпрКомпПиф)
                    /// </para>
                    /// </summary>
                    public partial class СвУпрКомпПИФLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвУпрКомпПИФLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвУпрКомпПИФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвУпрКомпПИФLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")), new NamedContentModelEntity(XName.Get("УпрКомпПиф", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, УпрКомпПиф)
                        /// </para>
                        /// </summary>
                        public СвУпрКомпПИФLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, УпрКомпПиф)
                        /// </para>
                        /// </summary>
                        public ГРНДатаТип ГРНДатаПерв
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                                return ((ГРНДатаТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Наименование и (при наличии) ОГРН и ИНН управляющей компании паевого инвестиционного фонда
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ГРНДатаПерв?, УпрКомпПиф)
                        /// </para>
                        /// </summary>
                        public СвЮЛЕГРЮЛТип УпрКомпПиф
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("УпрКомпПиф", ""));
                                return ((СвЮЛЕГРЮЛТип)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("УпрКомпПиф", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвУпрКомпПИФ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвУпрКомпПИФLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                            localElementDictionary.Add(XName.Get("УпрКомпПиф", ""), typeof(СвЮЛЕГРЮЛТип));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, ДержРеестрАО)
            /// </para>
            /// </summary>
            public partial class СвДержРеестрАОLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвДержРеестрАОLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвДержРеестрАОLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвДержРеестрАОLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")), new NamedContentModelEntity(XName.Get("ДержРеестрАО", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, ДержРеестрАО)
                /// </para>
                /// </summary>
                public СвДержРеестрАОLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, ДержРеестрАО)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаПерв
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Наименование и (при наличии) ОГРН и ИНН держателе реестра акционеров акционерного общества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, ДержРеестрАО)
                /// </para>
                /// </summary>
                public СвЮЛЕГРЮЛТип ДержРеестрАО
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ДержРеестрАО", ""));
                        return ((СвЮЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ДержРеестрАО", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвДержРеестрАО", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвДержРеестрАОLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ДержРеестрАО", ""), typeof(СвЮЛЕГРЮЛТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвОКВЭДОсн?, СвОКВЭДДоп*)
            /// </para>
            /// </summary>
            public partial class СвОКВЭДLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвОКВЭДТип> СвОКВЭДДопField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвОКВЭДLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвОКВЭДLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвОКВЭДLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвОКВЭДОсн", "")), new NamedContentModelEntity(XName.Get("СвОКВЭДДоп", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвОКВЭДОсн?, СвОКВЭДДоп*)
                /// </para>
                /// </summary>
                public СвОКВЭДLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения об основном виде деятельности
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвОКВЭДОсн?, СвОКВЭДДоп*)
                /// </para>
                /// </summary>
                public СвОКВЭДТип СвОКВЭДОсн
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвОКВЭДОсн", ""));
                        return ((СвОКВЭДТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвОКВЭДОсн", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о дополнительном виде деятельности
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (СвОКВЭДОсн?, СвОКВЭДДоп*)
                /// </para>
                /// </summary>
                public IList<СвОКВЭДТип> СвОКВЭДДоп
                {
                    get
                    {
                        if ((this.СвОКВЭДДопField == null))
                        {
                            this.СвОКВЭДДопField = new XTypedList<СвОКВЭДТип>(this, LinqToXsdTypeManager.Instance, XName.Get("СвОКВЭДДоп", ""));
                        }
                        return this.СвОКВЭДДопField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвОКВЭДДопField = null;
                        }
                        else
                        {
                            if ((this.СвОКВЭДДопField == null))
                            {
                                this.СвОКВЭДДопField = XTypedList<СвОКВЭДТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвОКВЭДДоп", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвОКВЭДТип>(this.СвОКВЭДДопField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвОКВЭД", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвОКВЭДLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвОКВЭДОсн", ""), typeof(СвОКВЭДТип));
                    localElementDictionary.Add(XName.Get("СвОКВЭДДоп", ""), typeof(СвОКВЭДТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
            /// </para>
            /// </summary>
            public partial class СвЛицензияLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> НаимЛицВидДеятField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> МестоДейстЛицField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвЛицензияLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвЛицензияLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвЛицензияLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("НаимЛицВидДеят", "")),
                        new NamedContentModelEntity(XName.Get("МестоДейстЛиц", "")),
                        new NamedContentModelEntity(XName.Get("ЛицОргВыдЛиц", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")),
                        new NamedContentModelEntity(XName.Get("СвПриостЛиц", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public СвЛицензияLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Наименование лицензируемого вида деятельности, на который выдана лицензия
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public IList<string> НаимЛицВидДеят
                {
                    get
                    {
                        if ((this.НаимЛицВидДеятField == null))
                        {
                            this.НаимЛицВидДеятField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("НаимЛицВидДеят", ""));
                        }
                        return this.НаимЛицВидДеятField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.НаимЛицВидДеятField = null;
                        }
                        else
                        {
                            if ((this.НаимЛицВидДеятField == null))
                            {
                                this.НаимЛицВидДеятField = XSimpleList<string>.Initialize(
                                    this,
                                    XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype,
                                    value,
                                    XName.Get("НаимЛицВидДеят", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<System.String>(this.НаимЛицВидДеятField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения об адресе места осуществления лицензируемого вида деятельности
                /// </para>
                /// <para>
                /// Элемент не формируется, если конкретное место осуществления лицензируемого вида деятельности в лицензии не указано или указано в географических координатах.
                ///При наличии - сведения указываются в отношении каждого адреса места осуществления лицензируемого вида деятельности, внесенного в ЕГРЮЛ
                ///
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public IList<string> МестоДейстЛиц
                {
                    get
                    {
                        if ((this.МестоДейстЛицField == null))
                        {
                            this.МестоДейстЛицField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("МестоДейстЛиц", ""));
                        }
                        return this.МестоДейстЛицField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.МестоДейстЛицField = null;
                        }
                        else
                        {
                            if ((this.МестоДейстЛицField == null))
                            {
                                this.МестоДейстЛицField = XSimpleList<string>.Initialize(
                                    this,
                                    XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype,
                                    value,
                                    XName.Get("МестоДейстЛиц", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<System.String>(this.МестоДейстЛицField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Наименование лицензирующего органа, выдавшего или переоформившего лицензию
                /// </para>
                /// <para>
                /// Формируется в случае наличия указанных сведений в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public string ЛицОргВыдЛиц
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ЛицОргВыдЛиц", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElementWithValidation(XName.Get("ЛицОргВыдЛиц", ""), value, "ЛицОргВыдЛиц", ЛицОргВыдЛицLocalType.TypeDefinition);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о приостановлении действия лицензии
                /// </para>
                /// <para>
                /// Формируется в случае, если на момент выдачи сведений в ЕГРЮЛ имеются сведения о том, что лицензия приостановлена
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (НаимЛицВидДеят+, МестоДейстЛиц*, ЛицОргВыдЛиц?, ГРНДата, ГРНДатаИспр?, СвПриостЛиц?)
                /// </para>
                /// </summary>
                public СвПриостЛицLocalType СвПриостЛиц
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвПриостЛиц", ""));
                        return ((СвПриостЛицLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвПриостЛиц", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Серия лицензии
                /// </para>
                /// <para>
                /// Является обязательным, если выданная лицензия имеет такой реквизит 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string СерЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("СерЛиц", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("СерЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Номер лицензии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НомЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НомЛиц", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НомЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Вид лицензии
                /// </para>
                /// <para>
                /// Является обязательным, если выданная лицензия имеет такой реквизит 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ВидЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ВидЛиц", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ВидЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата лицензии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаЛиц", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата начала действия лицензии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаНачЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаНачЛиц", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаНачЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата окончания действия лицензии
                /// </para>
                /// <para>
                /// 
                ///								Является обязательным, если выданная лицензия имеет такой реквизит 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<System.DateTime> ДатаОкончЛиц
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаОкончЛиц", ""));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаОкончЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвЛицензия", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвЛицензияLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("НаимЛицВидДеят", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("МестоДейстЛиц", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("ЛицОргВыдЛиц", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("СвПриостЛиц", ""), typeof(СвПриостЛицLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                private class НаимЛицВидДеятLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                        XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
                        new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private НаимЛицВидДеятLocalType()
                    {
                    }
                }

                private class МестоДейстЛицLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                        XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
                        new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private МестоДейстЛицLocalType()
                    {
                    }
                }

                private class ЛицОргВыдЛицLocalType
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                        XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
                        new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));

                    private ЛицОргВыдЛицLocalType()
                    {
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СвПриостЛицLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвПриостЛицLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвПриостЛицLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвПриостЛицLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СвПриостЛицLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДата
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДата", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата приостановления действия лицензии
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаПриостЛиц
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаПриостЛиц", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаПриостЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование лицензирующего органа, приостановившего действие лицензии
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ЛицОргПриостЛиц
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ЛицОргПриостЛиц", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ЛицОргПриостЛиц", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвПриостЛиц", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвПриостЛицLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвФилиал*, СвПредстав*)
            /// </para>
            /// </summary>
            public partial class СвПодраздLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвФилиалLocalType> СвФилиалField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвПредставLocalType> СвПредставField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвПодраздLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвПодраздLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвПодраздLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвФилиал", "")), new NamedContentModelEntity(XName.Get("СвПредстав", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвФилиал*, СвПредстав*)
                /// </para>
                /// </summary>
                public СвПодраздLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о филиалах юридического лица
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (СвФилиал*, СвПредстав*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвПодраздLocalType.СвФилиалLocalType> СвФилиал
                {
                    get
                    {
                        if ((this.СвФилиалField == null))
                        {
                            this.СвФилиалField = new XTypedList<СвФилиалLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвФилиал", ""));
                        }
                        return this.СвФилиалField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвФилиалField = null;
                        }
                        else
                        {
                            if ((this.СвФилиалField == null))
                            {
                                this.СвФилиалField = XTypedList<СвФилиалLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвФилиал", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвФилиалLocalType>(this.СвФилиалField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о представительствах юридического лица
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (СвФилиал*, СвПредстав*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвПодраздLocalType.СвПредставLocalType> СвПредстав
                {
                    get
                    {
                        if ((this.СвПредставField == null))
                        {
                            this.СвПредставField = new XTypedList<СвПредставLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвПредстав", ""));
                        }
                        return this.СвПредставField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвПредставField = null;
                        }
                        else
                        {
                            if ((this.СвПредставField == null))
                            {
                                this.СвПредставField = XTypedList<СвПредставLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвПредстав", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвПредставLocalType>(this.СвПредставField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвПодразд", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвПодраздLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвФилиал", ""), typeof(СвФилиалLocalType));
                    localElementDictionary.Add(XName.Get("СвПредстав", ""), typeof(СвПредставLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                /// </para>
                /// </summary>
                public partial class СвФилиалLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвФилиалLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвФилиалLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвФилиалLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("СвНаим", "")),
                            new NamedContentModelEntity(XName.Get("АдрМНРФ", "")),
                            new NamedContentModelEntity(XName.Get("АдрМНИн", "")),
                            new NamedContentModelEntity(XName.Get("СвУчетНОФилиал", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public СвФилиалLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном филиале
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о наименовании филиала
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public СвНаимПодраздТип СвНаим
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвНаим", ""));
                            return ((СвНаимПодраздТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвНаим", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Адрес (место расположения) на территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public АдрРФЕГРЮЛТип АдрМНРФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМНРФ", ""));
                            return ((АдрРФЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМНРФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Адрес (место расположения) за пределами территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public АдрИнЕГРЮЛТип АдрМНИн
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМНИн", ""));
                            return ((АдрИнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМНИн", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об учете в налоговом органе по месту нахождения филиала
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОФилиал?)
                    /// </para>
                    /// </summary>
                    public СвУчетНОПодраздТип СвУчетНОФилиал
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвУчетНОФилиал", ""));
                            return ((СвУчетНОПодраздТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвУчетНОФилиал", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвФилиал", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвФилиалLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("СвНаим", ""), typeof(СвНаимПодраздТип));
                        localElementDictionary.Add(XName.Get("АдрМНРФ", ""), typeof(АдрРФЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдрМНИн", ""), typeof(АдрИнЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвУчетНОФилиал", ""), typeof(СвУчетНОПодраздТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                /// </para>
                /// </summary>
                public partial class СвПредставLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвПредставLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвПредставLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвПредставLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                            new NamedContentModelEntity(XName.Get("СвНаим", "")),
                            new NamedContentModelEntity(XName.Get("АдрМНРФ", "")),
                            new NamedContentModelEntity(XName.Get("АдрМНИн", "")),
                            new NamedContentModelEntity(XName.Get("СвУчетНОПредстав", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public СвПредставLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ сведений о данном представительстве
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаПерв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о наименовании представительства
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public СвНаимПодраздТип СвНаим
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвНаим", ""));
                            return ((СвНаимПодраздТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвНаим", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Адрес (место расположения) на территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public АдрРФЕГРЮЛТип АдрМНРФ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМНРФ", ""));
                            return ((АдрРФЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМНРФ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Адрес (место расположения) за пределами территории Российской Федерации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public АдрИнЕГРЮЛТип АдрМНИн
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("АдрМНИн", ""));
                            return ((АдрИнЕГРЮЛТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("АдрМНИн", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об учете в налоговом органе по месту нахождения представительства
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаПерв?, СвНаим?, АдрМНРФ?, АдрМНИн?, СвУчетНОПредстав?)
                    /// </para>
                    /// </summary>
                    public СвУчетНОПодраздТип СвУчетНОПредстав
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвУчетНОПредстав", ""));
                            return ((СвУчетНОПодраздТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвУчетНОПредстав", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвПредстав", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвПредставLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                        localElementDictionary.Add(XName.Get("СвНаим", ""), typeof(СвНаимПодраздТип));
                        localElementDictionary.Add(XName.Get("АдрМНРФ", ""), typeof(АдрРФЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("АдрМНИн", ""), typeof(АдрИнЕГРЮЛТип));
                        localElementDictionary.Add(XName.Get("СвУчетНОПредстав", ""), typeof(СвУчетНОПодраздТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
            /// </para>
            /// </summary>
            public partial class СвРеоргLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ГРНДатаТип> ГРНДатаИзмСостРеоргЮЛField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвРеоргЮЛLocalType> СвРеоргЮЛField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвРеоргLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвРеоргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвРеоргLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвСтатус", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИзмСостРеоргЮЛ", "")),
                        new NamedContentModelEntity(XName.Get("СвРеоргЮЛ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
                /// </para>
                /// </summary>
                public СвРеоргLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о форме реорганизации (статусе) юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
                /// </para>
                /// </summary>
                public СвСтатусLocalType СвСтатус
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвСтатус", ""));
                        return ((СвСтатусLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвСтатус", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о начале реорганизации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения записи, которой в ЕГРЮЛ внесены сведения об изменении состава участвующих в реорганизации юридических лиц 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
                /// </para>
                /// </summary>
                public IList<ГРНДатаТип> ГРНДатаИзмСостРеоргЮЛ
                {
                    get
                    {
                        if ((this.ГРНДатаИзмСостРеоргЮЛField == null))
                        {
                            this.ГРНДатаИзмСостРеоргЮЛField = new XTypedList<ГРНДатаТип>(this, LinqToXsdTypeManager.Instance, XName.Get("ГРНДатаИзмСостРеоргЮЛ", ""));
                        }
                        return this.ГРНДатаИзмСостРеоргЮЛField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.ГРНДатаИзмСостРеоргЮЛField = null;
                        }
                        else
                        {
                            if ((this.ГРНДатаИзмСостРеоргЮЛField == null))
                            {
                                this.ГРНДатаИзмСостРеоргЮЛField = XTypedList<ГРНДатаТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ГРНДатаИзмСостРеоргЮЛ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<ГРНДатаТип>(this.ГРНДатаИзмСостРеоргЮЛField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о юридических лицах, участвующих  в реорганизации
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (СвСтатус, ГРНДата, ГРНДатаИзмСостРеоргЮЛ*, СвРеоргЮЛ*)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвРеоргLocalType.СвРеоргЮЛLocalType> СвРеоргЮЛ
                {
                    get
                    {
                        if ((this.СвРеоргЮЛField == null))
                        {
                            this.СвРеоргЮЛField = new XTypedList<СвРеоргЮЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвРеоргЮЛ", ""));
                        }
                        return this.СвРеоргЮЛField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвРеоргЮЛField = null;
                        }
                        else
                        {
                            if ((this.СвРеоргЮЛField == null))
                            {
                                this.СвРеоргЮЛField = XTypedList<СвРеоргЮЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвРеоргЮЛ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвРеоргЮЛLocalType>(this.СвРеоргЮЛField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвРеорг", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвРеоргLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвСтатус", ""), typeof(СвСтатусLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИзмСостРеоргЮЛ", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("СвРеоргЮЛ", ""), typeof(СвРеоргЮЛLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвСтатусLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвСтатусLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвСтатусLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвСтатусLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Код формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string КодСтатусЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("КодСтатусЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("КодСтатусЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимСтатусЮЛ
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимСтатусЮЛ", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимСтатусЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвСтатус", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвСтатусLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public partial class СвРеоргЮЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвРеоргЮЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвРеоргЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвРеоргЮЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public СвРеоргЮЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаИспр?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаИспр
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Основной государственный регистрационный номер юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ОГРН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ИНН юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ИНН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Полное наименование юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимЮЛПолн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Состояние юридического лица после завершения реорганизации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string СостЮЛпосле
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("СостЮЛпосле", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("СостЮЛпосле", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвРеоргЮЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвРеоргЮЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвПредшLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвПредшLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвПредшLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвПредшLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвЮЛсложнРеорг", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвПредшLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о ЮЛ, путем реорганизации которого был создан правопредшественник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвЮЛсложнРеоргLocalType СвЮЛсложнРеорг
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвЮЛсложнРеорг", ""));
                        return ((СвЮЛсложнРеоргLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвЮЛсложнРеорг", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Основной государственный регистрационный номер юридического лица
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ОГРН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// ИНН юридического лица
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ИНН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Полное наименование юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НаимЮЛПолн
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвПредш", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвПредшLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвЮЛсложнРеорг", ""), typeof(СвЮЛсложнРеоргLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвЮЛсложнРеоргLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвЮЛсложнРеоргLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвЮЛсложнРеоргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвЮЛсложнРеоргLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Основной государственный регистрационный номер юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ОГРН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ИНН юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string ИНН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Полное наименование юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимЮЛПолн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвЮЛсложнРеорг", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвЮЛсложнРеоргLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвФЛ)
            /// </para>
            /// </summary>
            public partial class СвКФХПредшLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвКФХПредшLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвКФХПредшLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвКФХПредшLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвФЛ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвФЛ)
                /// </para>
                /// </summary>
                public СвКФХПредшLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о ФИО и (при наличии) ИНН главы КФХ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвФЛ)
                /// </para>
                /// </summary>
                public СвФЛЕГРЮЛТип СвФЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                        return ((СвФЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвФЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ОГРНИП крестьянского (фермерского) хозяйства
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string ОГРНИП
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ОГРНИП", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ОГРНИП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвКФХПредш", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвКФХПредшLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
            /// </para>
            /// </summary>
            public partial class СвПреемLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвПреемLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвПреемLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвПреемLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("СвЮЛсложнРеорг", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвПреемLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о ЮЛ, которое было создано в форме слияния с участием правопреемника, или к которому присоединился правопреемник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public СвЮЛсложнРеоргLocalType СвЮЛсложнРеорг
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвЮЛсложнРеорг", ""));
                        return ((СвЮЛсложнРеоргLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвЮЛсложнРеорг", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДата
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДата", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                /// </para>
                /// <para>
                /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (СвЮЛсложнРеорг?, ГРНДата, ГРНДатаИспр?)
                /// </para>
                /// </summary>
                public ГРНДатаТип ГРНДатаИспр
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                        return ((ГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Основной государственный регистрационный номер юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string ОГРН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// ИНН юридического лица
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ИНН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Полное наименование юридического лица
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string НаимЮЛПолн
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвПреем", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвПреемLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвЮЛсложнРеорг", ""), typeof(СвЮЛсложнРеоргLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                public partial class СвЮЛсложнРеоргLocalType : XTypedElement, IXMetaData
                {

                    public static explicit operator СвЮЛсложнРеоргLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвЮЛсложнРеоргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    public СвЮЛсложнРеоргLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Основной государственный регистрационный номер юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string ОГРН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ИНН юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string ИНН
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Полное наименование юридического лица
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string НаимЮЛПолн
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвЮЛсложнРеорг", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвЮЛсложнРеоргLocalType>(this);
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (СвФЛ)
            /// </para>
            /// </summary>
            public partial class СвКФХПреемLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвКФХПреемLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвКФХПреемLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвКФХПреемLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвФЛ", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (СвФЛ)
                /// </para>
                /// </summary>
                public СвКФХПреемLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о ФИО и (при наличии) ИНН главы КФХ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (СвФЛ)
                /// </para>
                /// </summary>
                public СвФЛЕГРЮЛТип СвФЛ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                        return ((СвФЛЕГРЮЛТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвФЛ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ОГРНИП крестьянского (фермерского) хозяйства
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string ОГРНИП
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ОГРНИП", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ОГРНИП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвКФХПреем", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвКФХПреемLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
            /// </para>
            /// </summary>
            public partial class СвЗапЕГРЮЛLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвЗаявФЛLocalType> СвЗаявФЛField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СведПредДокLocalType> СведПредДокField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<СвСвидLocalType> СвСвидField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator СвЗапЕГРЮЛLocalType(XElement xe)
                {
                    return XTypedServices.ToXTypedElement<СвЗапЕГРЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                }

                static СвЗапЕГРЮЛLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(
                        new NamedContentModelEntity(XName.Get("ВидЗап", "")),
                        new NamedContentModelEntity(XName.Get("СвРегОрг", "")),
                        new NamedContentModelEntity(XName.Get("СвЗаявФЛ", "")),
                        new NamedContentModelEntity(XName.Get("СведПредДок", "")),
                        new NamedContentModelEntity(XName.Get("СвСвид", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаИспрПред", "")),
                        new NamedContentModelEntity(XName.Get("ГРНДатаНедПред", "")),
                        new NamedContentModelEntity(XName.Get("СвСтатусЗап", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public СвЗапЕГРЮЛLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Сведения о причине внесения записи в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public ВидЗапТип ВидЗап
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ВидЗап", ""));
                        return ((ВидЗапТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ВидЗап", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о регистрирующем (налоговом) органе, внесшем запись в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public СвРегОргТип СвРегОрг
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвРегОрг", ""));
                        return ((СвРегОргТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвРегОрг", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о заявителе
                /// </para>
                /// <para>
                /// Формируется при наличии указанных сведений и формировании выписки для правоохранительных органов или для внутреннего использования в органах ФНС России
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвЗапЕГРЮЛLocalType.СвЗаявФЛLocalType> СвЗаявФЛ
                {
                    get
                    {
                        if ((this.СвЗаявФЛField == null))
                        {
                            this.СвЗаявФЛField = new XTypedList<СвЗаявФЛLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвЗаявФЛ", ""));
                        }
                        return this.СвЗаявФЛField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвЗаявФЛField = null;
                        }
                        else
                        {
                            if ((this.СвЗаявФЛField == null))
                            {
                                this.СвЗаявФЛField = XTypedList<СвЗаявФЛLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвЗаявФЛ", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвЗаявФЛLocalType>(this.СвЗаявФЛField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о документах, представленных при внесении записи в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвЗапЕГРЮЛLocalType.СведПредДокLocalType> СведПредДок
                {
                    get
                    {
                        if ((this.СведПредДокField == null))
                        {
                            this.СведПредДокField = new XTypedList<СведПредДокLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СведПредДок", ""));
                        }
                        return this.СведПредДокField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СведПредДокField = null;
                        }
                        else
                        {
                            if ((this.СведПредДокField == null))
                            {
                                this.СведПредДокField = XTypedList<СведПредДокLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СведПредДок", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СведПредДокLocalType>(this.СведПредДокField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Формируется в отношении выданных свидетельств (включая свидетельства, выданные повторно), а также свидетельств, признанных недействительными по решению суда
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public IList<EGRUL.СвЮЛLocalType.СвЗапЕГРЮЛLocalType.СвСвидLocalType> СвСвид
                {
                    get
                    {
                        if ((this.СвСвидField == null))
                        {
                            this.СвСвидField = new XTypedList<СвСвидLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("СвСвид", ""));
                        }
                        return this.СвСвидField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.СвСвидField = null;
                        }
                        else
                        {
                            if ((this.СвСвидField == null))
                            {
                                this.СвСвидField = XTypedList<СвСвидLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("СвСвид", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<СвСвидLocalType>(this.СвСвидField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата записи, в которую внесены исправления
                /// </para>
                /// <para>
                /// Формируется только в случае, если данной записью были внесены исправления (корректировки) в сведения другой записи
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public ИдГРНДатаТип ГРНДатаИспрПред
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаИспрПред", ""));
                        return ((ИдГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаИспрПред", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// ГРН и дата записи, которая признана недействительной
                /// </para>
                /// <para>
                /// Формируется только в случае, если данной записью  была признана недействительной (ошибочной)  другая запись
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public ИдГРНДатаТип ГРНДатаНедПред
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ГРНДатаНедПред", ""));
                        return ((ИдГРНДатаТип)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ГРНДатаНедПред", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Сведения о статусе записи
                /// </para>
                /// <para>
                /// Формируется только в случае, если в данную запись были внесены исправления (корректировки) другой записью или данная запись признана недействительной (ошибочной) другой записью
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ВидЗап, СвРегОрг, СвЗаявФЛ*, СведПредДок*, СвСвид*, ГРНДатаИспрПред?, ГРНДатаНедПред?, СвСтатусЗап?)
                /// </para>
                /// </summary>
                public СвСтатусЗапLocalType СвСтатусЗап
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("СвСтатусЗап", ""));
                        return ((СвСтатусЗапLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("СвСтатусЗап", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Системный идентификатор записи
                /// </para>
                /// <para>
                /// При наличии государственного регистрационного номера записи может совпадать с этим номером
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public decimal ИдЗап
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ИдЗап", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ИдЗап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Государственный регистрационный номер записи
                /// </para>
                /// <para>
                /// Может отсутствовать, если запись в ЕГРЮЛ внесена без присвоения государственного регистрационного номера
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ГРН
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ГРН", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Дата внесения записи в ЕГРЮЛ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public System.DateTime ДатаЗап
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("ДатаЗап", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("ДатаЗап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("СвЗапЕГРЮЛ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<СвЗапЕГРЮЛLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ВидЗап", ""), typeof(ВидЗапТип));
                    localElementDictionary.Add(XName.Get("СвРегОрг", ""), typeof(СвРегОргТип));
                    localElementDictionary.Add(XName.Get("СвЗаявФЛ", ""), typeof(СвЗаявФЛLocalType));
                    localElementDictionary.Add(XName.Get("СведПредДок", ""), typeof(СведПредДокLocalType));
                    localElementDictionary.Add(XName.Get("СвСвид", ""), typeof(СвСвидLocalType));
                    localElementDictionary.Add(XName.Get("ГРНДатаИспрПред", ""), typeof(ИдГРНДатаТип));
                    localElementDictionary.Add(XName.Get("ГРНДатаНедПред", ""), typeof(ИдГРНДатаТип));
                    localElementDictionary.Add(XName.Get("СвСтатусЗап", ""), typeof(СвСтатусЗапLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                /// </para>
                /// </summary>
                public partial class СвЗаявФЛLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвЗаявФЛLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвЗаявФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвЗаявФЛLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("ВидЗаяв", "")),
                            new NamedContentModelEntity(XName.Get("СвЮЛ", "")),
                            new NamedContentModelEntity(XName.Get("СвУпрОрг", "")),
                            new NamedContentModelEntity(XName.Get("СвФЛ", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                    /// </para>
                    /// </summary>
                    public СвЗаявФЛLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Заявитель
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                    /// </para>
                    /// </summary>
                    public ВидЗаявLocalType ВидЗаяв
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ВидЗаяв", ""));
                            return ((ВидЗаявLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ВидЗаяв", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о юридическом лице, от имени которого действует заявитель
                    /// </para>
                    /// <para>
                    /// Формируется только при наличии сведений о наименовании юридического лица, от имени которого действует заявитель
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                    /// </para>
                    /// </summary>
                    public СвЮЛLocalType СвЮЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвЮЛ", ""));
                            return ((СвЮЛLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвЮЛ", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения об управляющей компании
                    /// </para>
                    /// <para>
                    /// Формируется, если заявитель выступает от управляющей организации ЮЛ и в ЕГРЮЛ внесены сведения о ее наименовании
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                    /// </para>
                    /// </summary>
                    public СвУпрОргLocalType СвУпрОрг
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвУпрОрг", ""));
                            return ((СвУпрОргLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвУпрОрг", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Сведения о ФЛ - заявителе
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ВидЗаяв, СвЮЛ?, СвУпрОрг?, СвФЛ)
                    /// </para>
                    /// </summary>
                    public СвФЛLocalType СвФЛ
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                            return ((СвФЛLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("СвФЛ", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвЗаявФЛ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвЗаявФЛLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ВидЗаяв", ""), typeof(ВидЗаявLocalType));
                        localElementDictionary.Add(XName.Get("СвЮЛ", ""), typeof(СвЮЛLocalType));
                        localElementDictionary.Add(XName.Get("СвУпрОрг", ""), typeof(СвУпрОргLocalType));
                        localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    public partial class ВидЗаявLocalType : XTypedElement, IXMetaData
                    {

                        public static explicit operator ВидЗаявLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<ВидЗаявLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        public ВидЗаявLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Код по справочнику СЗОЮЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string КодСЗОЮЛ
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("КодСЗОЮЛ", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("КодСЗОЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Наименование по справочнику СЗОЮЛ 
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string НаимСЗОЮЛ
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимСЗОЮЛ", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимСЗОЮЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("ВидЗаяв", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ВидЗаявLocalType>(this);
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return ContentModelEntity.Default;
                        }
                    }

                    public partial class СвЮЛLocalType : XTypedElement, IXMetaData
                    {

                        public static explicit operator СвЮЛLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        public СвЮЛLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Основной государственный регистрационный номер юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string ОГРН
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// ИНН юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string ИНН
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Полное наименование юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string НаимЮЛПолн
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвЮЛ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвЮЛLocalType>(this);
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return ContentModelEntity.Default;
                        }
                    }

                    public partial class СвУпрОргLocalType : XTypedElement, IXMetaData
                    {

                        public static explicit operator СвУпрОргLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвУпрОргLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        public СвУпрОргLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Основной государственный регистрационный номер юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string ОГРН
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// ИНН юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string ИНН
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Полное наименование юридического лица
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// </summary>
                        public string НаимЮЛПолн
                        {
                            get
                            {
                                XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвУпрОрг", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвУпрОргLocalType>(this);
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return ContentModelEntity.Default;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                    /// </para>
                    /// </summary>
                    public partial class СвФЛLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator СвФЛLocalType(XElement xe)
                        {
                            return XTypedServices.ToXTypedElement<СвФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                        }

                        static СвФЛLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(
                                new NamedContentModelEntity(XName.Get("СвФИОИНН", "")),
                                new NamedContentModelEntity(XName.Get("СвРожд", "")),
                                new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                                new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                                new NamedContentModelEntity(XName.Get("АдрМЖИн", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФЛLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о ФИО и (при наличии) ИНН ФЛ
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвФИОИННLocalType СвФИОИНН
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвФИОИНН", ""));
                                return ((СвФИОИННLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвФИОИНН", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о рождении
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public СвРождLocalType СвРожд
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("СвРожд", ""));
                                return ((СвРождLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("СвРожд", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения о документе, удостоверяющем личность
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public УдЛичнФЛLocalType УдЛичнФЛ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                                return ((УдЛичнФЛLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства в Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдресМЖРФLocalType АдресМЖРФ
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                                return ((АдресМЖРФLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Сведения об адресе места жительства за пределами Российской Федерации
                        /// </para>
                        /// <para>
                        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (СвФИОИНН, СвРожд?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?)
                        /// </para>
                        /// </summary>
                        public АдрМЖИнLocalType АдрМЖИн
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                                return ((АдрМЖИнLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("АдрМЖИн", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("СвФЛ", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<СвФЛLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("СвФИОИНН", ""), typeof(СвФИОИННLocalType));
                            localElementDictionary.Add(XName.Get("СвРожд", ""), typeof(СвРождLocalType));
                            localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнФЛLocalType));
                            localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдресМЖРФLocalType));
                            localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрМЖИнLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public partial class СвФИОИННLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator СвФИОИННLocalType(XElement xe)
                            {
                                return XTypedServices.ToXTypedElement<СвФИОИННLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                            }

                            static СвФИОИННLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public СвФИОИННLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                            /// </para>
                            /// <para>
                            /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДатаИспр
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Фамилия
                            /// </para>
                            /// <para>
                            /// Является обязательным при отсутствии имени ФЛ
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Фамилия
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Фамилия", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Фамилия", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Имя
                            /// </para>
                            /// <para>
                            /// Является обязательным при отсутствии фамилии ФЛ
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Имя
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Имя", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Имя", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Отчество
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Отчество
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Отчество", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Отчество", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// ИНН ФЛ
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string ИННФЛ
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ИННФЛ", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ИННФЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("СвФИОИНН", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<СвФИОИННLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public partial class СвРождLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator СвРождLocalType(XElement xe)
                            {
                                return XTypedServices.ToXTypedElement<СвРождLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                            }

                            static СвРождLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public СвРождLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                            /// </para>
                            /// <para>
                            /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДатаИспр
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Дата рождения
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public System.DateTime ДатаРожд
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ДатаРожд", ""));
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ДатаРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Место рождения
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string МестоРожд
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("МестоРожд", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("МестоРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Признак полноты представляемой даты рождения физического лица
                            /// </para>
                            /// <para>
                            /// 
                            ///																	, где:
                            ///1 – только год (сведения о месяце и дне в указанном месяце отсутствуют);
                            ///2 – только месяц и код (сведения о дне в указанном месяце отсутствуют);
                            ///3 – полная дата.
                            ///Отсутствие указанного реквизита означает полную дату рождения (соответствует значению ПрДатаРожд=3)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string ПрДатаРожд
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ПрДатаРожд", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ПрДатаРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("СвРожд", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<СвРождLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public partial class УдЛичнФЛLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator УдЛичнФЛLocalType(XElement xe)
                            {
                                return XTypedServices.ToXTypedElement<УдЛичнФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                            }

                            static УдЛичнФЛLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public УдЛичнФЛLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                            /// </para>
                            /// <para>
                            /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДатаИспр
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Код вида документа по справочнику СПДУЛ 
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string КодВидДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("КодВидДок", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("КодВидДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Наименование вида документа
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string НаимДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("НаимДок", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("НаимДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Серия и номер документа
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string СерНомДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("СерНомДок", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("СерНомДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Дата выдачи
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public System.Nullable<System.DateTime> ДатаДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ДатаДок", ""));
                                    if ((x == null))
                                    {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ДатаДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Кем выдан
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string ВыдДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ВыдДок", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ВыдДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Код подразделения
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string КодВыдДок
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("КодВыдДок", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("КодВыдДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("УдЛичнФЛ", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<УдЛичнФЛLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public partial class АдресМЖРФLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator АдресМЖРФLocalType(XElement xe)
                            {
                                return XTypedServices.ToXTypedElement<АдресМЖРФLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                            }

                            static АдресМЖРФLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(
                                    new NamedContentModelEntity(XName.Get("Регион", "")),
                                    new NamedContentModelEntity(XName.Get("Район", "")),
                                    new NamedContentModelEntity(XName.Get("Город", "")),
                                    new NamedContentModelEntity(XName.Get("НаселПункт", "")),
                                    new NamedContentModelEntity(XName.Get("Улица", "")),
                                    new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                                    new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public АдресМЖРФLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Субъект Российской Федерации
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public РегионТип Регион
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Регион", ""));
                                    return ((РегионТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Регион", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Район (улус и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public РайонТип Район
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Район", ""));
                                    return ((РайонТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Район", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Город (волость и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГородТип Город
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Город", ""));
                                    return ((ГородТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Город", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Населенный пункт (село и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public НаселПунктТип НаселПункт
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("НаселПункт", ""));
                                    return ((НаселПунктТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("НаселПункт", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Улица (проспект, 
                            ///переулок и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public УлицаТип Улица
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Улица", ""));
                                    return ((УлицаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Улица", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДата
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДата", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                            /// </para>
                            /// <para>
                            /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата?, ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДатаИспр
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Индекс
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Индекс
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Индекс", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Индекс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Код субъекта Российской Федерации
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string КодРегион
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("КодРегион", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("КодРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Код адреса по КЛАДР
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string КодАдрКладр
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("КодАдрКладр", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("КодАдрКладр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Дом (владение и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Дом
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Дом", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Дом", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Корпус (строение и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Корпус
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Корпус", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Корпус", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Квартира (офис и т.п.)
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string Кварт
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("Кварт", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("Кварт", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("АдресМЖРФ", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<АдресМЖРФLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Регион", ""), typeof(РегионТип));
                                localElementDictionary.Add(XName.Get("Район", ""), typeof(РайонТип));
                                localElementDictionary.Add(XName.Get("Город", ""), typeof(ГородТип));
                                localElementDictionary.Add(XName.Get("НаселПункт", ""), typeof(НаселПунктТип));
                                localElementDictionary.Add(XName.Get("Улица", ""), typeof(УлицаТип));
                                localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
                                localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ГРНДатаИспр?)
                        /// </para>
                        /// </summary>
                        public partial class АдрМЖИнLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator АдрМЖИнLocalType(XElement xe)
                            {
                                return XTypedServices.ToXTypedElement<АдрМЖИнLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                            }

                            static АдрМЖИнLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public АдрМЖИнLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
                            /// </para>
                            /// <para>
                            /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ГРНДатаИспр?)
                            /// </para>
                            /// </summary>
                            public ГРНДатаТип ГРНДатаИспр
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                                    return ((ГРНДатаТип)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Код страны
                            /// </para>
                            /// <para>
                            /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string ОКСМ
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("ОКСМ", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("ОКСМ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Наименование страны
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// </summary>
                            public string НаимСтран
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("НаимСтран", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("НаимСтран", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Адрес
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// </summary>
                            public string АдрИн
                            {
                                get
                                {
                                    XAttribute x = this.Attribute(XName.Get("АдрИн", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetAttribute(XName.Get("АдрИн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("АдрМЖИн", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<АдрМЖИнLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (НаимДок, НомДок?, ДатаДок?)
                /// </para>
                /// </summary>
                public partial class СведПредДокLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СведПредДокLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СведПредДокLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СведПредДокLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(
                            new NamedContentModelEntity(XName.Get("НаимДок", "")),
                            new NamedContentModelEntity(XName.Get("НомДок", "")),
                            new NamedContentModelEntity(XName.Get("ДатаДок", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (НаимДок, НомДок?, ДатаДок?)
                    /// </para>
                    /// </summary>
                    public СведПредДокLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Наименование документа
                    /// </para>
                    /// <para>
                    /// При отсутствии наименования документа указывается наименование вида документа по справочнику СВДРЕГ
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (НаимДок, НомДок?, ДатаДок?)
                    /// </para>
                    /// </summary>
                    public string НаимДок
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("НаимДок", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElementWithValidation(XName.Get("НаимДок", ""), value, "НаимДок", НаимДокLocalType.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Номер документа
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (НаимДок, НомДок?, ДатаДок?)
                    /// </para>
                    /// </summary>
                    public string НомДок
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("НомДок", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElementWithValidation(XName.Get("НомДок", ""), value, "НомДок", НомДокLocalType.TypeDefinition);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата документа
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (НаимДок, НомДок?, ДатаДок?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<System.DateTime> ДатаДок
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ДатаДок", ""));
                            if ((x == null))
                            {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetElementWithValidation(XName.Get("ДатаДок", ""), value, "ДатаДок", ДатаДокLocalType.TypeDefinition);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СведПредДок", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СведПредДокLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("НаимДок", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("НомДок", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ДатаДок", ""), typeof(System.DateTime));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    private class НаимДокLocalType
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition =
                            new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                                XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
                                new Xml.Schema.Linq.RestrictionFacets(
                                    ((Xml.Schema.Linq.RestrictionFlags)(6)),
                                    null,
                                    0,
                                    0,
                                    null,
                                    null,
                                    255,
                                    null,
                                    null,
                                    1,
                                    null,
                                    0,
                                    XmlSchemaWhiteSpace.Preserve));

                        private НаимДокLocalType()
                        {
                        }
                    }

                    private class НомДокLocalType
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition =
                            new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                                XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
                                new Xml.Schema.Linq.RestrictionFacets(
                                    ((Xml.Schema.Linq.RestrictionFlags)(6)),
                                    null,
                                    0,
                                    0,
                                    null,
                                    null,
                                    50,
                                    null,
                                    null,
                                    1,
                                    null,
                                    0,
                                    XmlSchemaWhiteSpace.Preserve));

                        private НомДокLocalType()
                        {
                        }
                    }

                    private class ДатаДокLocalType
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date),
                            new Xml.Schema.Linq.RestrictionFacets(
                                ((Xml.Schema.Linq.RestrictionFlags)(256)),
                                null,
                                0,
                                0,
                                null,
                                null,
                                0,
                                null,
                                new System.DateTime(599266080000000000),
                                0,
                                null,
                                0,
                                XmlSchemaWhiteSpace.Collapse));

                        private ДатаДокLocalType()
                        {
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаСвидНед?)
                /// </para>
                /// </summary>
                public partial class СвСвидLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвСвидLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвСвидLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвСвидLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаСвидНед", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаСвидНед?)
                    /// </para>
                    /// </summary>
                    public СвСвидLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о признании свидетельства недействительным по решению суда 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаСвидНед?)
                    /// </para>
                    /// </summary>
                    public ГРНДатаТип ГРНДатаСвидНед
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаСвидНед", ""));
                            return ((ГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаСвидНед", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Серия бланка свидетельства
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string Серия
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("Серия", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("Серия", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Номер бланка свидетельства
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public string Номер
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("Номер", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("Номер", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Дата выдачи свидетельства 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// </summary>
                    public System.DateTime ДатаВыдСвид
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("ДатаВыдСвид", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("ДатаВыдСвид", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвСвид", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвСвидLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаСвидНед", ""), typeof(ГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ГРНДатаНед?, ГРНДатаИспр*)
                /// </para>
                /// </summary>
                public partial class СвСтатусЗапLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ИдГРНДатаТип> ГРНДатаИспрField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator СвСтатусЗапLocalType(XElement xe)
                    {
                        return XTypedServices.ToXTypedElement<СвСтатусЗапLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
                    }

                    static СвСтатусЗапLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДатаНед", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ГРНДатаНед?, ГРНДатаИспр*)
                    /// </para>
                    /// </summary>
                    public СвСтатусЗапLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата внесения записи, которой запись признана недействительной
                    /// </para>
                    /// <para>
                    /// Отсутствует, если данная запись не была признана недействительной (ошибочной) другой записью 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаНед?, ГРНДатаИспр*)
                    /// </para>
                    /// </summary>
                    public ИдГРНДатаТип ГРНДатаНед
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ГРНДатаНед", ""));
                            return ((ИдГРНДатаТип)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ГРНДатаНед", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// ГРН и дата записи, которой внесены исправления в связи с технической ошибкой
                    /// </para>
                    /// <para>
                    /// Отсутствует, если в сведениях, внесенных в ЕГРИП по данной записи, не исправлялись технические ошибки 
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ГРНДатаНед?, ГРНДатаИспр*)
                    /// </para>
                    /// </summary>
                    public IList<ИдГРНДатаТип> ГРНДатаИспр
                    {
                        get
                        {
                            if ((this.ГРНДатаИспрField == null))
                            {
                                this.ГРНДатаИспрField = new XTypedList<ИдГРНДатаТип>(this, LinqToXsdTypeManager.Instance, XName.Get("ГРНДатаИспр", ""));
                            }
                            return this.ГРНДатаИспрField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ГРНДатаИспрField = null;
                            }
                            else
                            {
                                if ((this.ГРНДатаИспрField == null))
                                {
                                    this.ГРНДатаИспрField = XTypedList<ИдГРНДатаТип>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ГРНДатаИспр", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<ИдГРНДатаТип>(this.ГРНДатаИспрField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("СвСтатусЗап", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<СвСтатусЗапLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ГРНДатаНед", ""), typeof(ИдГРНДатаТип));
                        localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ИдГРНДатаТип));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о виде записи, внесенной в ЕГРЮЛ
    /// </para>
    /// </summary>
    public partial class ВидЗапТип : XTypedElement, IXMetaData
    {

        public static explicit operator ВидЗапТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ВидЗапТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о виде записи, внесенной в ЕГРЮЛ
        /// </para>
        /// </summary>
        public ВидЗапТип()
        {
        }

        /// <summary>
        /// <para>
        /// Код вида записи (причины внесения записи в ЕГРЮЛ)  по справочнику СПВЗ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодСПВЗ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодСПВЗ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодСПВЗ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование вида записи (причины внесения записи в ЕГРЮЛ) 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимВидЗап
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимВидЗап", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимВидЗап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ВидЗапТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ВидЗапТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения об адресе за пределами территории РФ, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class АдрИнЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator АдрИнЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<АдрИнЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static АдрИнЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения об адресе за пределами территории РФ, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public АдрИнЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Код страны
        /// </para>
        /// <para>
        /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ОКСМ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ОКСМ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ОКСМ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование страны
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимСтран
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимСтран", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимСтран", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Адрес
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string АдрИн
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("АдрИн", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("АдрИн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("АдрИнЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<АдрИнЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения об адресе в РФ, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class АдрРФЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator АдрРФЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<АдрРФЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static АдрРФЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("Регион", "")),
                new NamedContentModelEntity(XName.Get("Район", "")),
                new NamedContentModelEntity(XName.Get("Город", "")),
                new NamedContentModelEntity(XName.Get("НаселПункт", "")),
                new NamedContentModelEntity(XName.Get("Улица", "")),
                new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения об адресе в РФ, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public АдрРФЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// Субъект Российской Федерации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public РегионТип Регион
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Регион", ""));
                return ((РегионТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("Регион", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Район (улус и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public РайонТип Район
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Район", ""));
                return ((РайонТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("Район", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Город (волость и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГородТип Город
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Город", ""));
                return ((ГородТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("Город", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Населенный пункт (село и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public НаселПунктТип НаселПункт
        {
            get
            {
                XElement x = this.GetElement(XName.Get("НаселПункт", ""));
                return ((НаселПунктТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("НаселПункт", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Улица (проспект, 
        ///переулок и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public УлицаТип Улица
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Улица", ""));
                return ((УлицаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("Улица", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях  
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Регион, Район?, Город?, НаселПункт?, Улица?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Индекс
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Индекс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Индекс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Индекс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Код субъекта Российской Федерации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодРегион
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодРегион", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Код адреса по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодАдрКладр
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодАдрКладр", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодАдрКладр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дом (владение и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Дом
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дом", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Дом", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Корпус (строение и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Корпус
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Корпус", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Корпус", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Квартира (офис и т.п.)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Кварт
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Кварт", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Кварт", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("АдрРФЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<АдрРФЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Регион", ""), typeof(РегионТип));
            localElementDictionary.Add(XName.Get("Район", ""), typeof(РайонТип));
            localElementDictionary.Add(XName.Get("Город", ""), typeof(ГородТип));
            localElementDictionary.Add(XName.Get("НаселПункт", ""), typeof(НаселПунктТип));
            localElementDictionary.Add(XName.Get("Улица", ""), typeof(УлицаТип));
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведенияо о адресообразующем элементе город
    /// </para>
    /// </summary>
    public partial class ГородТип : XTypedElement, IXMetaData
    {

        public static explicit operator ГородТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ГородТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведенияо о адресообразующем элементе город
        /// </para>
        /// </summary>
        public ГородТип()
        {
        }

        /// <summary>
        /// <para>
        /// Тип элемента город (волость и т.п.)
        /// </para>
        /// <para>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России  (КЛАДР)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ТипГород
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипГород", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ТипГород", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование (элемент город) 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимГород
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимГород", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимГород", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ГородТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ГородТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// ГРН и дата внесения записи в ЕГРЮЛ
    /// </para>
    /// </summary>
    public partial class ГРНДатаТип : XTypedElement, IXMetaData
    {

        public static explicit operator ГРНДатаТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ГРНДатаТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения записи в ЕГРЮЛ
        /// </para>
        /// </summary>
        public ГРНДатаТип()
        {
        }

        /// <summary>
        /// <para>
        /// Государственный регистрационный номер записи ЕГРЮЛ
        /// </para>
        /// <para>
        /// Может отсутствовать, если запись в ЕГРЮЛ вносилась без присвоения государственного регистрационного номера
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ГРН
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ГРН", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата внесения записи в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime ДатаЗаписи
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаЗаписи", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаЗаписи", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ГРНДатаТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ГРНДатаТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Доля в уставном капитале (складочном капитале, уставном фонде, паевом фонде), внесенная в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (РазмерДоли?, ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class ДоляУстКапЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ДоляУстКапЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ДоляУстКапЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ДоляУстКапЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("РазмерДоли", "")),
                new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Доля в уставном капитале (складочном капитале, уставном фонде, паевом фонде), внесенная в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (РазмерДоли?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ДоляУстКапЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// Размер доли (в процентах или в виде дроби - десятичной или простой) 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РазмерДоли?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public РазмерДолиLocalType РазмерДоли
        {
            get
            {
                XElement x = this.GetElement(XName.Get("РазмерДоли", ""));
                return ((РазмерДолиLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("РазмерДоли", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (РазмерДоли?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РазмерДоли?, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Номинальная стоимость доли в рублях
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal НоминСтоим
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НоминСтоим", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НоминСтоим", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ДоляУстКапЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ДоляУстКапЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("РазмерДоли", ""), typeof(РазмерДолиLocalType));
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Процент | ДробДесят | ДробПрост)
        /// </para>
        /// </summary>
        public partial class РазмерДолиLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator РазмерДолиLocalType(XElement xe)
            {
                return XTypedServices.ToXTypedElement<РазмерДолиLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static РазмерДолиLocalType()
            {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("Процент", "")),
                    new NamedContentModelEntity(XName.Get("ДробДесят", "")),
                    new NamedContentModelEntity(XName.Get("ДробПрост", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Процент | ДробДесят | ДробПрост)
            /// </para>
            /// </summary>
            public РазмерДолиLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Размер доли в процентах
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Процент | ДробДесят | ДробПрост)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> Процент
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Процент", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("Процент", ""), value, "Процент", ПроцентLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Размер доли в десятичных дробях
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Процент | ДробДесят | ДробПрост)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> ДробДесят
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ДробДесят", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetElementWithValidation(XName.Get("ДробДесят", ""), value, "ДробДесят", ДробДесятLocalType.TypeDefinition);
                }
            }

            /// <summary>
            /// <para>
            /// Размер доли в простых дробях
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Процент | ДробДесят | ДробПрост)
            /// </para>
            /// </summary>
            public ДробьТип ДробПрост
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ДробПрост", ""));
                    return ((ДробьТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ДробПрост", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("РазмерДоли", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<РазмерДолиLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Процент", ""), typeof(decimal));
                localElementDictionary.Add(XName.Get("ДробДесят", ""), typeof(decimal));
                localElementDictionary.Add(XName.Get("ДробПрост", ""), typeof(ДробьТип));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            private class ПроцентLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                    XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal),
                    new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3328)), null, 15, 0, null, null, 0, null, 0m, 0, null, 18, XmlSchemaWhiteSpace.Collapse));

                private ПроцентLocalType()
                {
                }
            }

            private class ДробДесятLocalType
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
                    XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal),
                    new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3328)), null, 15, 0, null, null, 0, null, 0m, 0, null, 16, XmlSchemaWhiteSpace.Collapse));

                private ДробДесятLocalType()
                {
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// Представление простой дроби
    /// </para>
    /// </summary>
    public partial class ДробьТип : XTypedElement, IXMetaData
    {

        public static explicit operator ДробьТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ДробьТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Представление простой дроби
        /// </para>
        /// </summary>
        public ДробьТип()
        {
        }

        /// <summary>
        /// <para>
        /// Числитель простой дроби
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal Числит
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Числит", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Числит", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Знаменатель простой дроби
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal Знаменат
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Знаменат", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Знаменат", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ДробьТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ДробьТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Идентификатор записи, ГРН (при наличии) и дата внесения записи в ЕГРЮЛ
    /// </para>
    /// </summary>
    public partial class ИдГРНДатаТип : XTypedElement, IXMetaData
    {

        public static explicit operator ИдГРНДатаТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ИдГРНДатаТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Идентификатор записи, ГРН (при наличии) и дата внесения записи в ЕГРЮЛ
        /// </para>
        /// </summary>
        public ИдГРНДатаТип()
        {
        }

        /// <summary>
        /// <para>
        /// Системный идентификатор записи
        /// </para>
        /// <para>
        /// При наличии государственного регистрационного номера записи может совпадать с этим номером
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal ИдЗап
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИдЗап", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ИдЗап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Государственный регистрационный номер записи
        /// </para>
        /// <para>
        /// Может отсутствовать, если запись в ЕГРЮЛ внесена без присвоения государственного регистрационного номера
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ГРН
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ГРН", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата внесения записи в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime ДатаЗап
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаЗап", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаЗап", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ИдГРНДатаТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ИдГРНДатаТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведенияо о адресообразующем элементе населенный пункт
    /// </para>
    /// </summary>
    public partial class НаселПунктТип : XTypedElement, IXMetaData
    {

        public static explicit operator НаселПунктТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<НаселПунктТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведенияо о адресообразующем элементе населенный пункт
        /// </para>
        /// </summary>
        public НаселПунктТип()
        {
        }

        /// <summary>
        /// <para>
        /// Тип элемента населенный пункт (село и т.п.)
        /// </para>
        /// <para>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ТипНаселПункт
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипНаселПункт", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ТипНаселПункт", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование (элемент населенный пункт)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимНаселПункт
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимНаселПункт", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимНаселПункт", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("НаселПунктТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<НаселПунктТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведенияо о адресообразующем элементе район
    /// </para>
    /// </summary>
    public partial class РайонТип : XTypedElement, IXMetaData
    {

        public static explicit operator РайонТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<РайонТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведенияо о адресообразующем элементе район
        /// </para>
        /// </summary>
        public РайонТип()
        {
        }

        /// <summary>
        /// <para>
        /// Тип элемента район (улус и т.п.)
        /// </para>
        /// <para>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России  (КЛАДР)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ТипРайон
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипРайон", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ТипРайон", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование (элемент район)  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимРайон
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимРайон", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимРайон", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("РайонТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<РайонТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о адресообразующем элементе регион
    /// </para>
    /// </summary>
    public partial class РегионТип : XTypedElement, IXMetaData
    {

        public static explicit operator РегионТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<РегионТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о адресообразующем элементе регион
        /// </para>
        /// </summary>
        public РегионТип()
        {
        }

        /// <summary>
        /// <para>
        /// Тип элемента регион (республика, край и т.п.)
        /// </para>
        /// <para>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России  (КЛАДР)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ТипРегион
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипРегион", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ТипРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование (элемент регион)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимРегион
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимРегион", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимРегион", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("РегионТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<РегионТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о решении суда
    /// </para>
    /// </summary>
    public partial class РешСудТип : XTypedElement, IXMetaData
    {

        public static explicit operator РешСудТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<РешСудТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о решении суда
        /// </para>
        /// </summary>
        public РешСудТип()
        {
        }

        /// <summary>
        /// <para>
        /// Наименование суда, которым принято решение
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимСуда
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимСуда", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимСуда", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Номер решения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Номер
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Номер", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Номер", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата решения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime Дата
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дата", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Дата", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("РешСудТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<РешСудТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о наименовании обособленного подразделения (филиала/представительства)
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвНаимПодраздТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвНаимПодраздТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвНаимПодраздТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвНаимПодраздТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о наименовании обособленного подразделения (филиала/представительства)
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвНаимПодраздТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимПолн
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимПолн", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвНаимПодраздТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвНаимПодраздТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о контактном телефоне
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвНомТелТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвНомТелТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвНомТелТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвНомТелТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о контактном телефоне
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвНомТелТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Контактный телефон
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НомТел
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НомТел", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НомТел", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвНомТелТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвНомТелТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о налоговом органе, в котором юридическое лицо или обособленное подразделение состоит (состояло) на учете
    /// </para>
    /// </summary>
    public partial class СвНОТип : XTypedElement, IXMetaData
    {

        public static explicit operator СвНОТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвНОТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о налоговом органе, в котором юридическое лицо или обособленное подразделение состоит (состояло) на учете
        /// </para>
        /// </summary>
        public СвНОТип()
        {
        }

        /// <summary>
        /// <para>
        /// Код органа по справочнику СОНО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодНО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодНО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование налогового органа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимНО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимНО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвНОТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвНОТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о нотариальном удостоверении договора залога
    /// </para>
    /// <para>
    /// Regular expression: (СвНотариус)
    /// </para>
    /// </summary>
    public partial class СвНотУдДогЗалТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвНотУдДогЗалТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвНотУдДогЗалТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвНотУдДогЗалТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("СвНотариус", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о нотариальном удостоверении договора залога
        /// </para>
        /// <para>
        /// Regular expression: (СвНотариус)
        /// </para>
        /// </summary>
        public СвНотУдДогЗалТип()
        {
        }

        /// <summary>
        /// <para>
        /// ФИО и (при наличии) ИНН нотариуса, удостоверившего договор залога
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (СвНотариус)
        /// </para>
        /// </summary>
        public СвФЛЕГРЮЛТип СвНотариус
        {
            get
            {
                XElement x = this.GetElement(XName.Get("СвНотариус", ""));
                return ((СвФЛЕГРЮЛТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("СвНотариус", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Номер договора залога
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Номер
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Номер", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Номер", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата договора залога
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime Дата
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дата", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Дата", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвНотУдДогЗалТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвНотУдДогЗалТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("СвНотариус", ""), typeof(СвФЛЕГРЮЛТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения об обременении доли участника, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
    /// </para>
    /// </summary>
    public partial class СвОбремТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвОбремТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвОбремТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвОбремТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("РешСуд", "")),
                new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")),
                new NamedContentModelEntity(XName.Get("СвЗалогДержФЛ", "")),
                new NamedContentModelEntity(XName.Get("СвЗалогДержЮЛ", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения об обременении доли участника, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public СвОбремТип()
        {
        }

        /// <summary>
        /// <para>
        /// Сведения о решении судебного органа, по которому на долю учредителя (участника) наложено обременение
        /// </para>
        /// <para>
        /// Формируется в случае, если обременение на долю учредителя (участника) наложено судебным решением
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public РешСудТип РешСуд
        {
            get
            {
                XElement x = this.GetElement(XName.Get("РешСуд", ""));
                return ((РешСудТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("РешСуд", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Сведения о залогодержателе - ФЛ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public СвЗалогДержФЛLocalType СвЗалогДержФЛ
        {
            get
            {
                XElement x = this.GetElement(XName.Get("СвЗалогДержФЛ", ""));
                return ((СвЗалогДержФЛLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("СвЗалогДержФЛ", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Сведения о залогодержателе - ЮЛ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (РешСуд?, ГРНДата, ГРНДатаИспр?, СвЗалогДержФЛ?, СвЗалогДержЮЛ?)
        /// </para>
        /// </summary>
        public СвЗалогДержЮЛLocalType СвЗалогДержЮЛ
        {
            get
            {
                XElement x = this.GetElement(XName.Get("СвЗалогДержЮЛ", ""));
                return ((СвЗалогДержЮЛLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("СвЗалогДержЮЛ", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Вид обременения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ВидОбрем
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ВидОбрем", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ВидОбрем", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Срок обременения или порядок определения срока
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string СрокОбременения
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("СрокОбременения", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("СрокОбременения", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвОбремТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвОбремТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("РешСуд", ""), typeof(РешСудТип));
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("СвЗалогДержФЛ", ""), typeof(СвЗалогДержФЛLocalType));
            localElementDictionary.Add(XName.Get("СвЗалогДержЮЛ", ""), typeof(СвЗалогДержЮЛLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
        /// </para>
        /// </summary>
        public partial class СвЗалогДержФЛLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator СвЗалогДержФЛLocalType(XElement xe)
            {
                return XTypedServices.ToXTypedElement<СвЗалогДержФЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static СвЗалогДержФЛLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                    new NamedContentModelEntity(XName.Get("СвФЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвРождФЛ", "")),
                    new NamedContentModelEntity(XName.Get("УдЛичнФЛ", "")),
                    new NamedContentModelEntity(XName.Get("АдресМЖРФ", "")),
                    new NamedContentModelEntity(XName.Get("АдрМЖИн", "")),
                    new NamedContentModelEntity(XName.Get("СвНотУдДогЗал", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвЗалогДержФЛLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public ГРНДатаТип ГРНДатаПерв
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                    return ((ГРНДатаТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о ФИО и (при наличии) ИНН ФЛ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвФЛЕГРЮЛТип СвФЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвФЛ", ""));
                    return ((СвФЛЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвФЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о рождении ФЛ
            /// </para>
            /// <para>
            /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвРождЕГРЮЛТип СвРождФЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвРождФЛ", ""));
                    return ((СвРождЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвРождФЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о документе, удостоверяющем личность
            /// </para>
            /// <para>
            /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public УдЛичнЕГРЮЛТип УдЛичнФЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("УдЛичнФЛ", ""));
                    return ((УдЛичнЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("УдЛичнФЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об адресе места жительства в Российской Федерации
            /// </para>
            /// <para>
            /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public АдрРФЕГРЮЛТип АдресМЖРФ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("АдресМЖРФ", ""));
                    return ((АдрРФЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("АдресМЖРФ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения об адресе места жительства за пределами территории Российской Федерации
            /// </para>
            /// <para>
            /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public АдрИнЕГРЮЛТип АдрМЖИн
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("АдрМЖИн", ""));
                    return ((АдрИнЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("АдрМЖИн", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о нотариальном удостоверении договора залога
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, СвФЛ, СвРождФЛ?, УдЛичнФЛ?, АдресМЖРФ?, АдрМЖИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвНотУдДогЗалТип СвНотУдДогЗал
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвНотУдДогЗал", ""));
                    return ((СвНотУдДогЗалТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвНотУдДогЗал", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("СвЗалогДержФЛ", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<СвЗалогДержФЛLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                localElementDictionary.Add(XName.Get("СвФЛ", ""), typeof(СвФЛЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("СвРождФЛ", ""), typeof(СвРождЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("УдЛичнФЛ", ""), typeof(УдЛичнЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("АдресМЖРФ", ""), typeof(АдрРФЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("АдрМЖИн", ""), typeof(АдрИнЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("СвНотУдДогЗал", ""), typeof(СвНотУдДогЗалТип));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
        /// </para>
        /// </summary>
        public partial class СвЗалогДержЮЛLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator СвЗалогДержЮЛLocalType(XElement xe)
            {
                return XTypedServices.ToXTypedElement<СвЗалогДержЮЛLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static СвЗалогДержЮЛLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("ГРНДатаПерв", "")),
                    new NamedContentModelEntity(XName.Get("НаимИННЮЛ", "")),
                    new NamedContentModelEntity(XName.Get("СвРегИн", "")),
                    new NamedContentModelEntity(XName.Get("СвНотУдДогЗал", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвЗалогДержЮЛLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public ГРНДатаТип ГРНДатаПерв
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ГРНДатаПерв", ""));
                    return ((ГРНДатаТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ГРНДатаПерв", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвЮЛЕГРЮЛТип НаимИННЮЛ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("НаимИННЮЛ", ""));
                    return ((СвЮЛЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("НаимИННЮЛ", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о регистрации в стране происхождения
            /// </para>
            /// <para>
            /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении управляющей организации - иностранного ЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвРегИнЮЛЕГРЮЛТип СвРегИн
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвРегИн", ""));
                    return ((СвРегИнЮЛЕГРЮЛТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвРегИн", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Сведения о нотариальном удостоверении договора залога
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ГРНДатаПерв?, НаимИННЮЛ, СвРегИн?, СвНотУдДогЗал?)
            /// </para>
            /// </summary>
            public СвНотУдДогЗалТип СвНотУдДогЗал
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("СвНотУдДогЗал", ""));
                    return ((СвНотУдДогЗалТип)(x));
                }
                set
                {
                    this.SetElement(XName.Get("СвНотУдДогЗал", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("СвЗалогДержЮЛ", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<СвЗалогДержЮЛLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ГРНДатаПерв", ""), typeof(ГРНДатаТип));
                localElementDictionary.Add(XName.Get("НаимИННЮЛ", ""), typeof(СвЮЛЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("СвРегИн", ""), typeof(СвРегИнЮЛЕГРЮЛТип));
                localElementDictionary.Add(XName.Get("СвНотУдДогЗал", ""), typeof(СвНотУдДогЗалТип));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о виде деятельности, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвОКВЭДТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвОКВЭДТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвОКВЭДТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвОКВЭДТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о виде деятельности, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвОКВЭДТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Код по Общероссийскому классификатору видов экономической деятельности
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодОКВЭД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодОКВЭД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодОКВЭД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование вида деятельности по Общероссийскому классификатору видов экономической деятельности
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимОКВЭД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимОКВЭД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимОКВЭД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Признак версии Общероссийского классификатора видов экономической деятельности
        /// </para>
        /// <para>
        ///  , где: 				
        ///				2001 – если код соответствует версии ОКВЭД ОК 029-2001 (КДЕС Ред. 1);
        ///2014 – если код соответствует версии ОКВЭД ОК 029-2014 (КДЕС Ред. 2).
        ///Отсутствие данного атрибута в файле означает, что при внесении кода ОКВЭД использовался классификатор ОК 029-2001 (КДЕС Ред. 1)
        ///
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ПрВерсОКВЭД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ПрВерсОКВЭД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ПрВерсОКВЭД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвОКВЭДТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвОКВЭДТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о регистрации иностранного ЮЛ в стране происхождения, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвРегИнЮЛЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвРегИнЮЛЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвРегИнЮЛЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвРегИнЮЛЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о регистрации иностранного ЮЛ в стране происхождения, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Код страны происхождения
        /// </para>
        /// <para>
        /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ОКСМ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ОКСМ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ОКСМ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование страны происхождения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимСтран
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимСтран", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимСтран", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата регистрации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> ДатаРег
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаРег", ""));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаРег", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Регистрационный номер
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string РегНомер
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("РегНомер", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("РегНомер", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование регистрирующего органа
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string НаимРегОрг
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимРегОрг", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимРегОрг", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Адрес (место нахождения) в стране происхождения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string АдрСтр
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("АдрСтр", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("АдрСтр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвРегИнЮЛЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвРегИнЮЛЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о регистрирующем органе
    /// </para>
    /// </summary>
    public partial class СвРегОргТип : XTypedElement, IXMetaData
    {

        public static explicit operator СвРегОргТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвРегОргТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о регистрирующем органе
        /// </para>
        /// </summary>
        public СвРегОргТип()
        {
        }

        /// <summary>
        /// <para>
        /// Код органа по справочнику СОНО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодНО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодНО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование регистрирующего (налогового) органа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимНО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимНО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимНО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвРегОргТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвРегОргТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о рождении ФЛ, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвРождЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвРождЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвРождЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвРождЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о рождении ФЛ, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвРождЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Дата рождения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime ДатаРожд
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаРожд", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Место рождения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string МестоРожд
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("МестоРожд", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("МестоРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Признак полноты представляемой даты рождения физического лица
        /// </para>
        /// <para>
        /// 
        ///											, где:
        ///											1 – только год (сведения о месяце и дне в указанном месяце отсутствуют);
        ///2 – только месяц и код (сведения о дне в указанном месяце отсутствуют);
        ///3 – полная дата.
        ///Отсутствие указанного реквизита означает полную дату рождения (соответствует значению ПрДатаРожд=3)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ПрДатаРожд
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ПрДатаРожд", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ПрДатаРожд", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвРождЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвРождЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения об учете в налоговом органе по месту нахождения обособленного подразделения (филиала/представительства)
    /// </para>
    /// <para>
    /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвУчетНОПодраздТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвУчетНОПодраздТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвУчетНОПодраздТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвУчетНОПодраздТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("СвНО", "")),
                new NamedContentModelEntity(XName.Get("ГРНДата", "")),
                new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения об учете в налоговом органе по месту нахождения обособленного подразделения (филиала/представительства)
        /// </para>
        /// <para>
        /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвУчетНОПодраздТип()
        {
        }

        /// <summary>
        /// <para>
        /// Сведения о налоговом органе по месту нахождения филиала/представительства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвНОТип СвНО
        {
            get
            {
                XElement x = this.GetElement(XName.Get("СвНО", ""));
                return ((СвНОТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("СвНО", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (СвНО, ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// КПП филиала/представительства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КПП
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КПП", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КПП", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата постановки на учет в налоговом органе
        /// </para>
        /// <para>
        /// Для ЮЛ созданных после 01.07.2002 г. является датой регистрации ЮЛ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime ДатаПостУч
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаПостУч", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаПостУч", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвУчетНОПодраздТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвУчетНОПодраздТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("СвНО", ""), typeof(СвНОТип));
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о ФИО и (при наличии) ИНН ФЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвФЛЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвФЛЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвФЛЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвФЛЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвФЛЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Фамилия
        /// </para>
        /// <para>
        /// Является обязательным при отсутствии имени ФЛ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Фамилия
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Фамилия", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Фамилия", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Имя
        /// </para>
        /// <para>
        /// Является обязательным при отсутствии фамилии ФЛ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Имя", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Отчество
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Отчество
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Отчество", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Отчество", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// ИНН ФЛ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИННФЛ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИННФЛ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ИННФЛ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвФЛЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвФЛЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о наименовании и (при наличии) ИНН и ОГРН ЮЛ - учредителя (участника), управляющей организации, залогодержателя, управляющего долей участника, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class СвЮЛЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator СвЮЛЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СвЮЛЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СвЮЛЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о наименовании и (при наличии) ИНН и ОГРН ЮЛ - учредителя (участника), управляющей организации, залогодержателя, управляющего долей участника, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public СвЮЛЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Основной государственный регистрационный номер юридического лица
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ОГРН
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ОГРН", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ОГРН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// ИНН юридического лица
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИНН
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Полное наименование юридического лица
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимЮЛПолн
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимЮЛПолн", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимЮЛПолн", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("СвЮЛЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СвЮЛЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о документе, удостоверяющем личность, внесенные в ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (ГРНДата, ГРНДатаИспр?)
    /// </para>
    /// </summary>
    public partial class УдЛичнЕГРЮЛТип : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator УдЛичнЕГРЮЛТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<УдЛичнЕГРЮЛТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static УдЛичнЕГРЮЛТип()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ГРНДата", "")), new NamedContentModelEntity(XName.Get("ГРНДатаИспр", "")));
        }

        /// <summary>
        /// <para>
        /// Сведения о документе, удостоверяющем личность, внесенные в ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public УдЛичнЕГРЮЛТип()
        {
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДата", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДата", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях 
        /// </para>
        /// <para>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ГРНДата, ГРНДатаИспр?)
        /// </para>
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ГРНДатаИспр", ""));
                return ((ГРНДатаТип)(x));
            }
            set
            {
                this.SetElement(XName.Get("ГРНДатаИспр", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Код вида документа по справочнику СПДУЛ 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string КодВидДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодВидДок", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодВидДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование вида документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимДок", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Серия и номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string СерНомДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("СерНомДок", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("СерНомДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Дата выдачи
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> ДатаДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДатаДок", ""));
                if ((x == null))
                {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ДатаДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Кем выдан
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ВыдДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ВыдДок", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ВыдДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Код подразделения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодВыдДок
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодВыдДок", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("КодВыдДок", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("УдЛичнЕГРЮЛТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<УдЛичнЕГРЮЛТип>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ГРНДата", ""), typeof(ГРНДатаТип));
            localElementDictionary.Add(XName.Get("ГРНДатаИспр", ""), typeof(ГРНДатаТип));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Сведения о адресообразующем элементе улица
    /// </para>
    /// </summary>
    public partial class УлицаТип : XTypedElement, IXMetaData
    {

        public static explicit operator УлицаТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<УлицаТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Сведения о адресообразующем элементе улица
        /// </para>
        /// </summary>
        public УлицаТип()
        {
        }

        /// <summary>
        /// <para>
        /// Тип адресного объекта улица (проспект, 
        ///переулок и т.п.)
        /// </para>
        /// <para>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России  (КЛАДР)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ТипУлица
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипУлица", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("ТипУлица", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Наименование (элемент улица) 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string НаимУлица
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("НаимУлица", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("НаимУлица", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("УлицаТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<УлицаТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Фамилия, имя, отчество
    /// </para>
    /// </summary>
    public partial class ФИОТип : XTypedElement, IXMetaData
    {

        public static explicit operator ФИОТип(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ФИОТип>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        /// <summary>
        /// <para>
        /// Фамилия, имя, отчество
        /// </para>
        /// </summary>
        public ФИОТип()
        {
        }

        /// <summary>
        /// <para>
        /// Фамилия
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Фамилия
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Фамилия", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Фамилия", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Имя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Имя
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Имя", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Отчество
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Отчество
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Отчество", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Отчество", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ФИОТип", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ФИОТип>(this);
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Идентификационный номер налогоплательщика - физического лица
    /// </para>
    /// </summary>
    public sealed class ИННФЛТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                12,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ИННФЛТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Идентификационный номер налогоплательщика - организации
    /// </para>
    /// </summary>
    public sealed class ИННЮЛТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                10,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{8}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ИННЮЛТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Код причины постановки на учет (КПП) 
    /// </para>
    /// </summary>
    public sealed class КППТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                9,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})([0-9]{2})([0-9A-F]{2})([0-9]{3})" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private КППТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Основной  государственный регистрационный номер юридического лица  
    /// </para>
    /// </summary>
    public sealed class ОГРНТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                13,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{13}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ОГРНТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Основной государственный регистрационный номер индивидуального предпринимателя
    /// </para>
    /// </summary>
    public sealed class ОГРНИПТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                15,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{15}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ОГРНИПТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Код из Общероссийского классификатора видов экономической деятельности
    /// </para>
    /// </summary>
    public sealed class ОКВЭДТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(14)),
                null,
                0,
                0,
                null,
                null,
                8,
                null,
                null,
                2,
                new string[] { "[0-9]{2}", "[0-9]{2}\\.[0-9]{1}", "[0-9]{2}\\.[0-9]{2}", "[0-9]{2}\\.[0-9]{2}\\.[0-9]{1}", "[0-9]{2}\\.[0-9]{2}\\.[0-9]{2}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ОКВЭДТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Код из Общероссийского классификатора стран мира
    /// </para>
    /// </summary>
    public sealed class ОКСМТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                3,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{3}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private ОКСМТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Коды из Классификатора системы обозначений налоговых органов
    /// </para>
    /// </summary>
    public sealed class СОНОТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                4,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{4}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private СОНОТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Коды Справочника видов документов, удостоверяющих личность налогоплательщика
    /// </para>
    /// </summary>
    public sealed class СПДУЛТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                2,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{2}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private СПДУЛТип()
        {
        }
    }

    /// <summary>
    /// <para>
    /// Код из Справочника субъектов Российской Федерации 
    /// </para>
    /// </summary>
    public sealed class CCРФТип
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(
            XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String),
            new Xml.Schema.Linq.RestrictionFacets(
                ((Xml.Schema.Linq.RestrictionFlags)(9)),
                null,
                0,
                2,
                null,
                null,
                0,
                null,
                null,
                0,
                new string[] { "[0-9]{2}" },
                0,
                XmlSchemaWhiteSpace.Preserve));

        private CCРФТип()
        {
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildTypeDictionary();
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return typeDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildTypeDictionary()
        {
            typeDictionary.Add(XName.Get("ВидЗапТип", ""), typeof(ВидЗапТип));
            typeDictionary.Add(XName.Get("АдрИнЕГРЮЛТип", ""), typeof(АдрИнЕГРЮЛТип));
            typeDictionary.Add(XName.Get("АдрРФЕГРЮЛТип", ""), typeof(АдрРФЕГРЮЛТип));
            typeDictionary.Add(XName.Get("ГородТип", ""), typeof(ГородТип));
            typeDictionary.Add(XName.Get("ГРНДатаТип", ""), typeof(ГРНДатаТип));
            typeDictionary.Add(XName.Get("ДоляУстКапЕГРЮЛТип", ""), typeof(ДоляУстКапЕГРЮЛТип));
            typeDictionary.Add(XName.Get("ДробьТип", ""), typeof(ДробьТип));
            typeDictionary.Add(XName.Get("ИдГРНДатаТип", ""), typeof(ИдГРНДатаТип));
            typeDictionary.Add(XName.Get("НаселПунктТип", ""), typeof(НаселПунктТип));
            typeDictionary.Add(XName.Get("РайонТип", ""), typeof(РайонТип));
            typeDictionary.Add(XName.Get("РегионТип", ""), typeof(РегионТип));
            typeDictionary.Add(XName.Get("РешСудТип", ""), typeof(РешСудТип));
            typeDictionary.Add(XName.Get("СвНаимПодраздТип", ""), typeof(СвНаимПодраздТип));
            typeDictionary.Add(XName.Get("СвНомТелТип", ""), typeof(СвНомТелТип));
            typeDictionary.Add(XName.Get("СвНОТип", ""), typeof(СвНОТип));
            typeDictionary.Add(XName.Get("СвНотУдДогЗалТип", ""), typeof(СвНотУдДогЗалТип));
            typeDictionary.Add(XName.Get("СвОбремТип", ""), typeof(СвОбремТип));
            typeDictionary.Add(XName.Get("СвОКВЭДТип", ""), typeof(СвОКВЭДТип));
            typeDictionary.Add(XName.Get("СвРегИнЮЛЕГРЮЛТип", ""), typeof(СвРегИнЮЛЕГРЮЛТип));
            typeDictionary.Add(XName.Get("СвРегОргТип", ""), typeof(СвРегОргТип));
            typeDictionary.Add(XName.Get("СвРождЕГРЮЛТип", ""), typeof(СвРождЕГРЮЛТип));
            typeDictionary.Add(XName.Get("СвУчетНОПодраздТип", ""), typeof(СвУчетНОПодраздТип));
            typeDictionary.Add(XName.Get("СвФЛЕГРЮЛТип", ""), typeof(СвФЛЕГРЮЛТип));
            typeDictionary.Add(XName.Get("СвЮЛЕГРЮЛТип", ""), typeof(СвЮЛЕГРЮЛТип));
            typeDictionary.Add(XName.Get("УдЛичнЕГРЮЛТип", ""), typeof(УдЛичнЕГРЮЛТип));
            typeDictionary.Add(XName.Get("УлицаТип", ""), typeof(УлицаТип));
            typeDictionary.Add(XName.Get("ФИОТип", ""), typeof(ФИОТип));
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("EGRUL", ""), typeof(EGRUL));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("EGRUL", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public EGRUL EGRUL
        {
            get
            {
                return rootObject as EGRUL;
            }
        }

        private XRootNamespace()
        {
        }

        public XRootNamespace(EGRUL root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public EGRUL EGRUL
        {
            get
            {
                return rootObject as EGRUL;
            }
        }

        private XRoot()
        {
        }

        public XRoot(EGRUL root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}