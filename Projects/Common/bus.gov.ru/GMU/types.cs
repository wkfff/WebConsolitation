//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8745
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bus.gov.ru.types.Item1
{
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    /// <summary>
    /// <para>
    /// Операции с целевыми средствами из бюджета
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
    /// </para>
    /// </summary>
    public partial class actionGrantType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fundsType> capitalConstructionFundsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fundsType> realAssetsFundsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherGrantFundsLocalType> otherGrantFundsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator actionGrantType(XElement xe) { return XTypedServices.ToXTypedElement<actionGrantType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static actionGrantType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planBudgetaryFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("capitalConstructionFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("realAssetsFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherGrantFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Операции с целевыми средствами из бюджета
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public actionGrantType() {
        }
        
        /// <summary>
        /// <para>
        /// Финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма планируемых поступлений на осуществление бюджетных инвестиций
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public planBudgetaryFundsLocalType planBudgetaryFunds {
            get {
                XElement x = this.GetElement(XName.Get("planBudgetaryFunds", "http://bus.gov.ru/types/1"));
                return ((planBudgetaryFundsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("planBudgetaryFunds", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Информация об объектах капитального строительства
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public IList<fundsType> capitalConstructionFunds {
            get {
                if ((this.capitalConstructionFundsField == null)) {
                    this.capitalConstructionFundsField = new XTypedList<fundsType>(this, LinqToXsdTypeManager.Instance, XName.Get("capitalConstructionFunds", "http://bus.gov.ru/types/1"));
                }
                return this.capitalConstructionFundsField;
            }
            set {
                if ((value == null)) {
                    this.capitalConstructionFundsField = null;
                }
                else {
                    if ((this.capitalConstructionFundsField == null)) {
                        this.capitalConstructionFundsField = XTypedList<fundsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("capitalConstructionFunds", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<fundsType>(this.capitalConstructionFundsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Информация об объектах приобретаемого недвижимого имущества
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public IList<fundsType> realAssetsFunds {
            get {
                if ((this.realAssetsFundsField == null)) {
                    this.realAssetsFundsField = new XTypedList<fundsType>(this, LinqToXsdTypeManager.Instance, XName.Get("realAssetsFunds", "http://bus.gov.ru/types/1"));
                }
                return this.realAssetsFundsField;
            }
            set {
                if ((value == null)) {
                    this.realAssetsFundsField = null;
                }
                else {
                    if ((this.realAssetsFundsField == null)) {
                        this.realAssetsFundsField = XTypedList<fundsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("realAssetsFunds", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<fundsType>(this.realAssetsFundsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Информация об операциях с субсидиями на иные цели
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.actionGrantType.otherGrantFundsLocalType> otherGrantFunds {
            get {
                if ((this.otherGrantFundsField == null)) {
                    this.otherGrantFundsField = new XTypedList<otherGrantFundsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("otherGrantFunds", "http://bus.gov.ru/types/1"));
                }
                return this.otherGrantFundsField;
            }
            set {
                if ((value == null)) {
                    this.otherGrantFundsField = null;
                }
                else {
                    if ((this.otherGrantFundsField == null)) {
                        this.otherGrantFundsField = XTypedList<otherGrantFundsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("otherGrantFunds", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<otherGrantFundsLocalType>(this.otherGrantFundsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planBudgetaryFunds, capitalConstructionFunds*, realAssetsFunds*, otherGrantFunds*, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("actionGrantType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<actionGrantType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planBudgetaryFunds", "http://bus.gov.ru/types/1"), typeof(planBudgetaryFundsLocalType));
            localElementDictionary.Add(XName.Get("capitalConstructionFunds", "http://bus.gov.ru/types/1"), typeof(fundsType));
            localElementDictionary.Add(XName.Get("realAssetsFunds", "http://bus.gov.ru/types/1"), typeof(fundsType));
            localElementDictionary.Add(XName.Get("otherGrantFunds", "http://bus.gov.ru/types/1"), typeof(otherGrantFundsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (capitalRealAssets, total)
        /// </para>
        /// </summary>
        public partial class planBudgetaryFundsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator planBudgetaryFundsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<planBudgetaryFundsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static planBudgetaryFundsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("capitalRealAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (capitalRealAssets, total)
            /// </para>
            /// </summary>
            public planBudgetaryFundsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// В объекты капитального строительства и приобретаемого недвижимого имущества
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (capitalRealAssets, total)
            /// </para>
            /// </summary>
            public decimal capitalRealAssets {
                get {
                    XElement x = this.GetElement(XName.Get("capitalRealAssets", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("capitalRealAssets", "http://bus.gov.ru/types/1"), value, "capitalRealAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Всего
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (capitalRealAssets, total)
            /// </para>
            /// </summary>
            public decimal total {
                get {
                    XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("planBudgetaryFunds", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<planBudgetaryFundsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("capitalRealAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, funds, code, kosgu?)
        /// </para>
        /// </summary>
        public partial class otherGrantFundsLocalType : global::bus.gov.ru.types.Item1.fundsType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherGrantFundsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherGrantFundsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherGrantFundsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("funds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kosgu", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, funds, code, kosgu?)
            /// </para>
            /// </summary>
            public otherGrantFundsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Код субсидии
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, funds, code, kosgu?)
            /// </para>
            /// </summary>
            public string code {
                get {
                    XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КОСГУ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (name, funds, code, kosgu?)
            /// </para>
            /// </summary>
            public refNsiKosguType kosgu {
                get {
                    XElement x = this.GetElement(XName.Get("kosgu", "http://bus.gov.ru/types/1"));
                    return ((refNsiKosguType)(x));
                }
                set {
                    this.SetElement(XName.Get("kosgu", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("otherGrantFunds", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherGrantFundsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("funds", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kosgu", "http://bus.gov.ru/types/1"), typeof(refNsiKosguType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class codeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 20, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private codeLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Результаты деятельности и использование имущества
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
    /// </para>
    /// </summary>
    public partial class activityResultType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator activityResultType(XElement xe) { return XTypedServices.ToXTypedElement<activityResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static activityResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("staff", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("result", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("assetsUse", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Результаты деятельности и использование имущества
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public activityResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Отчетный год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> reportYear {
            get {
                XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Штат сотрудников
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public staffLocalType staff {
            get {
                XElement x = this.GetElement(XName.Get("staff", "http://bus.gov.ru/types/1"));
                return ((staffLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("staff", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Результаты деятельности
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public resultLocalType result {
            get {
                XElement x = this.GetElement(XName.Get("result", "http://bus.gov.ru/types/1"));
                return ((resultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("result", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Использование имущества
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public assetsUseLocalType assetsUse {
            get {
                XElement x = this.GetElement(XName.Get("assetsUse", "http://bus.gov.ru/types/1"));
                return ((assetsUseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("assetsUse", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, staff, result, assetsUse, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("activityResultType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<activityResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("staff", "http://bus.gov.ru/types/1"), typeof(staffLocalType));
            localElementDictionary.Add(XName.Get("result", "http://bus.gov.ru/types/1"), typeof(resultLocalType));
            localElementDictionary.Add(XName.Get("assetsUse", "http://bus.gov.ru/types/1"), typeof(assetsUseLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (beginYear?, endYear, averageSalary)
        /// </para>
        /// </summary>
        public partial class staffLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator staffLocalType(XElement xe) { return XTypedServices.ToXTypedElement<staffLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static staffLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("beginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("averageSalary", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (beginYear?, endYear, averageSalary)
            /// </para>
            /// </summary>
            public staffLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Количество на начало года
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (beginYear?, endYear, averageSalary)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> beginYear {
                get {
                    XElement x = this.GetElement(XName.Get("beginYear", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("beginYear", "http://bus.gov.ru/types/1"), value, "beginYear", global::bus.gov.ru.types.Item1.nonNegativeDecimalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Количество на конец года
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (beginYear?, endYear, averageSalary)
            /// </para>
            /// </summary>
            public decimal endYear {
                get {
                    XElement x = this.GetElement(XName.Get("endYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("endYear", "http://bus.gov.ru/types/1"), value, "endYear", global::bus.gov.ru.types.Item1.nonNegativeDecimalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Средняя заработная плата
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (beginYear?, endYear, averageSalary)
            /// </para>
            /// </summary>
            public decimal averageSalary {
                get {
                    XElement x = this.GetElement(XName.Get("averageSalary", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("averageSalary", "http://bus.gov.ru/types/1"), value, "averageSalary", global::bus.gov.ru.types.Item1.nonNegativeDecimalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("staff", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<staffLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("beginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("endYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("averageSalary", "http://bus.gov.ru/types/1"), typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
        /// </para>
        /// </summary>
        public partial class resultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<serviceLocalType> serviceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<cashPaymentsLocalType> cashPaymentsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator resultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<resultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static resultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("damagesReparation", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonfinancialAssetsChange", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssetsChange", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("service", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("cashReceipts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("cashPayments", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public resultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Общая сумма требований на возмещение ущерба по недостачам и хищениям материальных ценностей, денежных средств, а так же порчи материальных ценностей
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> damagesReparation {
                get {
                    XElement x = this.GetElement(XName.Get("damagesReparation", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("damagesReparation", "http://bus.gov.ru/types/1"), value, "damagesReparation", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения об изменении балансовой стоимости нефинансовых активов за отчетный год
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public nonfinancialAssetsChangeLocalType nonfinancialAssetsChange {
                get {
                    XElement x = this.GetElement(XName.Get("nonfinancialAssetsChange", "http://bus.gov.ru/types/1"));
                    return ((nonfinancialAssetsChangeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("nonfinancialAssetsChange", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Изменение дебиторской и кредиторской задолженности за отчетный год
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public financialAssetsChangeLocalType financialAssetsChange {
                get {
                    XElement x = this.GetElement(XName.Get("financialAssetsChange", "http://bus.gov.ru/types/1"));
                    return ((financialAssetsChangeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("financialAssetsChange", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Услуга (работа)
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.activityResultType.resultLocalType.serviceLocalType> service {
                get {
                    if ((this.serviceField == null)) {
                        this.serviceField = new XTypedList<serviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", "http://bus.gov.ru/types/1"));
                    }
                    return this.serviceField;
                }
                set {
                    if ((value == null)) {
                        this.serviceField = null;
                    }
                    else {
                        if ((this.serviceField == null)) {
                            this.serviceField = XTypedList<serviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<serviceLocalType>(this.serviceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о кассовых поступлениях
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public cashReceiptsLocalType cashReceipts {
                get {
                    XElement x = this.GetElement(XName.Get("cashReceipts", "http://bus.gov.ru/types/1"));
                    return ((cashReceiptsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("cashReceipts", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о кассовых выплатах
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (damagesReparation?, nonfinancialAssetsChange?, financialAssetsChange?, service*, cashReceipts, cashPayments*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.activityResultType.resultLocalType.cashPaymentsLocalType> cashPayments {
                get {
                    if ((this.cashPaymentsField == null)) {
                        this.cashPaymentsField = new XTypedList<cashPaymentsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("cashPayments", "http://bus.gov.ru/types/1"));
                    }
                    return this.cashPaymentsField;
                }
                set {
                    if ((value == null)) {
                        this.cashPaymentsField = null;
                    }
                    else {
                        if ((this.cashPaymentsField == null)) {
                            this.cashPaymentsField = XTypedList<cashPaymentsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("cashPayments", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<cashPaymentsLocalType>(this.cashPaymentsField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("result", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<resultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("damagesReparation", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("nonfinancialAssetsChange", "http://bus.gov.ru/types/1"), typeof(nonfinancialAssetsChangeLocalType));
                localElementDictionary.Add(XName.Get("financialAssetsChange", "http://bus.gov.ru/types/1"), typeof(financialAssetsChangeLocalType));
                localElementDictionary.Add(XName.Get("service", "http://bus.gov.ru/types/1"), typeof(serviceLocalType));
                localElementDictionary.Add(XName.Get("cashReceipts", "http://bus.gov.ru/types/1"), typeof(cashReceiptsLocalType));
                localElementDictionary.Add(XName.Get("cashPayments", "http://bus.gov.ru/types/1"), typeof(cashPaymentsLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (realAssets, highValuePersonalAssets, total)
            /// </para>
            /// </summary>
            public partial class nonfinancialAssetsChangeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator nonfinancialAssetsChangeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonfinancialAssetsChangeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static nonfinancialAssetsChangeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("realAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public nonfinancialAssetsChangeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Недвижимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public changeIndexType realAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"));
                        return ((changeIndexType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Особо ценное движимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public changeIndexType highValuePersonalAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"));
                        return ((changeIndexType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public changeIndexType total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return ((changeIndexType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("nonfinancialAssetsChange", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<nonfinancialAssetsChangeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("realAssets", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                    localElementDictionary.Add(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (debit, kredit)
            /// </para>
            /// </summary>
            public partial class financialAssetsChangeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator financialAssetsChangeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsChangeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static financialAssetsChangeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("debit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kredit", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (debit, kredit)
                /// </para>
                /// </summary>
                public financialAssetsChangeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Изменение дебиторской задолженности за отчетный год
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debit, kredit)
                /// </para>
                /// </summary>
                public debitLocalType debit {
                    get {
                        XElement x = this.GetElement(XName.Get("debit", "http://bus.gov.ru/types/1"));
                        return ((debitLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("debit", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Изменение кредиторской задолженности за отчетный год
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debit, kredit)
                /// </para>
                /// </summary>
                public kreditLocalType kredit {
                    get {
                        XElement x = this.GetElement(XName.Get("kredit", "http://bus.gov.ru/types/1"));
                        return ((kreditLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("kredit", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("financialAssetsChange", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<financialAssetsChangeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("debit", "http://bus.gov.ru/types/1"), typeof(debitLocalType));
                    localElementDictionary.Add(XName.Get("kredit", "http://bus.gov.ru/types/1"), typeof(kreditLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (income, expense, total)
                /// </para>
                /// </summary>
                public partial class debitLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator debitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<debitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static debitLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (income, expense, total)
                    /// </para>
                    /// </summary>
                    public debitLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По доходам (поступлениям)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense, total)
                    /// </para>
                    /// </summary>
                    public changeIndexType income {
                        get {
                            XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                            return ((changeIndexType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По выплатам (расходам)
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense, total)
                    /// </para>
                    /// </summary>
                    public changeIndexType expense {
                        get {
                            XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                            return ((changeIndexType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Всего
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense, total)
                    /// </para>
                    /// </summary>
                    public changeIndexType total {
                        get {
                            XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                            return ((changeIndexType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("debit", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<debitLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                        localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                        localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (expired, total)
                /// </para>
                /// </summary>
                public partial class kreditLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator kreditLocalType(XElement xe) { return XTypedServices.ToXTypedElement<kreditLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static kreditLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("expired", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (expired, total)
                    /// </para>
                    /// </summary>
                    public kreditLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Просроченная кредиторская задолженность
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (expired, total)
                    /// </para>
                    /// </summary>
                    public changeIndexType expired {
                        get {
                            XElement x = this.GetElement(XName.Get("expired", "http://bus.gov.ru/types/1"));
                            return ((changeIndexType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("expired", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Всего
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (expired, total)
                    /// </para>
                    /// </summary>
                    public changeIndexType total {
                        get {
                            XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                            return ((changeIndexType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("kredit", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<kreditLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("expired", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                        localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeIndexType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
            /// </para>
            /// </summary>
            public partial class serviceLocalType : global::bus.gov.ru.types.Item1.refNsiServiceType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator serviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<serviceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static serviceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("customers", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("complaints", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reaction", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
                /// </para>
                /// </summary>
                public serviceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Порядковый номер раздела
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
                /// </para>
                /// </summary>
                public System.Nullable<int> ordinalNumber {
                    get {
                        XElement x = this.GetElement(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Количество потребителей
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
                /// </para>
                /// </summary>
                public System.Nullable<int> customers {
                    get {
                        XElement x = this.GetElement(XName.Get("customers", "http://bus.gov.ru/types/1"));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("customers", "http://bus.gov.ru/types/1"), value, "customers", customersLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Количество жалоб
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
                /// </para>
                /// </summary>
                public System.Nullable<int> complaints {
                    get {
                        XElement x = this.GetElement(XName.Get("complaints", "http://bus.gov.ru/types/1"));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("complaints", "http://bus.gov.ru/types/1"), value, "complaints", complaintsLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Принятые меры по результатам рассмотрения жалоб
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code?, name, type, number?, ordinalNumber?, customers?, complaints?, reaction?)
                /// </para>
                /// </summary>
                public string reaction {
                    get {
                        XElement x = this.GetElement(XName.Get("reaction", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("reaction", "http://bus.gov.ru/types/1"), value, "reaction", reactionLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("service", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<serviceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), typeof(int));
                    localElementDictionary.Add(XName.Get("customers", "http://bus.gov.ru/types/1"), typeof(int));
                    localElementDictionary.Add(XName.Get("complaints", "http://bus.gov.ru/types/1"), typeof(int));
                    localElementDictionary.Add(XName.Get("reaction", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class customersLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
                    
                    private customersLocalType() {
                    }
                }
                
                private class complaintsLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
                    
                    private complaintsLocalType() {
                    }
                }
                
                private class reactionLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private reactionLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
            /// </para>
            /// </summary>
            public partial class cashReceiptsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator cashReceiptsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<cashReceiptsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static cashReceiptsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("actionGrant", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paidServices", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public cashReceiptsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Субсидии на выполнение государственного (муниципального) задания
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal stateTaskGrant {
                    get {
                        XElement x = this.GetElement(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"), value, "stateTaskGrant", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Целевые субсидии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal actionGrant {
                    get {
                        XElement x = this.GetElement(XName.Get("actionGrant", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("actionGrant", "http://bus.gov.ru/types/1"), value, "actionGrant", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Бюджетные инвестиции
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal budgetaryFunds {
                    get {
                        XElement x = this.GetElement(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"), value, "budgetaryFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оказание учреждением платных услуг и иной приносящей доход деятель-ности
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal paidServices {
                    get {
                        XElement x = this.GetElement(XName.Get("paidServices", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("paidServices", "http://bus.gov.ru/types/1"), value, "paidServices", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("cashReceipts", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<cashReceiptsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("actionGrant", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("paidServices", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (government | autonomous | budgetary)
            /// </para>
            /// </summary>
            public partial class cashPaymentsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator cashPaymentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<cashPaymentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static cashPaymentsLocalType() {
                    BuildElementDictionary();
                    contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("government", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("autonomous", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetary", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (government | autonomous | budgetary)
                /// </para>
                /// </summary>
                public cashPaymentsLocalType() {
                }
                
                public cashPaymentsLocalType(governmentLocalType government) {
                    this.government = government;
                }
                
                public cashPaymentsLocalType(institutionCashPaymentType autonomous) {
                    this.autonomous = autonomous;
                }
                
                public cashPaymentsLocalType(budgetaryLocalType budgetary) {
                    this.budgetary = budgetary;
                }
                
                /// <summary>
                /// <para>
                /// Для казеных учреждений
                /// </para>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Regular expression: (government | autonomous | budgetary)
                /// </para>
                /// </summary>
                public governmentLocalType government {
                    get {
                        XElement x = this.GetElement(XName.Get("government", "http://bus.gov.ru/types/1"));
                        return ((governmentLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("government", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Для автономных учреждений
                /// </para>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Regular expression: (government | autonomous | budgetary)
                /// </para>
                /// </summary>
                public institutionCashPaymentType autonomous {
                    get {
                        XElement x = this.GetElement(XName.Get("autonomous", "http://bus.gov.ru/types/1"));
                        return ((institutionCashPaymentType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("autonomous", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Для бюджетных учреждений
                /// </para>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Regular expression: (government | autonomous | budgetary)
                /// </para>
                /// </summary>
                public budgetaryLocalType budgetary {
                    get {
                        XElement x = this.GetElement(XName.Get("budgetary", "http://bus.gov.ru/types/1"));
                        return ((budgetaryLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("budgetary", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("cashPayments", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<cashPaymentsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("government", "http://bus.gov.ru/types/1"), typeof(governmentLocalType));
                    localElementDictionary.Add(XName.Get("autonomous", "http://bus.gov.ru/types/1"), typeof(institutionCashPaymentType));
                    localElementDictionary.Add(XName.Get("budgetary", "http://bus.gov.ru/types/1"), typeof(budgetaryLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name, payment, kbk?)
                /// </para>
                /// </summary>
                public partial class governmentLocalType : global::bus.gov.ru.types.Item1.institutionCashPaymentType, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator governmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<governmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static governmentLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("payment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (name, payment, kbk?)
                    /// </para>
                    /// </summary>
                    public governmentLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// КБК
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (name, payment, kbk?)
                    /// </para>
                    /// </summary>
                    public refNsiKbkType kbk {
                        get {
                            XElement x = this.GetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"));
                            return ((refNsiKbkType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("government", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<governmentLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("payment", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(refNsiKbkType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name, payment, kosgu?, kbk?)
                /// </para>
                /// </summary>
                public partial class budgetaryLocalType : global::bus.gov.ru.types.Item1.institutionCashPaymentType, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator budgetaryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<budgetaryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static budgetaryLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("payment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kosgu", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (name, payment, kosgu?, kbk?)
                    /// </para>
                    /// </summary>
                    public budgetaryLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// КОСГУ
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (name, payment, kosgu?, kbk?)
                    /// </para>
                    /// </summary>
                    public refNsiKosguType kosgu {
                        get {
                            XElement x = this.GetElement(XName.Get("kosgu", "http://bus.gov.ru/types/1"));
                            return ((refNsiKosguType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("kosgu", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// КБК
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (name, payment, kosgu?, kbk?)
                    /// </para>
                    /// </summary>
                    public refNsiKbkType kbk {
                        get {
                            XElement x = this.GetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"));
                            return ((refNsiKbkType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("budgetary", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<budgetaryLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("payment", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("kosgu", "http://bus.gov.ru/types/1"), typeof(refNsiKosguType));
                        localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(refNsiKbkType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (bookValueAssets, realAssetsArea)
        /// </para>
        /// </summary>
        public partial class assetsUseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator assetsUseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<assetsUseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static assetsUseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("bookValueAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("realAssetsArea", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (bookValueAssets, realAssetsArea)
            /// </para>
            /// </summary>
            public assetsUseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Cведения о балансовой стоимости имущества
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (bookValueAssets, realAssetsArea)
            /// </para>
            /// </summary>
            public bookValueAssetsLocalType bookValueAssets {
                get {
                    XElement x = this.GetElement(XName.Get("bookValueAssets", "http://bus.gov.ru/types/1"));
                    return ((bookValueAssetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("bookValueAssets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о площадях недвижимого имущества
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (bookValueAssets, realAssetsArea)
            /// </para>
            /// </summary>
            public realAssetsAreaLocalType realAssetsArea {
                get {
                    XElement x = this.GetElement(XName.Get("realAssetsArea", "http://bus.gov.ru/types/1"));
                    return ((realAssetsAreaLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("realAssetsArea", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("assetsUse", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<assetsUseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("bookValueAssets", "http://bus.gov.ru/types/1"), typeof(bookValueAssetsLocalType));
                localElementDictionary.Add(XName.Get("realAssetsArea", "http://bus.gov.ru/types/1"), typeof(realAssetsAreaLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (realAssets, personalAssets)
            /// </para>
            /// </summary>
            public partial class bookValueAssetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator bookValueAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<bookValueAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static bookValueAssetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("realAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAssets", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (realAssets, personalAssets)
                /// </para>
                /// </summary>
                public bookValueAssetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Балансовая стоимость недвижимого имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, personalAssets)
                /// </para>
                /// </summary>
                public realAssetsLocalType realAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"));
                        return ((realAssetsLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Балансовая стоимость движимого имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, personalAssets)
                /// </para>
                /// </summary>
                public personalAssetsLocalType personalAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("personalAssets", "http://bus.gov.ru/types/1"));
                        return ((personalAssetsLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("personalAssets", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("bookValueAssets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<bookValueAssetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("realAssets", "http://bus.gov.ru/types/1"), typeof(realAssetsLocalType));
                    localElementDictionary.Add(XName.Get("personalAssets", "http://bus.gov.ru/types/1"), typeof(personalAssetsLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (leaseRealAssets, gratisRealAssets, total)
                /// </para>
                /// </summary>
                public partial class realAssetsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator realAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<realAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static realAssetsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("leaseRealAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gratisRealAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (leaseRealAssets, gratisRealAssets, total)
                    /// </para>
                    /// </summary>
                    public realAssetsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Недвижимое имущество, переданное в аренду
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseRealAssets, gratisRealAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType leaseRealAssets {
                        get {
                            XElement x = this.GetElement(XName.Get("leaseRealAssets", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("leaseRealAssets", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Недвижимое имущество, переданное в безвозмездное пользование
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseRealAssets, gratisRealAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType gratisRealAssets {
                        get {
                            XElement x = this.GetElement(XName.Get("gratisRealAssets", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("gratisRealAssets", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Всего
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseRealAssets, gratisRealAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType total {
                        get {
                            XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("realAssets", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<realAssetsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("leaseRealAssets", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("gratisRealAssets", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (leasePersonalAssets, gratisPersonalAssets, total)
                /// </para>
                /// </summary>
                public partial class personalAssetsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator personalAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<personalAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static personalAssetsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("leasePersonalAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gratisPersonalAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (leasePersonalAssets, gratisPersonalAssets, total)
                    /// </para>
                    /// </summary>
                    public personalAssetsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Движимое имущество, переданное в аренду
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leasePersonalAssets, gratisPersonalAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType leasePersonalAssets {
                        get {
                            XElement x = this.GetElement(XName.Get("leasePersonalAssets", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("leasePersonalAssets", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Движимое имущество, переданное в безвозмездное пользование
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leasePersonalAssets, gratisPersonalAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType gratisPersonalAssets {
                        get {
                            XElement x = this.GetElement(XName.Get("gratisPersonalAssets", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("gratisPersonalAssets", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Всего
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leasePersonalAssets, gratisPersonalAssets, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType total {
                        get {
                            XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("personalAssets", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<personalAssetsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("leasePersonalAssets", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("gratisPersonalAssets", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (realAssetsAreaSummary, assetsFunds)
            /// </para>
            /// </summary>
            public partial class realAssetsAreaLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator realAssetsAreaLocalType(XElement xe) { return XTypedServices.ToXTypedElement<realAssetsAreaLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static realAssetsAreaLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("realAssetsAreaSummary", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("assetsFunds", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (realAssetsAreaSummary, assetsFunds)
                /// </para>
                /// </summary>
                public realAssetsAreaLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Общая площадь объектов недвижимого имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssetsAreaSummary, assetsFunds)
                /// </para>
                /// </summary>
                public realAssetsAreaSummaryLocalType realAssetsAreaSummary {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssetsAreaSummary", "http://bus.gov.ru/types/1"));
                        return ((realAssetsAreaSummaryLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("realAssetsAreaSummary", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Объем средств, полученный в отчетном году от распоряжения в установленном порядке имуществом
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssetsAreaSummary, assetsFunds)
                /// </para>
                /// </summary>
                public changeRangeType assetsFunds {
                    get {
                        XElement x = this.GetElement(XName.Get("assetsFunds", "http://bus.gov.ru/types/1"));
                        return ((changeRangeType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("assetsFunds", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("realAssetsArea", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<realAssetsAreaLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("realAssetsAreaSummary", "http://bus.gov.ru/types/1"), typeof(realAssetsAreaSummaryLocalType));
                    localElementDictionary.Add(XName.Get("assetsFunds", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (leaseArea, gratisArea, total)
                /// </para>
                /// </summary>
                public partial class realAssetsAreaSummaryLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator realAssetsAreaSummaryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<realAssetsAreaSummaryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static realAssetsAreaSummaryLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("leaseArea", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gratisArea", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (leaseArea, gratisArea, total)
                    /// </para>
                    /// </summary>
                    public realAssetsAreaSummaryLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Площадь, переданная в аренду
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseArea, gratisArea, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType leaseArea {
                        get {
                            XElement x = this.GetElement(XName.Get("leaseArea", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("leaseArea", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Площадь, переданная в безвозмездное пользование
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseArea, gratisArea, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType gratisArea {
                        get {
                            XElement x = this.GetElement(XName.Get("gratisArea", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("gratisArea", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Всего
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (leaseArea, gratisArea, total)
                    /// </para>
                    /// </summary>
                    public changeRangeType total {
                        get {
                            XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                            return ((changeRangeType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("total", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("realAssetsAreaSummary", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<realAssetsAreaSummaryLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("leaseArea", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("gratisArea", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                        localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(changeRangeType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Адрес учреждения (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
    /// </para>
    /// </summary>
    public partial class addressSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator addressSoftType(XElement xe) { return XTypedServices.ToXTypedElement<addressSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static addressSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("zip", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("subject", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("region", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("city", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("locality", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("street", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("building", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("office", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Адрес учреждения (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public addressSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Почтовый индекс
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string zip {
            get {
                XElement x = this.GetElement(XName.Get("zip", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("zip", "http://bus.gov.ru/types/1"), value, "zip", global::bus.gov.ru.types.Item1.zipType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Субъект РФ по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrSoftType subject {
            get {
                XElement x = this.GetElement(XName.Get("subject", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("subject", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Район по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrSoftType region {
            get {
                XElement x = this.GetElement(XName.Get("region", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("region", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Город по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrSoftType city {
            get {
                XElement x = this.GetElement(XName.Get("city", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("city", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Населенный пункт по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrSoftType locality {
            get {
                XElement x = this.GetElement(XName.Get("locality", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("locality", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Улица по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStreetSoftType street {
            get {
                XElement x = this.GetElement(XName.Get("street", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStreetSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("street", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер дома
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string building {
            get {
                XElement x = this.GetElement(XName.Get("building", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("building", "http://bus.gov.ru/types/1"), value, "building", buildingLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер офиса (квартиры)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string office {
            get {
                XElement x = this.GetElement(XName.Get("office", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("office", "http://bus.gov.ru/types/1"), value, "office", officeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("addressSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<addressSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("zip", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("subject", "http://bus.gov.ru/types/1"), typeof(refNsiKladrSoftType));
            localElementDictionary.Add(XName.Get("region", "http://bus.gov.ru/types/1"), typeof(refNsiKladrSoftType));
            localElementDictionary.Add(XName.Get("city", "http://bus.gov.ru/types/1"), typeof(refNsiKladrSoftType));
            localElementDictionary.Add(XName.Get("locality", "http://bus.gov.ru/types/1"), typeof(refNsiKladrSoftType));
            localElementDictionary.Add(XName.Get("street", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStreetSoftType));
            localElementDictionary.Add(XName.Get("building", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("office", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class buildingLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private buildingLocalType() {
            }
        }
        
        private class officeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private officeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Адрес учреждения (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
    /// </para>
    /// </summary>
    public partial class addressStrongType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator addressStrongType(XElement xe) { return XTypedServices.ToXTypedElement<addressStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static addressStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("zip", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("subject", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("region", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("city", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("locality", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("street", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("building", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("office", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Адрес учреждения (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public addressStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Почтовый индекс
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string zip {
            get {
                XElement x = this.GetElement(XName.Get("zip", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("zip", "http://bus.gov.ru/types/1"), value, "zip", global::bus.gov.ru.types.Item1.zipType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Субъект РФ по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStrongType subject {
            get {
                XElement x = this.GetElement(XName.Get("subject", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("subject", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Район по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStrongType region {
            get {
                XElement x = this.GetElement(XName.Get("region", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("region", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Город по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStrongType city {
            get {
                XElement x = this.GetElement(XName.Get("city", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("city", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Населенный пункт по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStrongType locality {
            get {
                XElement x = this.GetElement(XName.Get("locality", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("locality", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Улица по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public refNsiKladrStreetSoftType street {
            get {
                XElement x = this.GetElement(XName.Get("street", "http://bus.gov.ru/types/1"));
                return ((refNsiKladrStreetSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("street", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер дома
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string building {
            get {
                XElement x = this.GetElement(XName.Get("building", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("building", "http://bus.gov.ru/types/1"), value, "building", buildingLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер офиса (квартиры)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (zip, subject, region?, city?, locality?, street?, building?, office?)
        /// </para>
        /// </summary>
        public string office {
            get {
                XElement x = this.GetElement(XName.Get("office", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("office", "http://bus.gov.ru/types/1"), value, "office", officeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("addressStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<addressStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("zip", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("subject", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStrongType));
            localElementDictionary.Add(XName.Get("region", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStrongType));
            localElementDictionary.Add(XName.Get("city", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStrongType));
            localElementDictionary.Add(XName.Get("locality", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStrongType));
            localElementDictionary.Add(XName.Get("street", "http://bus.gov.ru/types/1"), typeof(refNsiKladrStreetSoftType));
            localElementDictionary.Add(XName.Get("building", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("office", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class buildingLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private buildingLocalType() {
            }
        }
        
        private class officeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private officeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503121Type_2014 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503121Type_2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503121Type_2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503121Type_2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503121Type_2014() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Чистый операционный результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public netOperatingResultsLocalType netOperatingResults {
            get {
                XElement x = this.GetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"));
                return ((netOperatingResultsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с нефинансовыми активами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsTransactionsLocalType nonFinancialAssetsTransactions {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с финансовыми активами и обязательствами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public financialAssetsLiabilitiesTransactionsLocalType financialAssetsLiabilitiesTransactions {
            get {
                XElement x = this.GetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLiabilitiesTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503121Type_2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503121Type_2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType2014));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), typeof(netOperatingResultsLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsTransactionsLocalType));
            localElementDictionary.Add(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), typeof(financialAssetsLiabilitiesTransactionsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class netOperatingResultsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator netOperatingResultsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<netOperatingResultsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static netOperatingResultsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public netOperatingResultsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("netOperatingResults", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<netOperatingResultsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLiabilitiesTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLiabilitiesTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLiabilitiesTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLiabilitiesTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период, начиная с 2014 года включительно
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503121) за  2013 год
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503121Type_2013 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503121Type_2013(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503121Type_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503121Type_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503121) за  2013 год
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503121Type_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Чистый операционный результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public netOperatingResultsLocalType netOperatingResults {
            get {
                XElement x = this.GetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"));
                return ((netOperatingResultsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с нефинансовыми активами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsTransactionsLocalType nonFinancialAssetsTransactions {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с финансовыми активами и обязательствами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public financialAssetsLiabilitiesTransactionsLocalType financialAssetsLiabilitiesTransactions {
            get {
                XElement x = this.GetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLiabilitiesTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503121Type_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503121Type_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), typeof(netOperatingResultsLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsTransactionsLocalType));
            localElementDictionary.Add(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), typeof(financialAssetsLiabilitiesTransactionsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за 2013 год
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за 2013 год
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class netOperatingResultsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator netOperatingResultsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<netOperatingResultsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static netOperatingResultsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public netOperatingResultsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за 2013 год
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("netOperatingResults", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<netOperatingResultsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за 2013 год 
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLiabilitiesTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLiabilitiesTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLiabilitiesTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLiabilitiesTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за 2013 г
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет об исполнении бюджета (ф. 0503127)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503127Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503127Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503127Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503127Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fundingSources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет об исполнении бюджета (ф. 0503127)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503127Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Источники финансирования дефицита бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public fundingSourcesLocalType fundingSources {
            get {
                XElement x = this.GetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"));
                return ((fundingSourcesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503127Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503127Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), typeof(fundingSourcesLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class fundingSourcesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator fundingSourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fundingSourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static fundingSourcesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public fundingSourcesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("fundingSources", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<fundingSourcesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет об исполнении бюджета (ф. 0503127)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503127Type_2015 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503127Type_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503127Type_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503127Type_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fundingSources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет об исполнении бюджета (ф. 0503127)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503127Type_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Источники финансирования дефицита бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public fundingSourcesLocalType fundingSources {
            get {
                XElement x = this.GetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"));
                return ((fundingSourcesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503127Type_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503127Type_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType2014));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), typeof(fundingSourcesLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class fundingSourcesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503127TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator fundingSourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fundingSourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static fundingSourcesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public fundingSourcesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503127TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503127TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503127TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503127TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("fundingSources", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<fundingSourcesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за 2014 год
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503130Type_2014 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503130Type_2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503130Type_2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503130Type_2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за 2014 год
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503130Type_2014() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataTypeCommon2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataTypeCommon2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503130Type_2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503130Type_2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataTypeCommon2014));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItemRefer+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelReferenceType_2013> reportItemReferField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в справке баланса (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelReferenceType_2013> reportItemRefer {
                get {
                    if ((this.reportItemReferField == null)) {
                        this.reportItemReferField = new XTypedList<reportItemF0503130TopLevelReferenceType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemReferField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemReferField = null;
                    }
                    else {
                        if ((this.reportItemReferField == null)) {
                            this.reportItemReferField = XTypedList<reportItemF0503130TopLevelReferenceType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelReferenceType_2013>(this.reportItemReferField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelReferenceType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за период до 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503130Type_2013 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503130Type_2013(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503130Type_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503130Type_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за период до 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503130Type_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503130Type_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503130Type_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItemRefer+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelReferenceType_2013> reportItemReferField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в справке баланса (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelReferenceType_2013> reportItemRefer {
                get {
                    if ((this.reportItemReferField == null)) {
                        this.reportItemReferField = new XTypedList<reportItemF0503130TopLevelReferenceType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemReferField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemReferField = null;
                    }
                    else {
                        if ((this.reportItemReferField == null)) {
                            this.reportItemReferField = XTypedList<reportItemF0503130TopLevelReferenceType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelReferenceType_2013>(this.reportItemReferField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelReferenceType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за период начиная с 2015 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503130Type_2015 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503130Type_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503130Type_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503130Type_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)  за период начиная с 2015 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503130Type_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503130Type_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503130Type_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType2014));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType_2013> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType_2013> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType_2013>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItemRefer+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelReferenceType_2013> reportItemReferField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в справке баланса (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItemRefer+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelReferenceType_2013> reportItemRefer {
                get {
                    if ((this.reportItemReferField == null)) {
                        this.reportItemReferField = new XTypedList<reportItemF0503130TopLevelReferenceType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemReferField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemReferField = null;
                    }
                    else {
                        if ((this.reportItemReferField == null)) {
                            this.reportItemReferField = XTypedList<reportItemF0503130TopLevelReferenceType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelReferenceType_2013>(this.reportItemReferField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItemRefer", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelReferenceType_2013));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503130Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503130Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503130Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503130Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс главного распорядителя, распорядителя, получателя бюджетных средств, главного администратора, администратора источников финансирования дефицита бюджета, главного администратора, администратора доходов бюджета (ф. 0503130)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503130Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503130Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503130Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503130TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе (ф. 0503130)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503130TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503130TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503130TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503130TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503137Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503137Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503137Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503137Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fundingSources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503137Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Источники финансирования дефицита средств учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public fundingSourcesLocalType fundingSources {
            get {
                XElement x = this.GetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"));
                return ((fundingSourcesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, fundingSources, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503137Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503137Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), typeof(fundingSourcesLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503137TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503137TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503137TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503137TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503137TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503137TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503137TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503137TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503137TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503137TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503137TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503137TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class fundingSourcesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503137TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator fundingSourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fundingSourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static fundingSourcesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public fundingSourcesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503137TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503137TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503137TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503137TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("fundingSources", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<fundingSourcesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503137TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503721)  за период до  2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503721Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503721Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503721Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503721Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503721)  за период до  2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503721Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы и обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503721Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503721Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503721) за 2014 год
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503721Type_2014 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503721Type_2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503721Type_2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503721Type_2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503721) за 2014 год
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503721Type_2014() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType_2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы и обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503721Type_2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503721Type_2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType_2014));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503721) за 2015 год и последующие
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503721Type_2015 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503721Type_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503721Type_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503721Type_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503721) за 2015 год и последующие
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503721Type_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType_2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы и обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, nonFinancialAssets, financialAssets, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503721Type_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503721Type_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType_2014));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503721TopLevelType2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503721TopLevelType2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503721TopLevelType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503721TopLevelType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503721TopLevelType2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721TopLevelType2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс государственного (муниципального) учреждения (ф. 0503730) за период до  2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503730Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503730Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503730Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503730Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс государственного (муниципального) учреждения (ф. 0503730) за период до  2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503730Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503730Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503730Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс государственного (муниципального) учреждения (ф. 0503730) за 2014 год
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503730Type_2014 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503730Type_2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503730Type_2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503730Type_2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс государственного (муниципального) учреждения (ф. 0503730) за 2014 год
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503730Type_2014() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType_2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503730Type_2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503730Type_2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType_2014));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Баланс государственного (муниципального) учреждения (ф. 0503730) за период с 2015 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503730Type_2015 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503730Type_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503730Type_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503730Type_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("commitments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Баланс государственного (муниципального) учреждения (ф. 0503730) за период с 2015 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503730Type_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2014 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderDataType_2014)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Нефинансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsLocalType nonFinancialAssets {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовые активы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialAssetsLocalType financialAssets {
            get {
                XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обязательства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public commitmentsLocalType commitments {
            get {
                XElement x = this.GetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"));
                return ((commitmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("commitments", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Финансовый результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public financialResultLocalType financialResult {
            get {
                XElement x = this.GetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"));
                return ((financialResultLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialResult", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Справка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public referenceLocalType reference {
            get {
                XElement x = this.GetElement(XName.Get("reference", "http://bus.gov.ru/types/1"));
                return ((referenceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reference", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, nonFinancialAssets, financialAssets, commitments, financialResult, reference, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503730Type_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503730Type_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderDataType_2014));
            localElementDictionary.Add(XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsLocalType));
            localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
            localElementDictionary.Add(XName.Get("commitments", "http://bus.gov.ru/types/1"), typeof(commitmentsLocalType));
            localElementDictionary.Add(XName.Get("financialResult", "http://bus.gov.ru/types/1"), typeof(financialResultLocalType));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(referenceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType_2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType_2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType_2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType_2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType_2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType_2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType_2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType_2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class commitmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType_2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator commitmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<commitmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static commitmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public commitmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType_2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType_2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("commitments", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<commitmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType_2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialResultLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType_2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialResultLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialResultLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialResultLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialResultLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType_2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType_2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialResult", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialResultLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType_2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class referenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503730TopLevelType_2015> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator referenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<referenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static referenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public referenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503730TopLevelType_2015> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503730TopLevelType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503730TopLevelType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503730TopLevelType_2015>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<referenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730TopLevelType_2015));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737) до 2015 года
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503737Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503737Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503737Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503737Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737) до 2015 года
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503737Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderFinSupportDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderFinSupportDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503737Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503737Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderFinSupportDataType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737) c 2015 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503737Type_2015 : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503737Type_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503737Type_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503737Type_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737) c 2015 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503737Type_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public annualBalanceFounderFinSupportDataType_2015 generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceFounderFinSupportDataType_2015)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503737Type_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503737Type_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceFounderFinSupportDataType_2015));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, okato, section?, budget, grbs)
    /// </para>
    /// </summary>
    public partial class annualBalanceBudgetGeneralDataType : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceBudgetGeneralDataType(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceBudgetGeneralDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceBudgetGeneralDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("grbs", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, budget, grbs)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета (публично-правовое образование)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType budget {
            get {
                XElement x = this.GetElement(XName.Get("budget", "http://bus.gov.ru/types/1"));
                return ((refNsiBudgetStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("budget", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Главный распорядитель, получатель бюджетных средств, главный администратор, администратор источников финансирования дефицита бюджета, главный администратор, администратор доходов бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType grbs {
            get {
                XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceBudgetGeneralDataType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceBudgetGeneralDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(refNsiBudgetStrongType));
            localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, budget, grbs)
    /// </para>
    /// </summary>
    public partial class annualBalanceBudgetGeneralDataType2014 : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType2014, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceBudgetGeneralDataType2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceBudgetGeneralDataType2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceBudgetGeneralDataType2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("grbs", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType2014() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета (публично-правовое образование)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType budget {
            get {
                XElement x = this.GetElement(XName.Get("budget", "http://bus.gov.ru/types/1"));
                return ((refNsiBudgetStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("budget", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Главный распорядитель, получатель бюджетных средств, главный администратор, администратор источников финансирования дефицита бюджета, главный администратор, администратор доходов бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType grbs {
            get {
                XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceBudgetGeneralDataType2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceBudgetGeneralDataType2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(refNsiBudgetStrongType));
            localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете без ИНН
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, budget, grbs)
    /// </para>
    /// </summary>
    public partial class annualBalanceBudgetGeneralDataTypeCommon2014 : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataTypeCommon2014, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceBudgetGeneralDataTypeCommon2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceBudgetGeneralDataTypeCommon2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceBudgetGeneralDataTypeCommon2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("grbs", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения со сведениями о бюджете без ИНН
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataTypeCommon2014() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета (публично-правовое образование)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType budget {
            get {
                XElement x = this.GetElement(XName.Get("budget", "http://bus.gov.ru/types/1"));
                return ((refNsiBudgetStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("budget", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Главный распорядитель, получатель бюджетных средств, главный администратор, администратор источников финансирования дефицита бюджета, главный администратор, администратор доходов бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, budget, grbs)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType grbs {
            get {
                XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceBudgetGeneralDataTypeCommon2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceBudgetGeneralDataTypeCommon2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(refNsiBudgetStrongType));
            localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
    /// </para>
    /// </summary>
    public partial class annualBalanceFounderDataType : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceFounderDataType(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceFounderDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceFounderDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование Учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderName {
            get {
                XElement x = this.GetElement(XName.Get("founderName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderName", "http://bus.gov.ru/types/1"), value, "founderName", founderNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Орган, осуществляющий функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType founderAuthority {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обособленное структурное подразделение
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType separateStructuralUnit {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderAuthorityOkpo {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), value, "founderAuthorityOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО обособленного структурного подразделения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string separateStructuralUnitOkpo {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), value, "separateStructuralUnitOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceFounderDataType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceFounderDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class founderNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private founderNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
    /// </para>
    /// </summary>
    public partial class annualBalanceFounderDataType_2015 : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataTypeCommon2014, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceFounderDataType_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceFounderDataType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceFounderDataType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование Учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderName {
            get {
                XElement x = this.GetElement(XName.Get("founderName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderName", "http://bus.gov.ru/types/1"), value, "founderName", founderNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Орган, осуществляющий функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType founderAuthority {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обособленное структурное подразделение
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType separateStructuralUnit {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderAuthorityOkpo {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), value, "founderAuthorityOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО обособленного структурного подразделения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string separateStructuralUnitOkpo {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), value, "separateStructuralUnitOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceFounderDataType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceFounderDataType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("founderName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class founderNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private founderNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
    /// </para>
    /// </summary>
    public partial class annualBalanceFounderDataType_2014 : global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType2014, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceFounderDataType_2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceFounderDataType_2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceFounderDataType_2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public annualBalanceFounderDataType_2014() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование Учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderName {
            get {
                XElement x = this.GetElement(XName.Get("founderName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderName", "http://bus.gov.ru/types/1"), value, "founderName", founderNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Орган, осуществляющий функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType founderAuthority {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Обособленное структурное подразделение
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType separateStructuralUnit {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string founderAuthorityOkpo {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), value, "founderAuthorityOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО обособленного структурного подразделения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?)
        /// </para>
        /// </summary>
        public string separateStructuralUnitOkpo {
            get {
                XElement x = this.GetElement(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), value, "separateStructuralUnitOkpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceFounderDataType_2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceFounderDataType_2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("founderName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class founderNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private founderNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
    /// </para>
    /// </summary>
    public partial class annualBalanceFounderFinSupportDataType : global::bus.gov.ru.types.Item1.annualBalanceFounderDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<financialSupportDataLocalType> financialSupportDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceFounderFinSupportDataType(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceFounderFinSupportDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceFounderFinSupportDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialSupportData", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
        /// </para>
        /// </summary>
        public annualBalanceFounderFinSupportDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Сведения по видам финансового обеспечения
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.annualBalanceFounderFinSupportDataType.financialSupportDataLocalType> financialSupportData {
            get {
                if ((this.financialSupportDataField == null)) {
                    this.financialSupportDataField = new XTypedList<financialSupportDataLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("financialSupportData", "http://bus.gov.ru/types/1"));
                }
                return this.financialSupportDataField;
            }
            set {
                if ((value == null)) {
                    this.financialSupportDataField = null;
                }
                else {
                    if ((this.financialSupportDataField == null)) {
                        this.financialSupportDataField = XTypedList<financialSupportDataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("financialSupportData", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<financialSupportDataLocalType>(this.financialSupportDataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceFounderFinSupportDataType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceFounderFinSupportDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("financialSupportData", "http://bus.gov.ru/types/1"), typeof(financialSupportDataLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
        /// </para>
        /// </summary>
        public partial class financialSupportDataLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialSupportDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialSupportDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialSupportDataLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fundingSources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
            /// </para>
            /// </summary>
            public financialSupportDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид финансового обеспечения
            ///Допустимые значения:
            /// 2 – собственные доходы учреждения;
            /// 4 – субсидия на выполнение государственного (муниципального) задания;
            /// 5 – субсидии на иные цели.
            /// 6 – бюджетные инвестиции.
            /// 7 – средства по обязательному медицинскому страхованию.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
            /// </para>
            /// </summary>
            public string typeFinancialSupport {
                get {
                    XElement x = this.GetElement(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"), value, "typeFinancialSupport", typeFinancialSupportLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Источники финансирования дефицита средств учреждения
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
            /// </para>
            /// </summary>
            public fundingSourcesLocalType fundingSources {
                get {
                    XElement x = this.GetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"));
                    return ((fundingSourcesLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Доходы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
            /// </para>
            /// </summary>
            public incomeLocalType income {
                get {
                    XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                    return ((incomeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Расходы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense)
            /// </para>
            /// </summary>
            public expenseLocalType expense {
                get {
                    XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                    return ((expenseLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialSupportData", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialSupportDataLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), typeof(fundingSourcesLocalType));
                localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
                localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class typeFinancialSupportLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "(2|4|5|6|7)"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private typeFinancialSupportLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class fundingSourcesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator fundingSourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fundingSourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static fundingSourcesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public fundingSourcesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("fundingSources", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<fundingSourcesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class incomeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static incomeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public incomeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("income", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class expenseLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static expenseLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public expenseLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("expense", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
    /// </para>
    /// </summary>
    public partial class annualBalanceFounderFinSupportDataType_2015 : global::bus.gov.ru.types.Item1.annualBalanceFounderDataType_2015, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<financialSupportDataLocalType> financialSupportDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceFounderFinSupportDataType_2015(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceFounderFinSupportDataType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceFounderFinSupportDataType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialSupportData", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
        /// </para>
        /// </summary>
        public annualBalanceFounderFinSupportDataType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Сведения по видам финансового обеспечения
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo, founderName?, founderAuthority, separateStructuralUnit?, founderAuthorityOkpo?, separateStructuralUnitOkpo?, financialSupportData+)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.annualBalanceFounderFinSupportDataType_2015.financialSupportDataLocalType> financialSupportData {
            get {
                if ((this.financialSupportDataField == null)) {
                    this.financialSupportDataField = new XTypedList<financialSupportDataLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("financialSupportData", "http://bus.gov.ru/types/1"));
                }
                return this.financialSupportDataField;
            }
            set {
                if ((value == null)) {
                    this.financialSupportDataField = null;
                }
                else {
                    if ((this.financialSupportDataField == null)) {
                        this.financialSupportDataField = XTypedList<financialSupportDataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("financialSupportData", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<financialSupportDataLocalType>(this.financialSupportDataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceFounderFinSupportDataType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceFounderFinSupportDataType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("founderName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("separateStructuralUnit", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
            localElementDictionary.Add(XName.Get("founderAuthorityOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("separateStructuralUnitOkpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("financialSupportData", "http://bus.gov.ru/types/1"), typeof(financialSupportDataLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
        /// </para>
        /// </summary>
        public partial class financialSupportDataLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialSupportDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialSupportDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialSupportDataLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fundingSources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnExpense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnExpenseByHand", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public financialSupportDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид финансового обеспечения
            ///Допустимые значения:
            /// 2 – собственные доходы учреждения;
            /// 4 – субсидия на выполнение государственного (муниципального) задания;
            /// 5 – субсидии на иные цели.
            /// 6 – бюджетные инвестиции.
            /// 7 – средства по обязательному медицинскому страхованию.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public string typeFinancialSupport {
                get {
                    XElement x = this.GetElement(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"), value, "typeFinancialSupport", typeFinancialSupportLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Источники финансирования дефицита средств учреждения
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public fundingSourcesLocalType fundingSources {
                get {
                    XElement x = this.GetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"));
                    return ((fundingSourcesLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Доходы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public incomeLocalType income {
                get {
                    XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                    return ((incomeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Расходы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public expenseLocalType expense {
                get {
                    XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                    return ((expenseLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о возвратах расходов и выплат обеспечений прошлых лет
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public returnExpenseLocalType returnExpense {
                get {
                    XElement x = this.GetElement(XName.Get("returnExpense", "http://bus.gov.ru/types/1"));
                    return ((returnExpenseLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("returnExpense", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о возвратах расходов и выплат обеспечений прошлых лет (введены вручную)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeFinancialSupport, fundingSources, income, expense, returnExpense, returnExpenseByHand)
            /// </para>
            /// </summary>
            public returnExpenseByHandLocalType returnExpenseByHand {
                get {
                    XElement x = this.GetElement(XName.Get("returnExpenseByHand", "http://bus.gov.ru/types/1"));
                    return ((returnExpenseByHandLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("returnExpenseByHand", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialSupportData", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialSupportDataLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("typeFinancialSupport", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fundingSources", "http://bus.gov.ru/types/1"), typeof(fundingSourcesLocalType));
                localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
                localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
                localElementDictionary.Add(XName.Get("returnExpense", "http://bus.gov.ru/types/1"), typeof(returnExpenseLocalType));
                localElementDictionary.Add(XName.Get("returnExpenseByHand", "http://bus.gov.ru/types/1"), typeof(returnExpenseByHandLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class typeFinancialSupportLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "(2|4|5|6|7)"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private typeFinancialSupportLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class fundingSourcesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator fundingSourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fundingSourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static fundingSourcesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public fundingSourcesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("fundingSources", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<fundingSourcesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class incomeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static incomeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public incomeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("income", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class expenseLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelType> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static expenseLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public expenseLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelType> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelType>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("expense", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class returnExpenseLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator returnExpenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<returnExpenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static returnExpenseLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public returnExpenseLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelReturnExpenseType_2015> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelReturnExpenseType_2015>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("returnExpense", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<returnExpenseLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelReturnExpenseType_2015));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public partial class returnExpenseByHandLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015> reportItemField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator returnExpenseByHandLocalType(XElement xe) { return XTypedServices.ToXTypedElement<returnExpenseByHandLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static returnExpenseByHandLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public returnExpenseByHandLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (reportItem+)
                /// </para>
                /// </summary>
                public IList<reportItemF0503737TopLevelReturnExpenseType_2015> reportItem {
                    get {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = new XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        return this.reportItemField;
                    }
                    set {
                        if ((value == null)) {
                            this.reportItemField = null;
                        }
                        else {
                            if ((this.reportItemField == null)) {
                                this.reportItemField = XTypedList<reportItemF0503737TopLevelReturnExpenseType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<reportItemF0503737TopLevelReturnExpenseType_2015>(this.reportItemField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("returnExpenseByHand", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<returnExpenseByHandLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737TopLevelReturnExpenseType_2015));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
    /// </para>
    /// </summary>
    public partial class annualBalanceGeneralDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceGeneralDataType(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceGeneralDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceGeneralDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public annualBalanceGeneralDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата предоставления данных в Балансе учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Периодичность
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public string periodicity {
            get {
                XElement x = this.GetElement(XName.Get("periodicity", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("periodicity", "http://bus.gov.ru/types/1"), value, "periodicity", global::bus.gov.ru.types.Item1.periodicityType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Единица измерения. Значение «руб»
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public refNsiOkeiType okei {
            get {
                XElement x = this.GetElement(XName.Get("okei", "http://bus.gov.ru/types/1"));
                return ((refNsiOkeiType)(x));
            }
            set {
                this.SetElement(XName.Get("okei", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public string okpo {
            get {
                XElement x = this.GetElement(XName.Get("okpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okpo", "http://bus.gov.ru/types/1"), value, "okpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКАТО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public refNsiOkatoType okato {
            get {
                XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                return ((refNsiOkatoType)(x));
            }
            set {
                this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код главы ГРБС (Первые три символа КБК)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, okato, section?)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceGeneralDataType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceGeneralDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
    /// </para>
    /// </summary>
    public partial class annualBalanceGeneralDataType2014 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceGeneralDataType2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceGeneralDataType2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceGeneralDataType2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public annualBalanceGeneralDataType2014() {
        }
        
        /// <summary>
        /// <para>
        /// Дата предоставления данных в Балансе учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Периодичность
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public string periodicity {
            get {
                XElement x = this.GetElement(XName.Get("periodicity", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("periodicity", "http://bus.gov.ru/types/1"), value, "periodicity", global::bus.gov.ru.types.Item1.periodicityType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Единица измерения. Значение «руб»
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public refNsiOkeiType okei {
            get {
                XElement x = this.GetElement(XName.Get("okei", "http://bus.gov.ru/types/1"));
                return ((refNsiOkeiType)(x));
            }
            set {
                this.SetElement(XName.Get("okei", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public string okpo {
            get {
                XElement x = this.GetElement(XName.Get("okpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okpo", "http://bus.gov.ru/types/1"), value, "okpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код главы ГРБС (Первые три символа КБК)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, inn, section?, oktmo)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceGeneralDataType2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceGeneralDataType2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Общие данные о балансе государственного (муниципального) учреждения без ИНН
    /// </para>
    /// <para>
    /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
    /// </para>
    /// </summary>
    public partial class annualBalanceGeneralDataTypeCommon2014 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceGeneralDataTypeCommon2014(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceGeneralDataTypeCommon2014>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceGeneralDataTypeCommon2014() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodicity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okei", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Общие данные о балансе государственного (муниципального) учреждения без ИНН
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public annualBalanceGeneralDataTypeCommon2014() {
        }
        
        /// <summary>
        /// <para>
        /// Дата предоставления данных в Балансе учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Периодичность
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public string periodicity {
            get {
                XElement x = this.GetElement(XName.Get("periodicity", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("periodicity", "http://bus.gov.ru/types/1"), value, "periodicity", global::bus.gov.ru.types.Item1.periodicityType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Единица измерения. Значение «руб»
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public refNsiOkeiType okei {
            get {
                XElement x = this.GetElement(XName.Get("okei", "http://bus.gov.ru/types/1"));
                return ((refNsiOkeiType)(x));
            }
            set {
                this.SetElement(XName.Get("okei", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public string okpo {
            get {
                XElement x = this.GetElement(XName.Get("okpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okpo", "http://bus.gov.ru/types/1"), value, "okpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код главы ГРБС (Первые три символа КБК)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, periodicity, okei, okpo, section?, oktmo)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceGeneralDataTypeCommon2014", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceGeneralDataTypeCommon2014>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("periodicity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okei", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Дочерний филиал
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?, type?)
    /// </para>
    /// </summary>
    public partial class branchChildType : global::bus.gov.ru.types.Item1.refNsiOgsStrongType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator branchChildType(XElement xe) { return XTypedServices.ToXTypedElement<branchChildType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static branchChildType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Дочерний филиал
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, type?)
        /// </para>
        /// </summary>
        public branchChildType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип филиала
        ///
        ///Допустимые значения:
        /// 01 - филиал;
        /// 02 - обособленное структурное подразделение;
        /// 03 - представительство.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, type?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.branchTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("branchChildType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<branchChildType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Дочерний филиал (ВСРИ)
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?, type?)
    /// </para>
    /// </summary>
    public partial class branchChildVSRIType : global::bus.gov.ru.types.Item1.refNsiConsRegStrongType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator branchChildVSRIType(XElement xe) { return XTypedServices.ToXTypedElement<branchChildVSRIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static branchChildVSRIType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Дочерний филиал (ВСРИ)
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, type?)
        /// </para>
        /// </summary>
        public branchChildVSRIType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип филиала
        ///
        ///Допустимые значения:
        /// 01 - филиал;
        /// 02 - обособленное структурное подразделение;
        /// 03 - представительство.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, type?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.branchTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("branchChildVSRIType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<branchChildVSRIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Головное учреждение
    /// </para>
    /// <para>
    /// Regular expression: (type, headOffice)
    /// </para>
    /// </summary>
    public partial class branchParentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator branchParentType(XElement xe) { return XTypedServices.ToXTypedElement<branchParentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static branchParentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("headOffice", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Головное учреждение
        /// </para>
        /// <para>
        /// Regular expression: (type, headOffice)
        /// </para>
        /// </summary>
        public branchParentType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип филиала
        ///
        ///Допустимые значения:
        /// 01 - филиал;
        /// 02 - обособленное структурное подразделение;
        /// 03 - представительство.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, headOffice)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.branchTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Головное учреждение
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, headOffice)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType headOffice {
            get {
                XElement x = this.GetElement(XName.Get("headOffice", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("headOffice", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("branchParentType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<branchParentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("headOffice", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Головное учреждение (ВСРИ)
    /// </para>
    /// <para>
    /// Regular expression: (type?, headOffice)
    /// </para>
    /// </summary>
    public partial class branchParentVSRIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator branchParentVSRIType(XElement xe) { return XTypedServices.ToXTypedElement<branchParentVSRIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static branchParentVSRIType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("headOffice", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Головное учреждение (ВСРИ)
        /// </para>
        /// <para>
        /// Regular expression: (type?, headOffice)
        /// </para>
        /// </summary>
        public branchParentVSRIType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип филиала
        ///
        ///Допустимые значения:
        /// 01 - филиал;
        /// 02 - обособленное структурное подразделение;
        /// 03 - представительство.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type?, headOffice)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.branchTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Головное учреждение
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type?, headOffice)
        /// </para>
        /// </summary>
        public refNsiConsRegStrongType headOffice {
            get {
                XElement x = this.GetElement(XName.Get("headOffice", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("headOffice", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("branchParentVSRIType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<branchParentVSRIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("headOffice", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegStrongType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Информация о показателях бюджетной сметы
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
    /// </para>
    /// </summary>
    public partial class budgetaryCircumstancesType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<budgetaryCircumstanceLocalType> budgetaryCircumstanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator budgetaryCircumstancesType(XElement xe) { return XTypedServices.ToXTypedElement<budgetaryCircumstancesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static budgetaryCircumstancesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetaryCircumstance", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Информация о показателях бюджетной сметы
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
        /// </para>
        /// </summary>
        public budgetaryCircumstancesType() {
        }
        
        /// <summary>
        /// <para>
        /// Финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код главы ГРБС (Первые три символа КБК)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетные обязательства
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.budgetaryCircumstancesType.budgetaryCircumstanceLocalType> budgetaryCircumstance {
            get {
                if ((this.budgetaryCircumstanceField == null)) {
                    this.budgetaryCircumstanceField = new XTypedList<budgetaryCircumstanceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("budgetaryCircumstance", "http://bus.gov.ru/types/1"));
                }
                return this.budgetaryCircumstanceField;
            }
            set {
                if ((value == null)) {
                    this.budgetaryCircumstanceField = null;
                }
                else {
                    if ((this.budgetaryCircumstanceField == null)) {
                        this.budgetaryCircumstanceField = XTypedList<budgetaryCircumstanceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budgetaryCircumstance", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<budgetaryCircumstanceLocalType>(this.budgetaryCircumstanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, section?, budgetaryCircumstance*, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("budgetaryCircumstancesType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<budgetaryCircumstancesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetaryCircumstance", "http://bus.gov.ru/types/1"), typeof(budgetaryCircumstanceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (kbkBudget, circumstance)
        /// </para>
        /// </summary>
        public partial class budgetaryCircumstanceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator budgetaryCircumstanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<budgetaryCircumstanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static budgetaryCircumstanceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("kbkBudget", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("circumstance", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (kbkBudget, circumstance)
            /// </para>
            /// </summary>
            public budgetaryCircumstanceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Cвязи бюджета и кодов КБК
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (kbkBudget, circumstance)
            /// </para>
            /// </summary>
            public refNsiKbkBudgetType kbkBudget {
                get {
                    XElement x = this.GetElement(XName.Get("kbkBudget", "http://bus.gov.ru/types/1"));
                    return ((refNsiKbkBudgetType)(x));
                }
                set {
                    this.SetElement(XName.Get("kbkBudget", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сумма
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (kbkBudget, circumstance)
            /// </para>
            /// </summary>
            public decimal circumstance {
                get {
                    XElement x = this.GetElement(XName.Get("circumstance", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("circumstance", "http://bus.gov.ru/types/1"), value, "circumstance", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("budgetaryCircumstance", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<budgetaryCircumstanceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("kbkBudget", "http://bus.gov.ru/types/1"), typeof(refNsiKbkBudgetType));
                localElementDictionary.Add(XName.Get("circumstance", "http://bus.gov.ru/types/1"), typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Базовый тип изменяемой позиции
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate)
    /// </para>
    /// </summary>
    public abstract partial class changablePositionType : global::bus.gov.ru.types.Item1.positionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator changablePositionType(XElement xe) {  return (changablePositionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static changablePositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Базовый тип изменяемой позиции
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate)
        /// </para>
        /// </summary>
        public changablePositionType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата и время изменения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate)
        /// </para>
        /// </summary>
        public System.DateTime changeDate {
            get {
                XElement x = this.GetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("changablePositionType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатель изменения
    /// </para>
    /// <para>
    /// Regular expression: (type, quantity?)
    /// </para>
    /// </summary>
    public partial class changeIndexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator changeIndexType(XElement xe) { return XTypedServices.ToXTypedElement<changeIndexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static changeIndexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("quantity", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатель изменения
        /// </para>
        /// <para>
        /// Regular expression: (type, quantity?)
        /// </para>
        /// </summary>
        public changeIndexType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип изменения
        ///
        ///Допустимые значения:
        /// I – увеличение;
        /// D – уменьшение;
        /// U – без изменений.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, quantity?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Величина изменения в %
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type, quantity?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> quantity {
            get {
                XElement x = this.GetElement(XName.Get("quantity", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("quantity", "http://bus.gov.ru/types/1"), value, "quantity", global::bus.gov.ru.types.Item1.percentType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("changeIndexType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<changeIndexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("quantity", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class typeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "I",
                            "D",
                            "U"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private typeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Диапазон изменения
    /// </para>
    /// <para>
    /// Regular expression: (beginYear, endYear)
    /// </para>
    /// </summary>
    public partial class changeRangeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator changeRangeType(XElement xe) { return XTypedServices.ToXTypedElement<changeRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static changeRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("beginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Диапазон изменения
        /// </para>
        /// <para>
        /// Regular expression: (beginYear, endYear)
        /// </para>
        /// </summary>
        public changeRangeType() {
        }
        
        /// <summary>
        /// <para>
        /// На начало года
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (beginYear, endYear)
        /// </para>
        /// </summary>
        public decimal beginYear {
            get {
                XElement x = this.GetElement(XName.Get("beginYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("beginYear", "http://bus.gov.ru/types/1"), value, "beginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// На конец года
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (beginYear, endYear)
        /// </para>
        /// </summary>
        public decimal endYear {
            get {
                XElement x = this.GetElement(XName.Get("endYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("endYear", "http://bus.gov.ru/types/1"), value, "endYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("changeRangeType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<changeRangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("beginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("endYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Справочники и классификаторы заявки на изменение
    /// </para>
    /// <para>
    /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved*)
    /// </para>
    /// </summary>
    public partial class changeRequestClassifierType : global::bus.gov.ru.types.Item1.classifierType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refNsiOkvedType> okvedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator changeRequestClassifierType(XElement xe) { return XTypedServices.ToXTypedElement<changeRequestClassifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static changeRequestClassifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("okfs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okopf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okogu", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okved", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Справочники и классификаторы заявки на изменение
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved*)
        /// </para>
        /// </summary>
        public changeRequestClassifierType() {
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved*)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved*)
        /// </para>
        /// </summary>
        public IList<refNsiOkvedType> okved {
            get {
                if ((this.okvedField == null)) {
                    this.okvedField = new XTypedList<refNsiOkvedType>(this, LinqToXsdTypeManager.Instance, XName.Get("okved", "http://bus.gov.ru/types/1"));
                }
                return this.okvedField;
            }
            set {
                if ((value == null)) {
                    this.okvedField = null;
                }
                else {
                    if ((this.okvedField == null)) {
                        this.okvedField = XTypedList<refNsiOkvedType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("okved", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<refNsiOkvedType>(this.okvedField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("changeRequestClassifierType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<changeRequestClassifierType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("okfs", "http://bus.gov.ru/types/1"), typeof(refNsiOkfsType));
            localElementDictionary.Add(XName.Get("okopf", "http://bus.gov.ru/types/1"), typeof(refNsiOkopfType));
            localElementDictionary.Add(XName.Get("okogu", "http://bus.gov.ru/types/1"), typeof(refNsiOkoguType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("okved", "http://bus.gov.ru/types/1"), typeof(refNsiOkvedType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Заявка на изменение
    /// </para>
    /// <para>
    /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
    /// </para>
    /// </summary>
    public partial class changeRequestType : global::bus.gov.ru.types.Item1.positionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator changeRequestType(XElement xe) { return XTypedServices.ToXTypedElement<changeRequestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static changeRequestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("requestDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("requestNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("head", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("other", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Заявка на изменение
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public changeRequestType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата заявки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public System.DateTime requestDate {
            get {
                XElement x = this.GetElement(XName.Get("requestDate", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("requestDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер заявки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public string requestNumber {
            get {
                XElement x = this.GetElement(XName.Get("requestNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("requestNumber", "http://bus.gov.ru/types/1"), value, "requestNumber", requestNumberLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Руководитель (уполномоченное лицо)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public headLocalType head {
            get {
                XElement x = this.GetElement(XName.Get("head", "http://bus.gov.ru/types/1"));
                return ((headLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("head", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата ввода в действие
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> startDateActive {
            get {
                XElement x = this.GetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Остальные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public otherLocalType other {
            get {
                XElement x = this.GetElement(XName.Get("other", "http://bus.gov.ru/types/1"));
                return ((otherLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("other", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Подтверждающий документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, requestDate, requestNumber, head?, startDateActive?, regNum?, main?, other?, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("changeRequestType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<changeRequestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("requestDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("requestNumber", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("head", "http://bus.gov.ru/types/1"), typeof(headLocalType));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("other", "http://bus.gov.ru/types/1"), typeof(otherLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class requestNumberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 13, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private requestNumberLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (signDeciphering, position?)
        /// </para>
        /// </summary>
        public partial class headLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator headLocalType(XElement xe) { return XTypedServices.ToXTypedElement<headLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static headLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("signDeciphering", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("position", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (signDeciphering, position?)
            /// </para>
            /// </summary>
            public headLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Расшифровка подписи
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (signDeciphering, position?)
            /// </para>
            /// </summary>
            public string signDeciphering {
                get {
                    XElement x = this.GetElement(XName.Get("signDeciphering", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("signDeciphering", "http://bus.gov.ru/types/1"), value, "signDeciphering", signDecipheringLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Должность
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (signDeciphering, position?)
            /// </para>
            /// </summary>
            public string position {
                get {
                    XElement x = this.GetElement(XName.Get("position", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("position", "http://bus.gov.ru/types/1"), value, "position", positionLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("head", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<headLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("signDeciphering", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("position", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class signDecipheringLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 210, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private signDecipheringLocalType() {
                }
            }
            
            private class positionLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private positionLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<institutionBudgetSoftType> budgetField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в СПЗ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string regNumSpz {
                get {
                    XElement x = this.GetElement(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), value, "regNumSpz", global::bus.gov.ru.types.Item1.spzCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в ПУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string regNumPubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), value, "regNumPubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в РУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string regNumRubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), value, "regNumRubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в НУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string regNumNubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), value, "regNumNubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ИНН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string inn {
                get {
                    XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КПП
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string kpp {
                get {
                    XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string ogrn {
                get {
                    XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType rbs {
                get {
                    XElement x = this.GetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Главный распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType grbs {
                get {
                    XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
            /// 03 - бюджетное учреждение;
            /// 08 -  казенное учреждение;
            /// 10 - автономное учреждение.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.changeRequestOrgTypeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ТОФК клиента
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public refNsiTofkType tofk {
                get {
                    XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                    return ((refNsiTofkType)(x));
                }
                set {
                    this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Специальные указания
            ///
            ///Допустимые значения:
            /// 01 - отзыв;
            /// 02 - аннулирование полномочий органом государственной власти (местного самоуправления), осуществляющим функции и полномочия учредителя (организацией, являющейся представителем учреждения);
            /// 03 - аннулирование полномочий организацией;
            /// 04 - организации не предоставляются субсидии;
            /// 05 - организации предоставляются субсидии.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public string special {
                get {
                    XElement x = this.GetElement(XName.Get("special", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("special", "http://bus.gov.ru/types/1"), value, "special", global::bus.gov.ru.types.Item1.changeRequestSpecialType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовый орган
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType financial {
                get {
                    XElement x = this.GetElement(XName.Get("financial", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("financial", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на сайте ГМУ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public credentialsGmuType credentialsGmu {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"));
                    return ((credentialsGmuType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Общероссийские классификаторы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public changeRequestClassifierType classifier {
                get {
                    XElement x = this.GetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"));
                    return ((changeRequestClassifierType)(x));
                }
                set {
                    this.SetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Бюджет
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public IList<institutionBudgetSoftType> budget {
                get {
                    if ((this.budgetField == null)) {
                        this.budgetField = new XTypedList<institutionBudgetSoftType>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", "http://bus.gov.ru/types/1"));
                    }
                    return this.budgetField;
                }
                set {
                    if ((value == null)) {
                        this.budgetField = null;
                    }
                    else {
                        if ((this.budgetField == null)) {
                            this.budgetField = XTypedList<institutionBudgetSoftType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<institutionBudgetSoftType>(this.budgetField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Фактический адрес
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public addressSoftType address {
                get {
                    XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                    return ((addressSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("address", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является органом государственной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public System.Nullable<bool> ogv {
                get {
                    XElement x = this.GetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Публично-правовое образование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsGmu?, classifier, budget+, address?, ogv?, ppo)
            /// </para>
            /// </summary>
            public ppoLocalType ppo {
                get {
                    XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                    return ((ppoLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
                localElementDictionary.Add(XName.Get("special", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("financial", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), typeof(credentialsGmuType));
                localElementDictionary.Add(XName.Get("classifier", "http://bus.gov.ru/types/1"), typeof(changeRequestClassifierType));
                localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(institutionBudgetSoftType));
                localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(addressSoftType));
                localElementDictionary.Add(XName.Get("ogv", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(ppoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, oktmo)
            /// </para>
            /// </summary>
            public partial class ppoLocalType : global::bus.gov.ru.types.Item1.PPO_OGSType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ppoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ppoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name, oktmo)
                /// </para>
                /// </summary>
                public ppoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ОКТМО публично-правового образования
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (name, oktmo)
                /// </para>
                /// </summary>
                public refNsiOktmoType oktmo {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                        return ((refNsiOktmoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ppo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ppoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (chief?, founder*)
        /// </para>
        /// </summary>
        public partial class otherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLocalType> founderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("chief", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public otherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Руководитель
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public chiefLocalType chief {
                get {
                    XElement x = this.GetElement(XName.Get("chief", "http://bus.gov.ru/types/1"));
                    return ((chiefLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("chief", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.changeRequestType.otherLocalType.founderLocalType> founder {
                get {
                    if ((this.founderField == null)) {
                        this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                    }
                    return this.founderField;
                }
                set {
                    if ((value == null)) {
                        this.founderField = null;
                    }
                    else {
                        if ((this.founderField == null)) {
                            this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLocalType>(this.founderField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("other", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("chief", "http://bus.gov.ru/types/1"), typeof(chiefLocalType));
                localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (lastName, firstName, middleName?, position, inn?)
            /// </para>
            /// </summary>
            public partial class chiefLocalType : global::bus.gov.ru.types.Item1.employeeType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator chiefLocalType(XElement xe) { return XTypedServices.ToXTypedElement<chiefLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static chiefLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lastName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("firstName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("middleName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("position", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (lastName, firstName, middleName?, position, inn?)
                /// </para>
                /// </summary>
                public chiefLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ИНН
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (lastName, firstName, middleName?, position, inn?)
                /// </para>
                /// </summary>
                public string inn {
                    get {
                        XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innFlType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("chief", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<chiefLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("lastName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("firstName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("middleName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("position", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum?, fullName, inn?, kpp?, ogrn?, authorities?)
            /// </para>
            /// </summary>
            public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiOgsExtendedSoftType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static founderLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ogrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, inn?, kpp?, ogrn?, authorities?)
                /// </para>
                /// </summary>
                public founderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ОГРН
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, inn?, kpp?, ogrn?, authorities?)
                /// </para>
                /// </summary>
                public string ogrn {
                    get {
                        XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Полномочия учредителя
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, inn?, kpp?, ogrn?, authorities?)
                /// </para>
                /// </summary>
                public founderAuthoritiesType authorities {
                    get {
                        XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                        return ((founderAuthoritiesType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founder", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Справочники и классификаторы 
    /// </para>
    /// <para>
    /// Regular expression: (okfs, okopf, okogu?, okpo)
    /// </para>
    /// </summary>
    public abstract partial class classifierType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator classifierType(XElement xe) {  return (classifierType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static classifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("okfs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okopf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okogu", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Справочники и классификаторы 
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo)
        /// </para>
        /// </summary>
        public classifierType() {
        }
        
        /// <summary>
        /// <para>
        /// ОКФС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo)
        /// </para>
        /// </summary>
        public refNsiOkfsType okfs {
            get {
                XElement x = this.GetElement(XName.Get("okfs", "http://bus.gov.ru/types/1"));
                return ((refNsiOkfsType)(x));
            }
            set {
                this.SetElement(XName.Get("okfs", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКОПФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo)
        /// </para>
        /// </summary>
        public refNsiOkopfType okopf {
            get {
                XElement x = this.GetElement(XName.Get("okopf", "http://bus.gov.ru/types/1"));
                return ((refNsiOkopfType)(x));
            }
            set {
                this.SetElement(XName.Get("okopf", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКОГУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo)
        /// </para>
        /// </summary>
        public refNsiOkoguType okogu {
            get {
                XElement x = this.GetElement(XName.Get("okogu", "http://bus.gov.ru/types/1"));
                return ((refNsiOkoguType)(x));
            }
            set {
                this.SetElement(XName.Get("okogu", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКПО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo)
        /// </para>
        /// </summary>
        public string okpo {
            get {
                XElement x = this.GetElement(XName.Get("okpo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okpo", "http://bus.gov.ru/types/1"), value, "okpo", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("classifierType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("okfs", "http://bus.gov.ru/types/1"), typeof(refNsiOkfsType));
            localElementDictionary.Add(XName.Get("okopf", "http://bus.gov.ru/types/1"), typeof(refNsiOkopfType));
            localElementDictionary.Add(XName.Get("okogu", "http://bus.gov.ru/types/1"), typeof(refNsiOkoguType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Перечень неполных записей Сводного реестра
    /// </para>
    /// <para>
    /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
    /// </para>
    /// </summary>
    public partial class consRegStatType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<violationType> violationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator consRegStatType(XElement xe) { return XTypedServices.ToXTypedElement<consRegStatType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static consRegStatType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("refId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("refPositionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("violation", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Перечень неполных записей Сводного реестра
        /// </para>
        /// <para>
        /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
        /// </para>
        /// </summary>
        public consRegStatType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор обработанного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
        /// </para>
        /// </summary>
        public string refId {
            get {
                XElement x = this.GetElement(XName.Get("refId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("refId", "http://bus.gov.ru/types/1"), value, "refId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор обработанной позиции
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
        /// </para>
        /// </summary>
        public string refPositionId {
            get {
                XElement x = this.GetElement(XName.Get("refPositionId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("refPositionId", "http://bus.gov.ru/types/1"), value, "refPositionId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации в Сводном реестре
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
        /// </para>
        /// </summary>
        public string regNumConsReg {
            get {
                XElement x = this.GetElement(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"), value, "regNumConsReg", global::bus.gov.ru.types.Item1.regNumConsRegOgsType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Выявленные в процессе обработки записи Сводного реестра нарушение целостности
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (refId, refPositionId, regNumConsReg, violation+)
        /// </para>
        /// </summary>
        public IList<violationType> violation {
            get {
                if ((this.violationField == null)) {
                    this.violationField = new XTypedList<violationType>(this, LinqToXsdTypeManager.Instance, XName.Get("violation", "http://bus.gov.ru/types/1"));
                }
                return this.violationField;
            }
            set {
                if ((value == null)) {
                    this.violationField = null;
                }
                else {
                    if ((this.violationField == null)) {
                        this.violationField = XTypedList<violationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("violation", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<violationType>(this.violationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("consRegStatType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<consRegStatType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("refId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("refPositionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("violation", "http://bus.gov.ru/types/1"), typeof(violationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Полномочия ФК
    /// </para>
    /// <para>
    /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
    /// </para>
    /// </summary>
    public partial class credentialsFkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator credentialsFkType(XElement xe) { return XTypedServices.ToXTypedElement<credentialsFkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static credentialsFkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("grbs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("pbs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ipbs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gadb", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("adb", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gaivf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gaivnf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("aivf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("aivnf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("svr", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия ФК
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public credentialsFkType() {
        }
        
        /// <summary>
        /// <para>
        /// Полномочия ГРБС (РБС) РФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool grbs {
            get {
                XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия получателя средств бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool pbs {
            get {
                XElement x = this.GetElement(XName.Get("pbs", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("pbs", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия иного получателя средств бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool ipbs {
            get {
                XElement x = this.GetElement(XName.Get("ipbs", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("ipbs", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия главного администратора доходов бюджета (администратора, осуществляющего отдельные полномочия главного администратора)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool gadb {
            get {
                XElement x = this.GetElement(XName.Get("gadb", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("gadb", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия администратора доходов бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool adb {
            get {
                XElement x = this.GetElement(XName.Get("adb", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("adb", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия главного администратора источников внутреннего финансирования дефицита бюджета (администратора, осуществляющего отдельные полномочия главного администратора)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool gaivf {
            get {
                XElement x = this.GetElement(XName.Get("gaivf", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("gaivf", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия главного администратора источников внешнего финансирования дефицита бюджета (администратора, осуществляющего отдельные полномочия главного администратора)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool gaivnf {
            get {
                XElement x = this.GetElement(XName.Get("gaivnf", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("gaivnf", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия администратора источников внутреннего финансирования дефицита бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool aivf {
            get {
                XElement x = this.GetElement(XName.Get("aivf", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("aivf", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия администратора источников внешнего финансирования дефицита бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool aivnf {
            get {
                XElement x = this.GetElement(XName.Get("aivnf", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("aivnf", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия по осуществлению операций со средствами, поступающими во временное распоряжение
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (grbs, pbs, ipbs, gadb, adb, gaivf, gaivnf, aivf, aivnf, svr)
        /// </para>
        /// </summary>
        public bool svr {
            get {
                XElement x = this.GetElement(XName.Get("svr", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("svr", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("credentialsFkType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<credentialsFkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("pbs", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("ipbs", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("gadb", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("adb", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("gaivf", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("gaivnf", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("aivf", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("aivnf", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("svr", "http://bus.gov.ru/types/1"), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Полномочия учреждения на сайте ГМУ
    /// </para>
    /// <para>
    /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
    /// </para>
    /// </summary>
    public partial class credentialsGmuType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator credentialsGmuType(XElement xe) { return XTypedServices.ToXTypedElement<credentialsGmuType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static credentialsGmuType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("institution", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorized", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("finOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisorOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderOrg", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учреждения на сайте ГМУ
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public credentialsGmuType() {
        }
        
        /// <summary>
        /// <para>
        /// Полномочие учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public bool institution {
            get {
                XElement x = this.GetElement(XName.Get("institution", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("institution", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие организации, являющейся представителем учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public bool authorized {
            get {
                XElement x = this.GetElement(XName.Get("authorized", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("authorized", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие финансового органа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public bool finOrg {
            get {
                XElement x = this.GetElement(XName.Get("finOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("finOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие контролирующего органа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public bool supervisorOrg {
            get {
                XElement x = this.GetElement(XName.Get("supervisorOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("supervisorOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие органа, осуществляющего функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (institution, authorized, finOrg, supervisorOrg, founderOrg)
        /// </para>
        /// </summary>
        public bool founderOrg {
            get {
                XElement x = this.GetElement(XName.Get("founderOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("founderOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("credentialsGmuType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<credentialsGmuType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("institution", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("authorized", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("finOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("supervisorOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("founderOrg", "http://bus.gov.ru/types/1"), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Полномочия учреждения на ООС
    /// </para>
    /// <para>
    /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
    /// </para>
    /// </summary>
    public partial class credentialsOosType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator credentialsOosType(XElement xe) { return XTypedServices.ToXTypedElement<credentialsOosType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static credentialsOosType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nationalCustomer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorizedAgency", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("specialOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("finOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("operatorOos", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("operatorEp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OROrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OAOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OKOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("IKOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OVKOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OPOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OTOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OTKOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("OZOrg", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учреждения на ООС
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public credentialsOosType() {
        }
        
        /// <summary>
        /// <para>
        /// Полномочие государственного (муниципального) заказчика
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool nationalCustomer {
            get {
                XElement x = this.GetElement(XName.Get("nationalCustomer", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("nationalCustomer", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие уполномоченного органа по осуществлению закупок
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool authorizedOrg {
            get {
                XElement x = this.GetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие уполномоченного учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool authorizedAgency {
            get {
                XElement x = this.GetElement(XName.Get("authorizedAgency", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("authorizedAgency", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие специализированной организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool specialOrg {
            get {
                XElement x = this.GetElement(XName.Get("specialOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("specialOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие финансового органа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool finOrg {
            get {
                XElement x = this.GetElement(XName.Get("finOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("finOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие оператора ООС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool operatorOos {
            get {
                XElement x = this.GetElement(XName.Get("operatorOos", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("operatorOos", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочие оператора ЭП
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool operatorEp {
            get {
                XElement x = this.GetElement(XName.Get("operatorEp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("operatorEp", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа по регулированию контрактной системы в сфере закупок
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OROrg {
            get {
                XElement x = this.GetElement(XName.Get("OROrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OROrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа по регулированию контрактной системы в сфере закупок
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OAOrg {
            get {
                XElement x = this.GetElement(XName.Get("OAOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OAOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия банка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool bankOrg {
            get {
                XElement x = this.GetElement(XName.Get("bankOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("bankOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия контрольного органа в сфере закупок
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OKOrg {
            get {
                XElement x = this.GetElement(XName.Get("OKOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OKOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа контроля соответствия информации об объеме финансового обеспечения и идентификационных кодах закупок
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool IKOrg {
            get {
                XElement x = this.GetElement(XName.Get("IKOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("IKOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа внутреннего контроля
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OVKOrg {
            get {
                XElement x = this.GetElement(XName.Get("OVKOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OVKOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа, устанавливающего правила нормирования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OPOrg {
            get {
                XElement x = this.GetElement(XName.Get("OPOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OPOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа, утверждающего требования к отдельным видам товаров, работ, услуг
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OTOrg {
            get {
                XElement x = this.GetElement(XName.Get("OTOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OTOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия органа, разрабатывающего типовые контракты и типовые условия контрактов
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OTKOrg {
            get {
                XElement x = this.GetElement(XName.Get("OTKOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OTKOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия организации, осуществляющей полномочия заказчика на осуществление закупок на основании договора (соглашения) в соответствии с частью 6 статьи 15 Федерального закона № 44-ФЗ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nationalCustomer, authorizedOrg, authorizedAgency, specialOrg, finOrg, operatorOos, operatorEp, OROrg, OAOrg, bankOrg, OKOrg, IKOrg, OVKOrg, OPOrg, OTOrg, OTKOrg, OZOrg)
        /// </para>
        /// </summary>
        public bool OZOrg {
            get {
                XElement x = this.GetElement(XName.Get("OZOrg", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("OZOrg", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("credentialsOosType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<credentialsOosType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("nationalCustomer", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("authorizedAgency", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("specialOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("finOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("operatorOos", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("operatorEp", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OROrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OAOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("bankOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OKOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("IKOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OVKOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OPOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OTOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OTKOrg", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("OZOrg", "http://bus.gov.ru/types/1"), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Иная информация об учреждении
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main, additional*)
    /// </para>
    /// </summary>
    public partial class diverseInfoType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<additionalLocalType> additionalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator diverseInfoType(XElement xe) { return XTypedServices.ToXTypedElement<diverseInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static diverseInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("additional", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Иная информация об учреждении
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main, additional*)
        /// </para>
        /// </summary>
        public diverseInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Обязательная информация
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main, additional*)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительная информация
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main, additional*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.diverseInfoType.additionalLocalType> additional {
            get {
                if ((this.additionalField == null)) {
                    this.additionalField = new XTypedList<additionalLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("additional", "http://bus.gov.ru/types/1"));
                }
                return this.additionalField;
            }
            set {
                if ((value == null)) {
                    this.additionalField = null;
                }
                else {
                    if ((this.additionalField == null)) {
                        this.additionalField = XTypedList<additionalLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("additional", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<additionalLocalType>(this.additionalField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("diverseInfoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<diverseInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("additional", "http://bus.gov.ru/types/1"), typeof(additionalLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (orgList+)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<orgListType> orgListField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("orgList", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (orgList+)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Перечень организаций, в которых открыты счета
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (orgList+)
            /// </para>
            /// </summary>
            public IList<orgListType> orgList {
                get {
                    if ((this.orgListField == null)) {
                        this.orgListField = new XTypedList<orgListType>(this, LinqToXsdTypeManager.Instance, XName.Get("orgList", "http://bus.gov.ru/types/1"));
                    }
                    return this.orgListField;
                }
                set {
                    if ((value == null)) {
                        this.orgListField = null;
                    }
                    else {
                        if ((this.orgListField == null)) {
                            this.orgListField = XTypedList<orgListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("orgList", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<orgListType>(this.orgListField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("orgList", "http://bus.gov.ru/types/1"), typeof(orgListType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (paymentDetails*, licenseDetails*, accreditationDetails*)
        /// </para>
        /// </summary>
        public partial class additionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<paymentDetailsLocalType> paymentDetailsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<licenseDetailsLocalType> licenseDetailsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<accreditationDetailsLocalType> accreditationDetailsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator additionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<additionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static additionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("paymentDetails", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("licenseDetails", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accreditationDetails", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (paymentDetails*, licenseDetails*, accreditationDetails*)
            /// </para>
            /// </summary>
            public additionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Платежные реквизиты
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (paymentDetails*, licenseDetails*, accreditationDetails*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.diverseInfoType.additionalLocalType.paymentDetailsLocalType> paymentDetails {
                get {
                    if ((this.paymentDetailsField == null)) {
                        this.paymentDetailsField = new XTypedList<paymentDetailsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentDetails", "http://bus.gov.ru/types/1"));
                    }
                    return this.paymentDetailsField;
                }
                set {
                    if ((value == null)) {
                        this.paymentDetailsField = null;
                    }
                    else {
                        if ((this.paymentDetailsField == null)) {
                            this.paymentDetailsField = XTypedList<paymentDetailsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentDetails", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<paymentDetailsLocalType>(this.paymentDetailsField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Cведения о лицензии
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (paymentDetails*, licenseDetails*, accreditationDetails*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.diverseInfoType.additionalLocalType.licenseDetailsLocalType> licenseDetails {
                get {
                    if ((this.licenseDetailsField == null)) {
                        this.licenseDetailsField = new XTypedList<licenseDetailsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("licenseDetails", "http://bus.gov.ru/types/1"));
                    }
                    return this.licenseDetailsField;
                }
                set {
                    if ((value == null)) {
                        this.licenseDetailsField = null;
                    }
                    else {
                        if ((this.licenseDetailsField == null)) {
                            this.licenseDetailsField = XTypedList<licenseDetailsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("licenseDetails", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<licenseDetailsLocalType>(this.licenseDetailsField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения об аккредитации
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (paymentDetails*, licenseDetails*, accreditationDetails*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.diverseInfoType.additionalLocalType.accreditationDetailsLocalType> accreditationDetails {
                get {
                    if ((this.accreditationDetailsField == null)) {
                        this.accreditationDetailsField = new XTypedList<accreditationDetailsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("accreditationDetails", "http://bus.gov.ru/types/1"));
                    }
                    return this.accreditationDetailsField;
                }
                set {
                    if ((value == null)) {
                        this.accreditationDetailsField = null;
                    }
                    else {
                        if ((this.accreditationDetailsField == null)) {
                            this.accreditationDetailsField = XTypedList<accreditationDetailsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("accreditationDetails", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<accreditationDetailsLocalType>(this.accreditationDetailsField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("additional", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<additionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("paymentDetails", "http://bus.gov.ru/types/1"), typeof(paymentDetailsLocalType));
                localElementDictionary.Add(XName.Get("licenseDetails", "http://bus.gov.ru/types/1"), typeof(licenseDetailsLocalType));
                localElementDictionary.Add(XName.Get("accreditationDetails", "http://bus.gov.ru/types/1"), typeof(accreditationDetailsLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
            /// </para>
            /// </summary>
            public partial class paymentDetailsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<paymentDetailsTargetsLocalType> paymentDetailsTargetsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator paymentDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static paymentDetailsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmoCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankCity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bik", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accountDetails", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public paymentDetailsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Тип информации о платежных реквизитах
                ///
                ///Допустимые значения:
                /// 01 - расчетный счет в кредитной организации;
                /// 02 - лицевой счет в ОрФК;
                /// 03 - лицевой счет в ФО
                ///											
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string paymentDetailsType {
                    get {
                        XElement x = this.GetElement(XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1"), value, "paymentDetailsType", paymentDetailsTypeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Полное наименование организации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string fullName {
                    get {
                        XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// ИНН
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string inn {
                    get {
                        XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// КПП
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string kpp {
                    get {
                        XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Код ОКТМО
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string oktmoCode {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmoCode", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("oktmoCode", "http://bus.gov.ru/types/1"), value, "oktmoCode", global::bus.gov.ru.types.Item1.oktmoCodeType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование банка
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string bankName {
                    get {
                        XElement x = this.GetElement(XName.Get("bankName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("bankName", "http://bus.gov.ru/types/1"), value, "bankName", bankNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Город, в котором расположен банк
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string bankCity {
                    get {
                        XElement x = this.GetElement(XName.Get("bankCity", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("bankCity", "http://bus.gov.ru/types/1"), value, "bankCity", bankCityLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// БИК
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string bik {
                    get {
                        XElement x = this.GetElement(XName.Get("bik", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("bik", "http://bus.gov.ru/types/1"), value, "bik", bikLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Номер расчетного счета
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public string calcAccountCode {
                    get {
                        XElement x = this.GetElement(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"), value, "calcAccountCode", calcAccountCodeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Информация о лицевом (корреспондетском) счете
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public accountDetailsLocalType accountDetails {
                    get {
                        XElement x = this.GetElement(XName.Get("accountDetails", "http://bus.gov.ru/types/1"));
                        return ((accountDetailsLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("accountDetails", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Назначение платежа
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (paymentDetailsType, fullName?, inn?, kpp?, oktmoCode?, bankName, bankCity?, bik, calcAccountCode, accountDetails?, paymentDetailsTargets+)
                /// </para>
                /// </summary>
                public IList<bus.gov.ru.types.Item1.diverseInfoType.additionalLocalType.paymentDetailsLocalType.paymentDetailsTargetsLocalType> paymentDetailsTargets {
                    get {
                        if ((this.paymentDetailsTargetsField == null)) {
                            this.paymentDetailsTargetsField = new XTypedList<paymentDetailsTargetsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"));
                        }
                        return this.paymentDetailsTargetsField;
                    }
                    set {
                        if ((value == null)) {
                            this.paymentDetailsTargetsField = null;
                        }
                        else {
                            if ((this.paymentDetailsTargetsField == null)) {
                                this.paymentDetailsTargetsField = XTypedList<paymentDetailsTargetsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<paymentDetailsTargetsLocalType>(this.paymentDetailsTargetsField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("paymentDetails", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<paymentDetailsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmoCode", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("bankName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("bankCity", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("bik", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("accountDetails", "http://bus.gov.ru/types/1"), typeof(accountDetailsLocalType));
                    localElementDictionary.Add(XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"), typeof(paymentDetailsTargetsLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class paymentDetailsTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "01",
                                    "02",
                                    "03"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private paymentDetailsTypeLocalType() {
                    }
                }
                
                private class fullNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private fullNameLocalType() {
                    }
                }
                
                private class bankNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private bankNameLocalType() {
                    }
                }
                
                private class bankCityLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 25, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private bankCityLocalType() {
                    }
                }
                
                private class bikLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "\\d{9}"}, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private bikLocalType() {
                    }
                }
                
                private class calcAccountCodeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "\\d{20}"}, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private calcAccountCodeLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: ((bankAccount? | orfkAccount? | foAccount?))
                /// </para>
                /// </summary>
                public partial class accountDetailsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
         public static explicit operator accountDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<accountDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static accountDetailsLocalType() {
                        BuildElementDictionary();
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: ((bankAccount? | orfkAccount? | foAccount?))
                    /// </para>
                    /// </summary>
                    public accountDetailsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Информация о счете в кредитной организации
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, choice
                    /// </para>
                    /// <para>
                    /// Setter: Appends
                    /// </para>
                    /// <para>
                    /// Regular expression: ((bankAccount? | orfkAccount? | foAccount?))
                    /// </para>
                    /// </summary>
                    public bankAccountLocalType bankAccount {
                        get {
                            XElement x = this.GetElement(XName.Get("bankAccount", "http://bus.gov.ru/types/1"));
                            return ((bankAccountLocalType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("bankAccount", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Информация о счете в ОрФК
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, choice
                    /// </para>
                    /// <para>
                    /// Setter: Appends
                    /// </para>
                    /// <para>
                    /// Regular expression: ((bankAccount? | orfkAccount? | foAccount?))
                    /// </para>
                    /// </summary>
                    public orfkAccountLocalType orfkAccount {
                        get {
                            XElement x = this.GetElement(XName.Get("orfkAccount", "http://bus.gov.ru/types/1"));
                            return ((orfkAccountLocalType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("orfkAccount", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Информация о счете в ФО
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, choice
                    /// </para>
                    /// <para>
                    /// Setter: Appends
                    /// </para>
                    /// <para>
                    /// Regular expression: ((bankAccount? | orfkAccount? | foAccount?))
                    /// </para>
                    /// </summary>
                    public foAccountLocalType foAccount {
                        get {
                            XElement x = this.GetElement(XName.Get("foAccount", "http://bus.gov.ru/types/1"));
                            return ((foAccountLocalType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("foAccount", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("accountDetails", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<accountDetailsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("bankAccount", "http://bus.gov.ru/types/1"), typeof(bankAccountLocalType));
                        localElementDictionary.Add(XName.Get("orfkAccount", "http://bus.gov.ru/types/1"), typeof(orfkAccountLocalType));
                        localElementDictionary.Add(XName.Get("foAccount", "http://bus.gov.ru/types/1"), typeof(foAccountLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (corAccountCode?, personalAccountCode?)
                    /// </para>
                    /// </summary>
                    public partial class bankAccountLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator bankAccountLocalType(XElement xe) { return XTypedServices.ToXTypedElement<bankAccountLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static bankAccountLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("corAccountCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (corAccountCode?, personalAccountCode?)
                        /// </para>
                        /// </summary>
                        public bankAccountLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Номер корреспондентского счета
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (corAccountCode?, personalAccountCode?)
                        /// </para>
                        /// </summary>
                        public string corAccountCode {
                            get {
                                XElement x = this.GetElement(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"), value, "corAccountCode", corAccountCodeLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Номер лицевого счета
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (corAccountCode?, personalAccountCode?)
                        /// </para>
                        /// </summary>
                        public string personalAccountCode {
                            get {
                                XElement x = this.GetElement(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), value, "personalAccountCode", personalAccountCodeLocalType.TypeDefinition);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("bankAccount", "http://bus.gov.ru/types/1");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<bankAccountLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
                            localElementDictionary.Add(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class corAccountCodeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                            "\\d{20}"}, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private corAccountCodeLocalType() {
                            }
                        }
                        
                        private class personalAccountCodeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private personalAccountCodeLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (orfkName, personalAccountCode)
                    /// </para>
                    /// </summary>
                    public partial class orfkAccountLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator orfkAccountLocalType(XElement xe) { return XTypedServices.ToXTypedElement<orfkAccountLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static orfkAccountLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("orfkName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (orfkName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public orfkAccountLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Наименование ОрФК по месту обслуживания лицевого счета
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (orfkName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public string orfkName {
                            get {
                                XElement x = this.GetElement(XName.Get("orfkName", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("orfkName", "http://bus.gov.ru/types/1"), value, "orfkName", orfkNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Номер лицевого счета
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (orfkName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public string personalAccountCode {
                            get {
                                XElement x = this.GetElement(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), value, "personalAccountCode", personalAccountCodeLocalType.TypeDefinition);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("orfkAccount", "http://bus.gov.ru/types/1");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<orfkAccountLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("orfkName", "http://bus.gov.ru/types/1"), typeof(string));
                            localElementDictionary.Add(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class orfkNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private orfkNameLocalType() {
                            }
                        }
                        
                        private class personalAccountCodeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                            "(\\p{L}|\\d){11}"}, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private personalAccountCodeLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (foName, personalAccountCode)
                    /// </para>
                    /// </summary>
                    public partial class foAccountLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator foAccountLocalType(XElement xe) { return XTypedServices.ToXTypedElement<foAccountLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static foAccountLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("foName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (foName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public foAccountLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Наименование ФО по месту обслуживания лицевого счета
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (foName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public string foName {
                            get {
                                XElement x = this.GetElement(XName.Get("foName", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("foName", "http://bus.gov.ru/types/1"), value, "foName", foNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Номер лицевого счета
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (foName, personalAccountCode)
                        /// </para>
                        /// </summary>
                        public string personalAccountCode {
                            get {
                                XElement x = this.GetElement(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), value, "personalAccountCode", personalAccountCodeLocalType.TypeDefinition);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("foAccount", "http://bus.gov.ru/types/1");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<foAccountLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("foName", "http://bus.gov.ru/types/1"), typeof(string));
                            localElementDictionary.Add(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class foNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private foNameLocalType() {
                            }
                        }
                        
                        private class personalAccountCodeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private personalAccountCodeLocalType() {
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (paymentType?, paymentTargetName, kbk)
                /// </para>
                /// </summary>
                public partial class paymentDetailsTargetsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator paymentDetailsTargetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentDetailsTargetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static paymentDetailsTargetsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("paymentType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (paymentType?, paymentTargetName, kbk)
                    /// </para>
                    /// </summary>
                    public paymentDetailsTargetsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Вид платежа
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (paymentType?, paymentTargetName, kbk)
                    /// </para>
                    /// </summary>
                    public string paymentType {
                        get {
                            XElement x = this.GetElement(XName.Get("paymentType", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("paymentType", "http://bus.gov.ru/types/1"), value, "paymentType", paymentTypeLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Назначение платежа
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (paymentType?, paymentTargetName, kbk)
                    /// </para>
                    /// </summary>
                    public string paymentTargetName {
                        get {
                            XElement x = this.GetElement(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"), value, "paymentTargetName", paymentTargetNameLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// КБК
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (paymentType?, paymentTargetName, kbk)
                    /// </para>
                    /// </summary>
                    public string kbk {
                        get {
                            XElement x = this.GetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("kbk", "http://bus.gov.ru/types/1"), value, "kbk", kbkLocalType.TypeDefinition);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<paymentDetailsTargetsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("paymentType", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(string));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class paymentTypeLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private paymentTypeLocalType() {
                        }
                    }
                    
                    private class paymentTargetNameLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 130, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private paymentTargetNameLocalType() {
                        }
                    }
                    
                    private class kbkLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                        "(\\p{L}|\\d){20}"}, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private kbkLocalType() {
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
            /// </para>
            /// </summary>
            public partial class licenseDetailsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator licenseDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<licenseDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static licenseDetailsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("licenseAgencyName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("licenseName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("licenseNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("licenseDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("licenseExpDate", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public licenseDetailsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Наименовавние органа, выдавшего лицензию
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public string licenseAgencyName {
                    get {
                        XElement x = this.GetElement(XName.Get("licenseAgencyName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("licenseAgencyName", "http://bus.gov.ru/types/1"), value, "licenseAgencyName", licenseAgencyNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование лицензируемого вида деятельности
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public string licenseName {
                    get {
                        XElement x = this.GetElement(XName.Get("licenseName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("licenseName", "http://bus.gov.ru/types/1"), value, "licenseName", licenseNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Номер лицензии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public string licenseNum {
                    get {
                        XElement x = this.GetElement(XName.Get("licenseNum", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("licenseNum", "http://bus.gov.ru/types/1"), value, "licenseNum", licenseNumLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Дата регистрации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public System.DateTime licenseDate {
                    get {
                        XElement x = this.GetElement(XName.Get("licenseDate", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("licenseDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Срок действия лицензии
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (licenseAgencyName, licenseName, licenseNum, licenseDate, licenseExpDate?)
                /// </para>
                /// </summary>
                public System.Nullable<System.DateTime> licenseExpDate {
                    get {
                        XElement x = this.GetElement(XName.Get("licenseExpDate", "http://bus.gov.ru/types/1"));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("licenseExpDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("licenseDetails", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<licenseDetailsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("licenseAgencyName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("licenseName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("licenseNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("licenseDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                    localElementDictionary.Add(XName.Get("licenseExpDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class licenseAgencyNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private licenseAgencyNameLocalType() {
                    }
                }
                
                private class licenseNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private licenseNameLocalType() {
                    }
                }
                
                private class licenseNumLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private licenseNumLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (accreditationAgencyName, accreditationName, accreditationExpDate)
            /// </para>
            /// </summary>
            public partial class accreditationDetailsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator accreditationDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<accreditationDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static accreditationDetailsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("accreditationAgencyName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accreditationName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accreditationExpDate", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (accreditationAgencyName, accreditationName, accreditationExpDate)
                /// </para>
                /// </summary>
                public accreditationDetailsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Наименование органа, выдавшего аккредитацию
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (accreditationAgencyName, accreditationName, accreditationExpDate)
                /// </para>
                /// </summary>
                public string accreditationAgencyName {
                    get {
                        XElement x = this.GetElement(XName.Get("accreditationAgencyName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("accreditationAgencyName", "http://bus.gov.ru/types/1"), value, "accreditationAgencyName", accreditationAgencyNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование аккредитуемой деятелности
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (accreditationAgencyName, accreditationName, accreditationExpDate)
                /// </para>
                /// </summary>
                public string accreditationName {
                    get {
                        XElement x = this.GetElement(XName.Get("accreditationName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("accreditationName", "http://bus.gov.ru/types/1"), value, "accreditationName", accreditationNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Срок действия аккредитации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (accreditationAgencyName, accreditationName, accreditationExpDate)
                /// </para>
                /// </summary>
                public System.DateTime accreditationExpDate {
                    get {
                        XElement x = this.GetElement(XName.Get("accreditationExpDate", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("accreditationExpDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("accreditationDetails", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<accreditationDetailsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("accreditationAgencyName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("accreditationName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("accreditationExpDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class accreditationAgencyNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private accreditationAgencyNameLocalType() {
                    }
                }
                
                private class accreditationNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private accreditationNameLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Документ
    /// </para>
    /// <para>
    /// Regular expression: (name, date, (url | code | content))
    /// </para>
    /// </summary>
    public partial class documentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator documentType(XElement xe) { return XTypedServices.ToXTypedElement<documentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static documentType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public documentType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата формирования документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка для скачивания документа
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public string url {
            get {
                XElement x = this.GetElement(XName.Get("url", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("url", "http://bus.gov.ru/types/1"), value, "url", global::bus.gov.ru.types.Item1.urlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код документа
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Содержимое документа
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (name, date, (url | code | content))
        /// </para>
        /// </summary>
        public byte[] content {
            get {
                XElement x = this.GetElement(XName.Get("content", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
            set {
                this.SetElement(XName.Get("content", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("documentType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<documentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("url", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("content", "http://bus.gov.ru/types/1"), typeof(byte[]));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 128, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Платёж
    /// </para>
    /// <para>
    /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
    /// </para>
    /// </summary>
    public partial class paymentDetailsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<paymentDetailsTargetsLocalType> paymentDetailsTargetsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator paymentDetailsType(XElement xe) { return XTypedServices.ToXTypedElement<paymentDetailsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paymentDetailsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ofkName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankDestinationCity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bankId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("corAccountCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Платёж
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public paymentDetailsType() {
        }
        
        /// <summary>
        /// <para>
        /// Номер расчетного счета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string calcAccountCode {
            get {
                XElement x = this.GetElement(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"), value, "calcAccountCode", calcAccountCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер лицевого счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string personalAccountCode {
            get {
                XElement x = this.GetElement(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), value, "personalAccountCode", personalAccountCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОФК, в котором обслуживается лицевой счет
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string ofkName {
            get {
                XElement x = this.GetElement(XName.Get("ofkName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ofkName", "http://bus.gov.ru/types/1"), value, "ofkName", ofkNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование банка
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string bankName {
            get {
                XElement x = this.GetElement(XName.Get("bankName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("bankName", "http://bus.gov.ru/types/1"), value, "bankName", bankNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Город, в котором расположен банк
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string bankDestinationCity {
            get {
                XElement x = this.GetElement(XName.Get("bankDestinationCity", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("bankDestinationCity", "http://bus.gov.ru/types/1"), value, "bankDestinationCity", bankDestinationCityLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// БИК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string bankId {
            get {
                XElement x = this.GetElement(XName.Get("bankId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("bankId", "http://bus.gov.ru/types/1"), value, "bankId", bankIdLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер корреспондентского счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public string corAccountCode {
            get {
                XElement x = this.GetElement(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"), value, "corAccountCode", corAccountCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Назначения платежей
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (calcAccountCode, personalAccountCode?, ofkName?, bankName, bankDestinationCity, bankId, corAccountCode?, paymentDetailsTargets*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.paymentDetailsType.paymentDetailsTargetsLocalType> paymentDetailsTargets {
            get {
                if ((this.paymentDetailsTargetsField == null)) {
                    this.paymentDetailsTargetsField = new XTypedList<paymentDetailsTargetsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"));
                }
                return this.paymentDetailsTargetsField;
            }
            set {
                if ((value == null)) {
                    this.paymentDetailsTargetsField = null;
                }
                else {
                    if ((this.paymentDetailsTargetsField == null)) {
                        this.paymentDetailsTargetsField = XTypedList<paymentDetailsTargetsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<paymentDetailsTargetsLocalType>(this.paymentDetailsTargetsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paymentDetailsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("calcAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("personalAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("ofkName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("bankName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("bankDestinationCity", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("bankId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("corAccountCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1"), typeof(paymentDetailsTargetsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class calcAccountCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private calcAccountCodeLocalType() {
            }
        }
        
        private class personalAccountCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 16, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private personalAccountCodeLocalType() {
            }
        }
        
        private class ofkNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ofkNameLocalType() {
            }
        }
        
        private class bankNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private bankNameLocalType() {
            }
        }
        
        private class bankDestinationCityLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 25, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private bankDestinationCityLocalType() {
            }
        }
        
        private class bankIdLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 9, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private bankIdLocalType() {
            }
        }
        
        private class corAccountCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private corAccountCodeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (serviceName?, paymentTargetName, kbk?)
        /// </para>
        /// </summary>
        public partial class paymentDetailsTargetsLocalType : global::bus.gov.ru.types.Item1.paymentDetailsTargetType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator paymentDetailsTargetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentDetailsTargetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static paymentDetailsTargetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("serviceName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (serviceName?, paymentTargetName, kbk?)
            /// </para>
            /// </summary>
            public paymentDetailsTargetsLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("paymentDetailsTargets", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<paymentDetailsTargetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("serviceName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Назначение платежа
    /// </para>
    /// <para>
    /// Regular expression: (serviceName?, paymentTargetName, kbk?)
    /// </para>
    /// </summary>
    public partial class paymentDetailsTargetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator paymentDetailsTargetType(XElement xe) { return XTypedServices.ToXTypedElement<paymentDetailsTargetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paymentDetailsTargetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("serviceName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Назначение платежа
        /// </para>
        /// <para>
        /// Regular expression: (serviceName?, paymentTargetName, kbk?)
        /// </para>
        /// </summary>
        public paymentDetailsTargetType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование услуги
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (serviceName?, paymentTargetName, kbk?)
        /// </para>
        /// </summary>
        public string serviceName {
            get {
                XElement x = this.GetElement(XName.Get("serviceName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("serviceName", "http://bus.gov.ru/types/1"), value, "serviceName", serviceNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Назначение платежа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (serviceName?, paymentTargetName, kbk?)
        /// </para>
        /// </summary>
        public string paymentTargetName {
            get {
                XElement x = this.GetElement(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"), value, "paymentTargetName", paymentTargetNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КБК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (serviceName?, paymentTargetName, kbk?)
        /// </para>
        /// </summary>
        public string kbk {
            get {
                XElement x = this.GetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kbk", "http://bus.gov.ru/types/1"), value, "kbk", kbkLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("paymentDetailsTargetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paymentDetailsTargetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("serviceName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("paymentTargetName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class serviceNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private serviceNameLocalType() {
            }
        }
        
        private class paymentTargetNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 130, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private paymentTargetNameLocalType() {
            }
        }
        
        private class kbkLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private kbkLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Протокол расхождения с ЕГРЮЛ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
    /// </para>
    /// </summary>
    public partial class egrulDifferenceType : global::bus.gov.ru.types.Item1.positionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<differenceLocalType> differenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator egrulDifferenceType(XElement xe) { return XTypedServices.ToXTypedElement<egrulDifferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static egrulDifferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("createDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("originalRewrite", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("egrulAbsent", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("difference", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Протокол расхождения с ЕГРЮЛ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public egrulDifferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата и время формирования протокола
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public System.DateTime createDate {
            get {
                XElement x = this.GetElement(XName.Get("createDate", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("createDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак перезаписи данных организации из ЕГРЮЛ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public bool originalRewrite {
            get {
                XElement x = this.GetElement(XName.Get("originalRewrite", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("originalRewrite", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак отсутствия организации в ЕГРЮЛ 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public bool egrulAbsent {
            get {
                XElement x = this.GetElement(XName.Get("egrulAbsent", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("egrulAbsent", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расхождение
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, createDate, regNum, originalRewrite, egrulAbsent, difference*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.egrulDifferenceType.differenceLocalType> difference {
            get {
                if ((this.differenceField == null)) {
                    this.differenceField = new XTypedList<differenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("difference", "http://bus.gov.ru/types/1"));
                }
                return this.differenceField;
            }
            set {
                if ((value == null)) {
                    this.differenceField = null;
                }
                else {
                    if ((this.differenceField == null)) {
                        this.differenceField = XTypedList<differenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("difference", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<differenceLocalType>(this.differenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("egrulDifferenceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<egrulDifferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("createDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("originalRewrite", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("egrulAbsent", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("difference", "http://bus.gov.ru/types/1"), typeof(differenceLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (detail, originalData?, egrulData?, type)
        /// </para>
        /// </summary>
        public partial class differenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator differenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<differenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static differenceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("detail", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("originalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("egrulData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (detail, originalData?, egrulData?, type)
            /// </para>
            /// </summary>
            public differenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реквизит расхождения
            ///
            ///Допустимые значения:
            /// 01 - полное наименование;
            /// 02 - сокращенное наименование;
            /// 03 - ИНН;
            /// 04 - КПП;
            /// 05 - ОГРН;
            /// 07 - Наименование учредителя;
            /// 08 - ОКВЭД;
            /// 09 - Почтовый индекс;
            /// 10 - Код субъекта РФ по КЛАДР;
            /// 11 - Наименование субъекта РФ;
            /// 12 - Код района по КЛАДР;
            /// 13 - Наименование района;
            /// 14 - Код города по КЛАДР;
            /// 15 - Наименование города;
            /// 16 - Код населенного пункта по КЛАДР;
            /// 17 - Наименование населенного пункта;
            /// 18 - Код улицы по КЛАДР;
            /// 19 - Наименование улицы;
            /// 20 - Номер дома;
            /// 21 - Номер офиса (квартиры);
            /// 22 - Дата исключения;
            /// 23 - Фамилия руководителя;
            /// 24 - Имя руководителя;
            /// 25 - Отчество руководителя;
            /// 26 - Должность руководителя.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (detail, originalData?, egrulData?, type)
            /// </para>
            /// </summary>
            public string detail {
                get {
                    XElement x = this.GetElement(XName.Get("detail", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("detail", "http://bus.gov.ru/types/1"), value, "detail", global::bus.gov.ru.types.Item1.differenceDetailType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Исходные данные
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (detail, originalData?, egrulData?, type)
            /// </para>
            /// </summary>
            public string originalData {
                get {
                    XElement x = this.GetElement(XName.Get("originalData", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("originalData", "http://bus.gov.ru/types/1"), value, "originalData", originalDataLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Данные в ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (detail, originalData?, egrulData?, type)
            /// </para>
            /// </summary>
            public string egrulData {
                get {
                    XElement x = this.GetElement(XName.Get("egrulData", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("egrulData", "http://bus.gov.ru/types/1"), value, "egrulData", egrulDataLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип расхождения
            ///
            ///Допустимые значения:
            /// 01 - расхождения по данным;
            /// 02 - отсутствует в ЕГРЮЛ;
            /// 03 - отсутствует в исходных данных.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (detail, originalData?, egrulData?, type)
            /// </para>
            /// </summary>
            public string type {
                get {
                    XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.differenceTypeType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("difference", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<differenceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("detail", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("originalData", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("egrulData", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class originalDataLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private originalDataLocalType() {
                }
            }
            
            private class egrulDataLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private egrulDataLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Сотрудник
    /// </para>
    /// <para>
    /// Regular expression: (lastName, firstName, middleName?, position)
    /// </para>
    /// </summary>
    public partial class employeeType : global::bus.gov.ru.types.Item1.personType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator employeeType(XElement xe) { return XTypedServices.ToXTypedElement<employeeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static employeeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lastName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("firstName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("middleName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("position", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Сотрудник
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?, position)
        /// </para>
        /// </summary>
        public employeeType() {
        }
        
        /// <summary>
        /// <para>
        /// Должность
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?, position)
        /// </para>
        /// </summary>
        public string position {
            get {
                XElement x = this.GetElement(XName.Get("position", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("position", "http://bus.gov.ru/types/1"), value, "position", positionLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("employeeType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<employeeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("lastName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("firstName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("middleName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("position", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class positionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private positionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Сфера деятельности
    /// </para>
    /// <para>
    /// Regular expression: (code?, name)
    /// </para>
    /// </summary>
    public partial class fieldType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator fieldType(XElement xe) { return XTypedServices.ToXTypedElement<fieldType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static fieldType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Сфера деятельности
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public fieldType() {
        }
        
        /// <summary>
        /// <para>
        /// Код сферы деятельности
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.fieldCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование сферы деятельности
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("fieldType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<fieldType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// План финансово-хозяйственной деятельности
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
    /// </para>
    /// </summary>
    public partial class financialActivityPlanType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator financialActivityPlanType(XElement xe) { return XTypedServices.ToXTypedElement<financialActivityPlanType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static financialActivityPlanType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planPublicCircumstances", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// План финансово-хозяйственной деятельности
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public financialActivityPlanType() {
        }
        
        /// <summary>
        /// <para>
        /// Финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Первый год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planFirstYear {
            get {
                XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Второй год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planLastYear {
            get {
                XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Показатели финансового состояния учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public financialIndexLocalType financialIndex {
            get {
                XElement x = this.GetElement(XName.Get("financialIndex", "http://bus.gov.ru/types/1"));
                return ((financialIndexLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialIndex", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Плановые показатели поступлений и выплат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public planPaymentIndexLocalType planPaymentIndex {
            get {
                XElement x = this.GetElement(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"));
                return ((planPaymentIndexLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Планируемая сумма выплат по публичным обязательствам
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public decimal planPublicCircumstances {
            get {
                XElement x = this.GetElement(XName.Get("planPublicCircumstances", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planPublicCircumstances", "http://bus.gov.ru/types/1"), value, "planPublicCircumstances", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear?, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex, planPublicCircumstances, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("financialActivityPlanType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<financialActivityPlanType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("financialIndex", "http://bus.gov.ru/types/1"), typeof(financialIndexLocalType));
            localElementDictionary.Add(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"), typeof(planPaymentIndexLocalType));
            localElementDictionary.Add(XName.Get("planPublicCircumstances", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
        /// </para>
        /// </summary>
        public partial class financialIndexLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialIndexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialIndexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialIndexLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialIndexLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Балансовая стоимость нефинансовых активов
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public nonfinancialAssetsLocalType nonfinancialAssets {
                get {
                    XElement x = this.GetElement(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"));
                    return ((nonfinancialAssetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовые активы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialAssetsLocalType financialAssets {
                get {
                    XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                    return ((financialAssetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Обязательства
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialCircumstancesLocalType financialCircumstances {
                get {
                    XElement x = this.GetElement(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"));
                    return ((financialCircumstancesLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialIndex", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialIndexLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonfinancialAssetsLocalType));
                localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
                localElementDictionary.Add(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"), typeof(financialCircumstancesLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (realAssets, highValuePersonalAssets, total)
            /// </para>
            /// </summary>
            public partial class nonfinancialAssetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator nonfinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonfinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static nonfinancialAssetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("realAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public nonfinancialAssetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Недвижимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public decimal realAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("realAssets", "http://bus.gov.ru/types/1"), value, "realAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Особо ценное движимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public decimal highValuePersonalAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), value, "highValuePersonalAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, highValuePersonalAssets, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<nonfinancialAssetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("realAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (debit, total)
            /// </para>
            /// </summary>
            public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static financialAssetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("debit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (debit, total)
                /// </para>
                /// </summary>
                public financialAssetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Дебиторская задолженность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debit, total)
                /// </para>
                /// </summary>
                public debitLocalType debit {
                    get {
                        XElement x = this.GetElement(XName.Get("debit", "http://bus.gov.ru/types/1"));
                        return ((debitLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("debit", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debit, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("debit", "http://bus.gov.ru/types/1"), typeof(debitLocalType));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (income, expense)
                /// </para>
                /// </summary>
                public partial class debitLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator debitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<debitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static debitLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public debitLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По доходам
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public decimal income {
                        get {
                            XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("income", "http://bus.gov.ru/types/1"), value, "income", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По расходам
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public decimal expense {
                        get {
                            XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("expense", "http://bus.gov.ru/types/1"), value, "expense", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("debit", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<debitLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (kreditExpired, total)
            /// </para>
            /// </summary>
            public partial class financialCircumstancesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator financialCircumstancesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialCircumstancesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static financialCircumstancesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("kreditExpired", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (kreditExpired, total)
                /// </para>
                /// </summary>
                public financialCircumstancesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Просроченная кредиторская задолженность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal kreditExpired {
                    get {
                        XElement x = this.GetElement(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"), value, "kreditExpired", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("financialCircumstances", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<financialCircumstancesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (planInpayments, planPayments)
        /// </para>
        /// </summary>
        public partial class planPaymentIndexLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator planPaymentIndexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<planPaymentIndexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static planPaymentIndexLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("planInpayments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planPayments", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (planInpayments, planPayments)
            /// </para>
            /// </summary>
            public planPaymentIndexLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Панируемые поступления
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (planInpayments, planPayments)
            /// </para>
            /// </summary>
            public planInpaymentsLocalType planInpayments {
                get {
                    XElement x = this.GetElement(XName.Get("planInpayments", "http://bus.gov.ru/types/1"));
                    return ((planInpaymentsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("planInpayments", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Планируемые выплаты
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (planInpayments, planPayments)
            /// </para>
            /// </summary>
            public planPaymentsLocalType planPayments {
                get {
                    XElement x = this.GetElement(XName.Get("planPayments", "http://bus.gov.ru/types/1"));
                    return ((planPaymentsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("planPayments", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<planPaymentIndexLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("planInpayments", "http://bus.gov.ru/types/1"), typeof(planInpaymentsLocalType));
                localElementDictionary.Add(XName.Get("planPayments", "http://bus.gov.ru/types/1"), typeof(planPaymentsLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
            /// </para>
            /// </summary>
            public partial class planInpaymentsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator planInpaymentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<planInpaymentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static planInpaymentsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("actionGrant", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("paidServices", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public planInpaymentsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Cубсидии на выполнение государственного (муниципального) задания
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal stateTaskGrant {
                    get {
                        XElement x = this.GetElement(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"), value, "stateTaskGrant", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Целевые субсидии
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal actionGrant {
                    get {
                        XElement x = this.GetElement(XName.Get("actionGrant", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("actionGrant", "http://bus.gov.ru/types/1"), value, "actionGrant", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Бюджетные инвестиции
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal budgetaryFunds {
                    get {
                        XElement x = this.GetElement(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"), value, "budgetaryFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оказание платных услуг (выполнение работ) и иная приносящая доход деятельность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal paidServices {
                    get {
                        XElement x = this.GetElement(XName.Get("paidServices", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("paidServices", "http://bus.gov.ru/types/1"), value, "paidServices", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (stateTaskGrant, actionGrant, budgetaryFunds, paidServices, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("planInpayments", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<planInpaymentsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("stateTaskGrant", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("actionGrant", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("budgetaryFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("paidServices", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
            /// </para>
            /// </summary>
            public partial class planPaymentsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator planPaymentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<planPaymentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static planPaymentsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("labourRemuneration", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("telephoneServices", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("freightServices", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("publicServices", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rental", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("maintenanceCosts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("mainFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fictitiousAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("tangibleAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public planPaymentsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Оплата труда и начисления на выплаты по оплате труда
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal labourRemuneration {
                    get {
                        XElement x = this.GetElement(XName.Get("labourRemuneration", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("labourRemuneration", "http://bus.gov.ru/types/1"), value, "labourRemuneration", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оплата услуг связи
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal telephoneServices {
                    get {
                        XElement x = this.GetElement(XName.Get("telephoneServices", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("telephoneServices", "http://bus.gov.ru/types/1"), value, "telephoneServices", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оплата транспортных услуг
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal freightServices {
                    get {
                        XElement x = this.GetElement(XName.Get("freightServices", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("freightServices", "http://bus.gov.ru/types/1"), value, "freightServices", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оплата коммунальных услуг
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal publicServices {
                    get {
                        XElement x = this.GetElement(XName.Get("publicServices", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("publicServices", "http://bus.gov.ru/types/1"), value, "publicServices", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Арендная плата за пользование имуществом
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal rental {
                    get {
                        XElement x = this.GetElement(XName.Get("rental", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("rental", "http://bus.gov.ru/types/1"), value, "rental", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Оплата услуг по содержанию имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal maintenanceCosts {
                    get {
                        XElement x = this.GetElement(XName.Get("maintenanceCosts", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("maintenanceCosts", "http://bus.gov.ru/types/1"), value, "maintenanceCosts", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Приобретение основных средств
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal mainFunds {
                    get {
                        XElement x = this.GetElement(XName.Get("mainFunds", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("mainFunds", "http://bus.gov.ru/types/1"), value, "mainFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Приобретение нематериальных активов
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal fictitiousAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("fictitiousAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("fictitiousAssets", "http://bus.gov.ru/types/1"), value, "fictitiousAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Приобретение материальных запасов
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal tangibleAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("tangibleAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("tangibleAssets", "http://bus.gov.ru/types/1"), value, "tangibleAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (labourRemuneration, telephoneServices, freightServices, publicServices, rental, maintenanceCosts, mainFunds, fictitiousAssets, tangibleAssets, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("planPayments", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<planPaymentsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("labourRemuneration", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("telephoneServices", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("freightServices", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("publicServices", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("rental", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("maintenanceCosts", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("mainFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("fictitiousAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("tangibleAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// План финансово-хозяйственной деятельности
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
    /// </para>
    /// </summary>
    public partial class financialActivityPlan2017Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<planPaymentIndexItem> planPaymentIndexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expensePaymentIndexItem> expensePaymentIndexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexSum> temporaryResourcesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexSum> referenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator financialActivityPlan2017Type(XElement xe) { return XTypedServices.ToXTypedElement<financialActivityPlan2017Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static financialActivityPlan2017Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expensePaymentIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryResources", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reference", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// План финансово-хозяйственной деятельности
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public financialActivityPlan2017Type() {
        }
        
        /// <summary>
        /// <para>
        /// Финансовый год
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public decimal financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Первый год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planFirstYear {
            get {
                XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Второй год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planLastYear {
            get {
                XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Показатели финансового состояния учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public financialIndexLocalType financialIndex {
            get {
                XElement x = this.GetElement(XName.Get("financialIndex", "http://bus.gov.ru/types/1"));
                return ((financialIndexLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialIndex", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Плановые показатели поступлений и выплат
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public IList<planPaymentIndexItem> planPaymentIndex {
            get {
                if ((this.planPaymentIndexField == null)) {
                    this.planPaymentIndexField = new XTypedList<planPaymentIndexItem>(this, LinqToXsdTypeManager.Instance, XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"));
                }
                return this.planPaymentIndexField;
            }
            set {
                if ((value == null)) {
                    this.planPaymentIndexField = null;
                }
                else {
                    if ((this.planPaymentIndexField == null)) {
                        this.planPaymentIndexField = XTypedList<planPaymentIndexItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<planPaymentIndexItem>(this.planPaymentIndexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Показатели выплат по расходам на закупку
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public IList<expensePaymentIndexItem> expensePaymentIndex {
            get {
                if ((this.expensePaymentIndexField == null)) {
                    this.expensePaymentIndexField = new XTypedList<expensePaymentIndexItem>(this, LinqToXsdTypeManager.Instance, XName.Get("expensePaymentIndex", "http://bus.gov.ru/types/1"));
                }
                return this.expensePaymentIndexField;
            }
            set {
                if ((value == null)) {
                    this.expensePaymentIndexField = null;
                }
                else {
                    if ((this.expensePaymentIndexField == null)) {
                        this.expensePaymentIndexField = XTypedList<expensePaymentIndexItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("expensePaymentIndex", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<expensePaymentIndexItem>(this.expensePaymentIndexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Сведения о средствах, поступающих во временное распоряжение учреждения (подразделения)
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public IList<indexSum> temporaryResources {
            get {
                if ((this.temporaryResourcesField == null)) {
                    this.temporaryResourcesField = new XTypedList<indexSum>(this, LinqToXsdTypeManager.Instance, XName.Get("temporaryResources", "http://bus.gov.ru/types/1"));
                }
                return this.temporaryResourcesField;
            }
            set {
                if ((value == null)) {
                    this.temporaryResourcesField = null;
                }
                else {
                    if ((this.temporaryResourcesField == null)) {
                        this.temporaryResourcesField = XTypedList<indexSum>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("temporaryResources", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<indexSum>(this.temporaryResourcesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Справочная информация
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public IList<indexSum> reference {
            get {
                if ((this.referenceField == null)) {
                    this.referenceField = new XTypedList<indexSum>(this, LinqToXsdTypeManager.Instance, XName.Get("reference", "http://bus.gov.ru/types/1"));
                }
                return this.referenceField;
            }
            set {
                if ((value == null)) {
                    this.referenceField = null;
                }
                else {
                    if ((this.referenceField == null)) {
                        this.referenceField = XTypedList<indexSum>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reference", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<indexSum>(this.referenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, financialYear, planFirstYear?, planLastYear?, financialIndex, planPaymentIndex+, expensePaymentIndex+, temporaryResources+, reference+, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("financialActivityPlan2017Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<financialActivityPlan2017Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("financialIndex", "http://bus.gov.ru/types/1"), typeof(financialIndexLocalType));
            localElementDictionary.Add(XName.Get("planPaymentIndex", "http://bus.gov.ru/types/1"), typeof(planPaymentIndexItem));
            localElementDictionary.Add(XName.Get("expensePaymentIndex", "http://bus.gov.ru/types/1"), typeof(expensePaymentIndexItem));
            localElementDictionary.Add(XName.Get("temporaryResources", "http://bus.gov.ru/types/1"), typeof(indexSum));
            localElementDictionary.Add(XName.Get("reference", "http://bus.gov.ru/types/1"), typeof(indexSum));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
        /// </para>
        /// </summary>
        public partial class financialIndexLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialIndexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialIndexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialIndexLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialIndexLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Балансовая стоимость нефинансовых активов
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public nonfinancialAssetsLocalType nonfinancialAssets {
                get {
                    XElement x = this.GetElement(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"));
                    return ((nonfinancialAssetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовые активы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialAssetsLocalType financialAssets {
                get {
                    XElement x = this.GetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"));
                    return ((financialAssetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Обязательства
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nonfinancialAssets, financialAssets, financialCircumstances)
            /// </para>
            /// </summary>
            public financialCircumstancesLocalType financialCircumstances {
                get {
                    XElement x = this.GetElement(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"));
                    return ((financialCircumstancesLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialIndex", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialIndexLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1"), typeof(nonfinancialAssetsLocalType));
                localElementDictionary.Add(XName.Get("financialAssets", "http://bus.gov.ru/types/1"), typeof(financialAssetsLocalType));
                localElementDictionary.Add(XName.Get("financialCircumstances", "http://bus.gov.ru/types/1"), typeof(financialCircumstancesLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
            /// </para>
            /// </summary>
            public partial class nonfinancialAssetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator nonfinancialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonfinancialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static nonfinancialAssetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("realAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("realAssetsResidual", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("highValuePersonalAssetsResidual", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public nonfinancialAssetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Недвижимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public decimal realAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("realAssets", "http://bus.gov.ru/types/1"), value, "realAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Остаточная стоимость недвижимого имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public decimal realAssetsResidual {
                    get {
                        XElement x = this.GetElement(XName.Get("realAssetsResidual", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("realAssetsResidual", "http://bus.gov.ru/types/1"), value, "realAssetsResidual", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Особо ценное движимое имущество
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public decimal highValuePersonalAssets {
                    get {
                        XElement x = this.GetElement(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), value, "highValuePersonalAssets", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Остаточная стоимость особо ценного движимого имущества
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public decimal highValuePersonalAssetsResidual {
                    get {
                        XElement x = this.GetElement(XName.Get("highValuePersonalAssetsResidual", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("highValuePersonalAssetsResidual", "http://bus.gov.ru/types/1"), value, "highValuePersonalAssetsResidual", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (realAssets, realAssetsResidual, highValuePersonalAssets, highValuePersonalAssetsResidual, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("nonfinancialAssets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<nonfinancialAssetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("realAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("realAssetsResidual", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highValuePersonalAssets", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("highValuePersonalAssetsResidual", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
            /// </para>
            /// </summary>
            public partial class financialAssetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator financialAssetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static financialAssetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("cash", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accountsCash", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("depositCash", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("others", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("debit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public financialAssetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Денежные средства учреждения
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public decimal cash {
                    get {
                        XElement x = this.GetElement(XName.Get("cash", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("cash", "http://bus.gov.ru/types/1"), value, "cash", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Денежные средства учреждения на счетах
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public decimal accountsCash {
                    get {
                        XElement x = this.GetElement(XName.Get("accountsCash", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("accountsCash", "http://bus.gov.ru/types/1"), value, "accountsCash", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Денежные средства учреждения, размещенные на депозиты в кредитной организации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public decimal depositCash {
                    get {
                        XElement x = this.GetElement(XName.Get("depositCash", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("depositCash", "http://bus.gov.ru/types/1"), value, "depositCash", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Иные финансовые инструменты
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public decimal others {
                    get {
                        XElement x = this.GetElement(XName.Get("others", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("others", "http://bus.gov.ru/types/1"), value, "others", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Дебиторская задолженность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public debitLocalType debit {
                    get {
                        XElement x = this.GetElement(XName.Get("debit", "http://bus.gov.ru/types/1"));
                        return ((debitLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("debit", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (cash, accountsCash, depositCash, others, debit, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("financialAssets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<financialAssetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("cash", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("accountsCash", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("depositCash", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("others", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("debit", "http://bus.gov.ru/types/1"), typeof(debitLocalType));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (income, expense)
                /// </para>
                /// </summary>
                public partial class debitLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator debitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<debitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static debitLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public debitLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По доходам
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public decimal income {
                        get {
                            XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("income", "http://bus.gov.ru/types/1"), value, "income", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// По расходам
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (income, expense)
                    /// </para>
                    /// </summary>
                    public decimal expense {
                        get {
                            XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("expense", "http://bus.gov.ru/types/1"), value, "expense", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("debit", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<debitLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (debentures, kredit, kreditExpired, total)
            /// </para>
            /// </summary>
            public partial class financialCircumstancesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator financialCircumstancesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialCircumstancesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static financialCircumstancesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("debentures", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kredit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kreditExpired", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (debentures, kredit, kreditExpired, total)
                /// </para>
                /// </summary>
                public financialCircumstancesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Долговые обязательства
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debentures, kredit, kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal debentures {
                    get {
                        XElement x = this.GetElement(XName.Get("debentures", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("debentures", "http://bus.gov.ru/types/1"), value, "debentures", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Кедиторская задолженность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debentures, kredit, kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal kredit {
                    get {
                        XElement x = this.GetElement(XName.Get("kredit", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("kredit", "http://bus.gov.ru/types/1"), value, "kredit", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Просроченная кредиторская задолженность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debentures, kredit, kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal kreditExpired {
                    get {
                        XElement x = this.GetElement(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"), value, "kreditExpired", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Всего
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (debentures, kredit, kreditExpired, total)
                /// </para>
                /// </summary>
                public decimal total {
                    get {
                        XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("financialCircumstances", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<financialCircumstancesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("debentures", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("kredit", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("kreditExpired", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Полномочия учредителя
    /// </para>
    /// <para>
    /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
    /// </para>
    /// </summary>
    public partial class founderAuthoritiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator founderAuthoritiesType(XElement xe) { return XTypedServices.ToXTypedElement<founderAuthoritiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static founderAuthoritiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("formative", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTask", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("manageProperty", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financeSupply", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учредителя
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public founderAuthoritiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Решение о создании, реорганизации, ликвидации, изменении типа учреждения (его филиалов)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public bool formative {
            get {
                XElement x = this.GetElement(XName.Get("formative", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("formative", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Решение о формировании и утверждении государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public bool stateTask {
            get {
                XElement x = this.GetElement(XName.Get("stateTask", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("stateTask", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Решение о назначении членов наблюдательного совета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public System.Nullable<bool> supervisoryBoard {
            get {
                XElement x = this.GetElement(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Решение об управлении имуществом организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public bool manageProperty {
            get {
                XElement x = this.GetElement(XName.Get("manageProperty", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("manageProperty", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Решение о финансовом обеспечении организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public bool financeSupply {
            get {
                XElement x = this.GetElement(XName.Get("financeSupply", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("financeSupply", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("founderAuthoritiesType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<founderAuthoritiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("formative", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("stateTask", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("manageProperty", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("financeSupply", "http://bus.gov.ru/types/1"), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Полномочия учредителя
    /// </para>
    /// <para>
    /// Regular expression: (authoritiesGMU | authoritiesConsReg+)
    /// </para>
    /// </summary>
    public partial class founderAuthoritiesVSRIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<authoritiesConsRegLocalType> authoritiesConsRegField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator founderAuthoritiesVSRIType(XElement xe) { return XTypedServices.ToXTypedElement<founderAuthoritiesVSRIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static founderAuthoritiesVSRIType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("authoritiesGMU", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учредителя
        /// </para>
        /// <para>
        /// Regular expression: (authoritiesGMU | authoritiesConsReg+)
        /// </para>
        /// </summary>
        public founderAuthoritiesVSRIType() {
        }
        
        public founderAuthoritiesVSRIType(authoritiesGMULocalType authoritiesGMU) {
            this.authoritiesGMU = authoritiesGMU;
        }
        
        public founderAuthoritiesVSRIType(IEnumerable<authoritiesConsRegLocalType> authoritiesConsReg) {
            this.authoritiesConsRegField = XTypedList<authoritiesConsRegLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, authoritiesConsReg, XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"));
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учредителя, заполняемые в АС ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (authoritiesGMU | authoritiesConsReg+)
        /// </para>
        /// </summary>
        public authoritiesGMULocalType authoritiesGMU {
            get {
                XElement x = this.GetElement(XName.Get("authoritiesGMU", "http://bus.gov.ru/types/1"));
                return ((authoritiesGMULocalType)(x));
            }
            set {
                this.SetElement(XName.Get("authoritiesGMU", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учредителя по данным Сводного реестра
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (authoritiesGMU | authoritiesConsReg+)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.founderAuthoritiesVSRIType.authoritiesConsRegLocalType> authoritiesConsReg {
            get {
                if ((this.authoritiesConsRegField == null)) {
                    this.authoritiesConsRegField = new XTypedList<authoritiesConsRegLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"));
                }
                return this.authoritiesConsRegField;
            }
            set {
                if ((value == null)) {
                    this.authoritiesConsRegField = null;
                }
                else {
                    if ((this.authoritiesConsRegField == null)) {
                        this.authoritiesConsRegField = XTypedList<authoritiesConsRegLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<authoritiesConsRegLocalType>(this.authoritiesConsRegField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("founderAuthoritiesVSRIType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<founderAuthoritiesVSRIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("authoritiesGMU", "http://bus.gov.ru/types/1"), typeof(authoritiesGMULocalType));
            localElementDictionary.Add(XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"), typeof(authoritiesConsRegLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
        /// </para>
        /// </summary>
        public partial class authoritiesGMULocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator authoritiesGMULocalType(XElement xe) { return XTypedServices.ToXTypedElement<authoritiesGMULocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static authoritiesGMULocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("formative", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTask", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("manageProperty", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financeSupply", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public authoritiesGMULocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Решение о создании, реорганизации, ликвидации, изменении типа учреждения (его филиалов)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public bool formative {
                get {
                    XElement x = this.GetElement(XName.Get("formative", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("formative", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Решение о формировании и утверждении государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public bool stateTask {
                get {
                    XElement x = this.GetElement(XName.Get("stateTask", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("stateTask", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Решение о назначении членов наблюдательного совета
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public System.Nullable<bool> supervisoryBoard {
                get {
                    XElement x = this.GetElement(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Решение об управлении имуществом организации
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public bool manageProperty {
                get {
                    XElement x = this.GetElement(XName.Get("manageProperty", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("manageProperty", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Решение о финансовом обеспечении организации
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (formative, stateTask, supervisoryBoard?, manageProperty, financeSupply)
            /// </para>
            /// </summary>
            public bool financeSupply {
                get {
                    XElement x = this.GetElement(XName.Get("financeSupply", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("financeSupply", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("authoritiesGMU", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<authoritiesGMULocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("formative", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("stateTask", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("supervisoryBoard", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("manageProperty", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("financeSupply", "http://bus.gov.ru/types/1"), typeof(bool));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (authName, authCode)
        /// </para>
        /// </summary>
        public partial class authoritiesConsRegLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator authoritiesConsRegLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authoritiesConsRegLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static authoritiesConsRegLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authCode", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public authoritiesConsRegLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Наименование полномочия
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public string authName {
                get {
                    XElement x = this.GetElement(XName.Get("authName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("authName", "http://bus.gov.ru/types/1"), value, "authName", authNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Код полномочия по справочнику "Полномочие организации"
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public string authCode {
                get {
                    XElement x = this.GetElement(XName.Get("authCode", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("authCode", "http://bus.gov.ru/types/1"), value, "authCode", authCodeLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<authoritiesConsRegLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("authName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("authCode", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class authNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private authNameLocalType() {
                }
            }
            
            private class authCodeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private authCodeLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Средства
    /// </para>
    /// <para>
    /// Regular expression: (name, funds)
    /// </para>
    /// </summary>
    public partial class fundsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator fundsType(XElement xe) { return XTypedServices.ToXTypedElement<fundsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static fundsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("funds", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Средства
        /// </para>
        /// <para>
        /// Regular expression: (name, funds)
        /// </para>
        /// </summary>
        public fundsType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, funds)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, funds)
        /// </para>
        /// </summary>
        public decimal funds {
            get {
                XElement x = this.GetElement(XName.Get("funds", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("funds", "http://bus.gov.ru/types/1"), value, "funds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("fundsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<fundsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("funds", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Заголовок информационного пакета
    /// </para>
    /// <para>
    /// Regular expression: (id, createDateTime)
    /// </para>
    /// </summary>
    public partial class headerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator headerType(XElement xe) { return XTypedServices.ToXTypedElement<headerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static headerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("id", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("createDateTime", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Заголовок информационного пакета
        /// </para>
        /// <para>
        /// Regular expression: (id, createDateTime)
        /// </para>
        /// </summary>
        public headerType() {
        }
        
        /// <summary>
        /// <para>
        /// Глобальный идентификатор  информационного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, createDateTime)
        /// </para>
        /// </summary>
        public string id {
            get {
                XElement x = this.GetElement(XName.Get("id", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("id", "http://bus.gov.ru/types/1"), value, "id", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата и время формирования информационного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, createDateTime)
        /// </para>
        /// </summary>
        public System.DateTime createDateTime {
            get {
                XElement x = this.GetElement(XName.Get("createDateTime", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("createDateTime", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("headerType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<headerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("id", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("createDateTime", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Контрольные мероприятия и их результаты
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, period, inspectionEvent*, document*)
    /// </para>
    /// </summary>
    public partial class inspectionActivityType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<inspectionEventLocalType> inspectionEventField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator inspectionActivityType(XElement xe) { return XTypedServices.ToXTypedElement<inspectionActivityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static inspectionActivityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("period", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inspectionEvent", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Контрольные мероприятия и их результаты
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, period, inspectionEvent*, document*)
        /// </para>
        /// </summary>
        public inspectionActivityType() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, period, inspectionEvent*, document*)
        /// </para>
        /// </summary>
        public decimal period {
            get {
                XElement x = this.GetElement(XName.Get("period", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("period", "http://bus.gov.ru/types/1"), value, "period", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Контрольное мероприятие
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, period, inspectionEvent*, document*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.inspectionActivityType.inspectionEventLocalType> inspectionEvent {
            get {
                if ((this.inspectionEventField == null)) {
                    this.inspectionEventField = new XTypedList<inspectionEventLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("inspectionEvent", "http://bus.gov.ru/types/1"));
                }
                return this.inspectionEventField;
            }
            set {
                if ((value == null)) {
                    this.inspectionEventField = null;
                }
                else {
                    if ((this.inspectionEventField == null)) {
                        this.inspectionEventField = XTypedList<inspectionEventLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("inspectionEvent", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<inspectionEventLocalType>(this.inspectionEventField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, period, inspectionEvent*, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("inspectionActivityType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<inspectionActivityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("period", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("inspectionEvent", "http://bus.gov.ru/types/1"), typeof(inspectionEventLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
        /// </para>
        /// </summary>
        public partial class inspectionEventLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator inspectionEventLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inspectionEventLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inspectionEventLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("supervisor", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("topic", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("eventBegin", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("eventEnd", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("violation", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("resultActivity", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public inspectionEventLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Орган государственной власти (государственного органа), орган местного самоуправления, осуществляющий проведение контрольного мероприятия
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public refNsiConsRegSoftType supervisor {
                get {
                    XElement x = this.GetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"));
                    return ((refNsiConsRegSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// План (тема) контрольного мероприятия
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public string topic {
                get {
                    XElement x = this.GetElement(XName.Get("topic", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("topic", "http://bus.gov.ru/types/1"), value, "topic", topicLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Начало проведения контрольного мероприятия 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public System.DateTime eventBegin {
                get {
                    XElement x = this.GetElement(XName.Get("eventBegin", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("eventBegin", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Конец проведения контрольного мероприятия
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public System.DateTime eventEnd {
                get {
                    XElement x = this.GetElement(XName.Get("eventEnd", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("eventEnd", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Выявленные нарушения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public string violation {
                get {
                    XElement x = this.GetElement(XName.Get("violation", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("violation", "http://bus.gov.ru/types/1"), value, "violation", violationLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Мероприятия, проведенные по результатам контрольного мероприятия
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (supervisor, topic, eventBegin, eventEnd, violation?, resultActivity?)
            /// </para>
            /// </summary>
            public string resultActivity {
                get {
                    XElement x = this.GetElement(XName.Get("resultActivity", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("resultActivity", "http://bus.gov.ru/types/1"), value, "resultActivity", resultActivityLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("inspectionEvent", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inspectionEventLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("supervisor", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
                localElementDictionary.Add(XName.Get("topic", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("eventBegin", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("eventEnd", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("violation", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("resultActivity", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class topicLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private topicLocalType() {
                }
            }
            
            private class violationLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private violationLocalType() {
                }
            }
            
            private class resultActivityLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private resultActivityLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Вид деятельности
    /// </para>
    /// <para>
    /// Regular expression: (okved, name)
    /// </para>
    /// </summary>
    public partial class institutionActivityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionActivityType(XElement xe) { return XTypedServices.ToXTypedElement<institutionActivityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionActivityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("okved", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Вид деятельности
        /// </para>
        /// <para>
        /// Regular expression: (okved, name)
        /// </para>
        /// </summary>
        public institutionActivityType() {
        }
        
        /// <summary>
        /// <para>
        /// ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (okved, name)
        /// </para>
        /// </summary>
        public refNsiOkvedType okved {
            get {
                XElement x = this.GetElement(XName.Get("okved", "http://bus.gov.ru/types/1"));
                return ((refNsiOkvedType)(x));
            }
            set {
                this.SetElement(XName.Get("okved", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по уставу
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (okved, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionActivityType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionActivityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("okved", "http://bus.gov.ru/types/1"), typeof(refNsiOkvedType));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Бюджет учреждения (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name, type)
    /// </para>
    /// </summary>
    public partial class institutionBudgetSoftType : global::bus.gov.ru.types.Item1.refNsiBudgetSoftType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionBudgetSoftType(XElement xe) { return XTypedServices.ToXTypedElement<institutionBudgetSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionBudgetSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Бюджет учреждения (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type)
        /// </para>
        /// </summary>
        public institutionBudgetSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип бюджета
        ///
        ///Допустимые значения:
        /// 01 - исполняемый бюджет;
        /// 02 - бюджет финансирования.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.budgetTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionBudgetSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionBudgetSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Бюджет учреждения (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code, name?, type)
    /// </para>
    /// </summary>
    public partial class institutionBudgetStrongType : global::bus.gov.ru.types.Item1.refNsiBudgetStrongType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionBudgetStrongType(XElement xe) { return XTypedServices.ToXTypedElement<institutionBudgetStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionBudgetStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Бюджет учреждения (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public institutionBudgetStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Тип бюджета
        ///
        ///Допустимые значения:
        /// 01 - исполняемый бюджет;
        /// 02 - бюджет финансирования.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.budgetTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionBudgetStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionBudgetStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Сведения о кассовых выплатах
    /// </para>
    /// <para>
    /// Regular expression: (name, payment)
    /// </para>
    /// </summary>
    public partial class institutionCashPaymentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionCashPaymentType(XElement xe) { return XTypedServices.ToXTypedElement<institutionCashPaymentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionCashPaymentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("payment", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Сведения о кассовых выплатах
        /// </para>
        /// <para>
        /// Regular expression: (name, payment)
        /// </para>
        /// </summary>
        public institutionCashPaymentType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование направления расходов
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, payment)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, payment)
        /// </para>
        /// </summary>
        public decimal payment {
            get {
                XElement x = this.GetElement(XName.Get("payment", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("payment", "http://bus.gov.ru/types/1"), value, "payment", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionCashPaymentType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionCashPaymentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("payment", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Справочники и классификаторы учреждения
    /// </para>
    /// <para>
    /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved+)
    /// </para>
    /// </summary>
    public partial class institutionClassifierType : global::bus.gov.ru.types.Item1.classifierType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refNsiOkvedType> okvedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionClassifierType(XElement xe) { return XTypedServices.ToXTypedElement<institutionClassifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionClassifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("okfs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okopf", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okogu", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okpo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okved", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Справочники и классификаторы учреждения
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved+)
        /// </para>
        /// </summary>
        public institutionClassifierType() {
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved+)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (okfs, okopf, okogu?, okpo, oktmo?, okved+)
        /// </para>
        /// </summary>
        public IList<refNsiOkvedType> okved {
            get {
                if ((this.okvedField == null)) {
                    this.okvedField = new XTypedList<refNsiOkvedType>(this, LinqToXsdTypeManager.Instance, XName.Get("okved", "http://bus.gov.ru/types/1"));
                }
                return this.okvedField;
            }
            set {
                if ((value == null)) {
                    this.okvedField = null;
                }
                else {
                    if ((this.okvedField == null)) {
                        this.okvedField = XTypedList<refNsiOkvedType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("okved", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<refNsiOkvedType>(this.okvedField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionClassifierType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionClassifierType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("okfs", "http://bus.gov.ru/types/1"), typeof(refNsiOkfsType));
            localElementDictionary.Add(XName.Get("okopf", "http://bus.gov.ru/types/1"), typeof(refNsiOkopfType));
            localElementDictionary.Add(XName.Get("okogu", "http://bus.gov.ru/types/1"), typeof(refNsiOkoguType));
            localElementDictionary.Add(XName.Get("okpo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("okved", "http://bus.gov.ru/types/1"), typeof(refNsiOkvedType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
    /// </para>
    /// <para>
    /// Regular expression: (type, name, number, date, founderAuthority?)
    /// </para>
    /// </summary>
    public partial class institutionEnactmentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionEnactmentType(XElement xe) { return XTypedServices.ToXTypedElement<institutionEnactmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionEnactmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public institutionEnactmentType() {
        }
        
        /// <summary>
        /// <para>
        /// Вид правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string number {
            get {
                XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Орган, осуществляющий функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public refNsiOgsSoftType founderAuthority {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionEnactmentType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionEnactmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class typeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private typeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class numberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private numberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
    /// </para>
    /// <para>
    /// Regular expression: (type, name, number, date, founderAuthority?)
    /// </para>
    /// </summary>
    public partial class institutionEnactmentVSRIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionEnactmentVSRIType(XElement xe) { return XTypedServices.ToXTypedElement<institutionEnactmentVSRIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionEnactmentVSRIType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founderAuthority", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public institutionEnactmentVSRIType() {
        }
        
        /// <summary>
        /// <para>
        /// Вид правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public string number {
            get {
                XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата правового акта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public System.DateTime date {
            get {
                XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Орган, осуществляющий функции и полномочия учредителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (type, name, number, date, founderAuthority?)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType founderAuthority {
            get {
                XElement x = this.GetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegSoftType)(x));
            }
            set {
                this.SetElement(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionEnactmentVSRIType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionEnactmentVSRIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("founderAuthority", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class typeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private typeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class numberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private numberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Информация об учреждении
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
    /// </para>
    /// </summary>
    public partial class institutionInfoType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentLocalType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionInfoType(XElement xe) { return XTypedServices.ToXTypedElement<institutionInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("additional", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("other", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Информация об учреждении
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
        /// </para>
        /// </summary>
        public institutionInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
        /// </para>
        /// </summary>
        public additionalLocalType additional {
            get {
                XElement x = this.GetElement(XName.Get("additional", "http://bus.gov.ru/types/1"));
                return ((additionalLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("additional", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Остальные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
        /// </para>
        /// </summary>
        public otherLocalType other {
            get {
                XElement x = this.GetElement(XName.Get("other", "http://bus.gov.ru/types/1"));
                return ((otherLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("other", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, main?, additional, other?, document*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.institutionInfoType.documentLocalType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentLocalType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionInfoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<institutionInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("additional", "http://bus.gov.ru/types/1"), typeof(additionalLocalType));
            localElementDictionary.Add(XName.Get("other", "http://bus.gov.ru/types/1"), typeof(otherLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ogrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rbs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("grbs", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("orgType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("special", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("classifier", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("complexAddress", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public string ogrn {
                get {
                    XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public refNsiConsRegSoftType rbs {
                get {
                    XElement x = this.GetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiConsRegSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Главный распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public refNsiConsRegSoftType grbs {
                get {
                    XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiConsRegSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
            /// 02 - орган управления государственным внебюджетным фондом;
            /// 03 - бюджетное учреждение;
            /// 04 - организация с долей государственного участия;
            /// 05 - унитарное предприятие;
            /// 06 - субъект естественных монополий;
            /// 07 - иная организация (Используется для учета негосударственных организаций);
            /// 08 -  казенное учреждение;
            /// 09 - государственная корпорация, государственная компания;
            /// 10 - автономное учреждение;
            /// 11 - организация, осуществляющая регулируемые виды деятельности;
            /// 12 - хозяйственное общество, в уставном капитале которого доля участия Российской Федерации, субъекта Российской Федерации, муниципального образования в совокупности превышает 50 процентов;
            /// 13 - дочернее хозяйственное общество;
            /// 14 - специализированная организация;
            /// 15 - оператор официального сайта;
            /// 16 - оператор электронной площадки.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.ogsOrgTypeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Специальные указания
            ///											Допустимые значения:
            ///											 04 - организации не предоставляются субсидии;
            ///											 05 - организации предоставляются субсидии.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public string special {
                get {
                    XElement x = this.GetElement(XName.Get("special", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("special", "http://bus.gov.ru/types/1"), value, "special", global::bus.gov.ru.types.Item1.ogsSpecialType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Общероссийские классификаторы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public institutionClassifierType classifier {
                get {
                    XElement x = this.GetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"));
                    return ((institutionClassifierType)(x));
                }
                set {
                    this.SetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Комплексный адрес
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (shortName?, ogrn, rbs?, grbs?, orgType, special?, classifier, complexAddress)
            /// </para>
            /// </summary>
            public complexAddressLocalType complexAddress {
                get {
                    XElement x = this.GetElement(XName.Get("complexAddress", "http://bus.gov.ru/types/1"));
                    return ((complexAddressLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("complexAddress", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rbs", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
                localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegSoftType));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("special", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("classifier", "http://bus.gov.ru/types/1"), typeof(institutionClassifierType));
                localElementDictionary.Add(XName.Get("complexAddress", "http://bus.gov.ru/types/1"), typeof(complexAddressLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (address, coordinates?)
            /// </para>
            /// </summary>
            public partial class complexAddressLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator complexAddressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<complexAddressLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static complexAddressLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("address", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("coordinates", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (address, coordinates?)
                /// </para>
                /// </summary>
                public complexAddressLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Фактический адрес
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (address, coordinates?)
                /// </para>
                /// </summary>
                public addressStrongType address {
                    get {
                        XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                        return ((addressStrongType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("address", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Координаты учреждения
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (address, coordinates?)
                /// </para>
                /// </summary>
                public coordinatesLocalType coordinates {
                    get {
                        XElement x = this.GetElement(XName.Get("coordinates", "http://bus.gov.ru/types/1"));
                        return ((coordinatesLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("coordinates", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("complexAddress", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<complexAddressLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(addressStrongType));
                    localElementDictionary.Add(XName.Get("coordinates", "http://bus.gov.ru/types/1"), typeof(coordinatesLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (longitude, latitude)
                /// </para>
                /// </summary>
                public partial class coordinatesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator coordinatesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<coordinatesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static coordinatesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("longitude", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("latitude", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (longitude, latitude)
                    /// </para>
                    /// </summary>
                    public coordinatesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Долгота
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (longitude, latitude)
                    /// </para>
                    /// </summary>
                    public double longitude {
                        get {
                            XElement x = this.GetElement(XName.Get("longitude", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("longitude", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Широта
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (longitude, latitude)
                    /// </para>
                    /// </summary>
                    public double latitude {
                        get {
                            XElement x = this.GetElement(XName.Get("latitude", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("latitude", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("coordinates", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<coordinatesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("longitude", "http://bus.gov.ru/types/1"), typeof(double));
                        localElementDictionary.Add(XName.Get("latitude", "http://bus.gov.ru/types/1"), typeof(double));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
        /// </para>
        /// </summary>
        public partial class additionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<branchLocalType> branchField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<institutionActivityType> activityField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator additionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<additionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static additionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("institutionType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("phone", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("www", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("branchInfo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("branch", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("enactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("activity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("eMail", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public additionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public refNsiInstitutionTypeType institutionType {
                get {
                    XElement x = this.GetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"));
                    return ((refNsiInstitutionTypeType)(x));
                }
                set {
                    this.SetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Публично-правовое образование
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public ppoLocalType ppo {
                get {
                    XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                    return ((ppoLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Телефон
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public string phone {
                get {
                    XElement x = this.GetElement(XName.Get("phone", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("phone", "http://bus.gov.ru/types/1"), value, "phone", global::bus.gov.ru.types.Item1.phoneStrongType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Ссылка на сайт учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public string www {
                get {
                    XElement x = this.GetElement(XName.Get("www", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("www", "http://bus.gov.ru/types/1"), value, "www", wwwLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Информация об учреждении-филиале
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public branchParentVSRIType branchInfo {
                get {
                    XElement x = this.GetElement(XName.Get("branchInfo", "http://bus.gov.ru/types/1"));
                    return ((branchParentVSRIType)(x));
                }
                set {
                    this.SetElement(XName.Get("branchInfo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Филиалы и представительства
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.institutionInfoType.additionalLocalType.branchLocalType> branch {
                get {
                    if ((this.branchField == null)) {
                        this.branchField = new XTypedList<branchLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("branch", "http://bus.gov.ru/types/1"));
                    }
                    return this.branchField;
                }
                set {
                    if ((value == null)) {
                        this.branchField = null;
                    }
                    else {
                        if ((this.branchField == null)) {
                            this.branchField = XTypedList<branchLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("branch", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<branchLocalType>(this.branchField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Код главы ГРБС (Первые три символа КБК)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public string section {
                get {
                    XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public institutionEnactmentVSRIType enactment {
                get {
                    XElement x = this.GetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"));
                    return ((institutionEnactmentVSRIType)(x));
                }
                set {
                    this.SetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОКАТО
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public refNsiOkatoType okato {
                get {
                    XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                    return ((refNsiOkatoType)(x));
                }
                set {
                    this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Вид деятельности
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public IList<institutionActivityType> activity {
                get {
                    if ((this.activityField == null)) {
                        this.activityField = new XTypedList<institutionActivityType>(this, LinqToXsdTypeManager.Instance, XName.Get("activity", "http://bus.gov.ru/types/1"));
                    }
                    return this.activityField;
                }
                set {
                    if ((value == null)) {
                        this.activityField = null;
                    }
                    else {
                        if ((this.activityField == null)) {
                            this.activityField = XTypedList<institutionActivityType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("activity", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<institutionActivityType>(this.activityField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Электронная почта
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo?, phone, www?, branchInfo?, branch*, section?, enactment?, okato, activity*, eMail?)
            /// </para>
            /// </summary>
            public string eMail {
                get {
                    XElement x = this.GetElement(XName.Get("eMail", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("eMail", "http://bus.gov.ru/types/1"), value, "eMail", global::bus.gov.ru.types.Item1.eMailType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("additional", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<additionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("institutionType", "http://bus.gov.ru/types/1"), typeof(refNsiInstitutionTypeType));
                localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(ppoLocalType));
                localElementDictionary.Add(XName.Get("phone", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("www", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("branchInfo", "http://bus.gov.ru/types/1"), typeof(branchParentVSRIType));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(branchLocalType));
                localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("enactment", "http://bus.gov.ru/types/1"), typeof(institutionEnactmentVSRIType));
                localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
                localElementDictionary.Add(XName.Get("activity", "http://bus.gov.ru/types/1"), typeof(institutionActivityType));
                localElementDictionary.Add(XName.Get("eMail", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name?, oktmo?, okato?)
            /// </para>
            /// </summary>
            public partial class ppoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ppoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ppoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name?, oktmo?, okato?)
                /// </para>
                /// </summary>
                public ppoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Наименование публично-правового образования
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (name?, oktmo?, okato?)
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// ОКТМО публично-правового образования
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (name?, oktmo?, okato?)
                /// </para>
                /// </summary>
                public refNsiOktmoType oktmo {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                        return ((refNsiOktmoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// ОКАТО
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (name?, oktmo?, okato?)
                /// </para>
                /// </summary>
                public refNsiOkatoType okato {
                    get {
                        XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                        return ((refNsiOkatoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ppo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ppoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
                    localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class nameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private nameLocalType() {
                    }
                }
            }
            
            private class wwwLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private wwwLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum, fullName?, type?, shortName?)
            /// </para>
            /// </summary>
            public partial class branchLocalType : global::bus.gov.ru.types.Item1.branchChildVSRIType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator branchLocalType(XElement xe) { return XTypedServices.ToXTypedElement<branchLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static branchLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum, fullName?, type?, shortName?)
                /// </para>
                /// </summary>
                public branchLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Сокращенное наименование 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum, fullName?, type?, shortName?)
                /// </para>
                /// </summary>
                public string shortName {
                    get {
                        XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("branch", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<branchLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class shortNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private shortNameLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (chief*, founder+, ogrnData?)
        /// </para>
        /// </summary>
        public partial class otherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<employeeType> chiefField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLocalType> founderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("chief", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ogrnData", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (chief*, founder+, ogrnData?)
            /// </para>
            /// </summary>
            public otherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Руководитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief*, founder+, ogrnData?)
            /// </para>
            /// </summary>
            public IList<employeeType> chief {
                get {
                    if ((this.chiefField == null)) {
                        this.chiefField = new XTypedList<employeeType>(this, LinqToXsdTypeManager.Instance, XName.Get("chief", "http://bus.gov.ru/types/1"));
                    }
                    return this.chiefField;
                }
                set {
                    if ((value == null)) {
                        this.chiefField = null;
                    }
                    else {
                        if ((this.chiefField == null)) {
                            this.chiefField = XTypedList<employeeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("chief", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<employeeType>(this.chiefField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредитель
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief*, founder+, ogrnData?)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.institutionInfoType.otherLocalType.founderLocalType> founder {
                get {
                    if ((this.founderField == null)) {
                        this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                    }
                    return this.founderField;
                }
                set {
                    if ((value == null)) {
                        this.founderField = null;
                    }
                    else {
                        if ((this.founderField == null)) {
                            this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLocalType>(this.founderField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата постановки на учет
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (chief*, founder+, ogrnData?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> ogrnData {
                get {
                    XElement x = this.GetElement(XName.Get("ogrnData", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ogrnData", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("other", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("chief", "http://bus.gov.ru/types/1"), typeof(employeeType));
                localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
                localElementDictionary.Add(XName.Get("ogrnData", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum?, fullName, authorities?)
            /// </para>
            /// </summary>
            public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiConsRegSoftType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static founderLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Полномочия учредителя
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderAuthoritiesVSRIType authorities {
                    get {
                        XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                        return ((founderAuthoritiesVSRIType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founder", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesVSRIType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, date, (url | code | content), type)
        /// </para>
        /// </summary>
        public partial class documentLocalType : global::bus.gov.ru.types.Item1.documentType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator documentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<documentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static documentLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, date, (url | code | content), type)
            /// </para>
            /// </summary>
            public documentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Тип документа
            ///
            ///Допустимые значения:
            /// F – учредительные документы;
            /// E – свидетельства о государственной регистрации;
            /// C – решение учредителя о создании государственного (муниципального) учреждения;
            /// S – решение учредителя о назначении руководителя;
            /// L - положения о филиалах, представительствах;
            /// I - правовой акт о назначении членов наблюдательного совета;
            /// O - прочие документы.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, date, (url | code | content), type)
            /// </para>
            /// </summary>
            public string type {
                get {
                    XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.institutionInfoDocumentTypeType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("document", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<documentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("url", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("content", "http://bus.gov.ru/types/1"), typeof(byte[]));
                localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция данных учреждения
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?)
    /// </para>
    /// </summary>
    public abstract partial class institutionPositionType : global::bus.gov.ru.types.Item1.changablePositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator institutionPositionType(XElement xe) {  return (institutionPositionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static institutionPositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция данных учреждения
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?)
        /// </para>
        /// </summary>
        public institutionPositionType() {
        }
        
        /// <summary>
        /// <para>
        /// Кем сформировано
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?)
        /// </para>
        /// </summary>
        public refNsiConsRegExtendedStrongType placer {
            get {
                XElement x = this.GetElement(XName.Get("placer", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegExtendedStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("placer", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Для кого сформировано
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?)
        /// </para>
        /// </summary>
        public refNsiConsRegExtendedStrongType initiator {
            get {
                XElement x = this.GetElement(XName.Get("initiator", "http://bus.gov.ru/types/1"));
                return ((refNsiConsRegExtendedStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("initiator", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер версии
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?)
        /// </para>
        /// </summary>
        public System.Nullable<int> versionNumber {
            get {
                XElement x = this.GetElement(XName.Get("versionNumber", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetElement(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("institutionPositionType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника Бюджеты
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
    /// </para>
    /// </summary>
    public partial class nsiBudgetType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiBudgetType(XElement xe) { return XTypedServices.ToXTypedElement<nsiBudgetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiBudgetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("tofk", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника Бюджеты
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public nsiBudgetType() {
        }
        
        /// <summary>
        /// <para>
        /// Код бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.budgetCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.budgetCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ТОФК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public refNsiTofkType tofk {
            get {
                XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                return ((refNsiTofkType)(x));
            }
            set {
                this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, tofk, oktmo?)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiBudgetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiBudgetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Перечень категорий потребителей
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiCustomerCategoryType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiCustomerCategoryType(XElement xe) { return XTypedServices.ToXTypedElement<nsiCustomerCategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiCustomerCategoryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Перечень категорий потребителей
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiCustomerCategoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Код категории
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.customerCategoryCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование категории
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.customerCategoryCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiCustomerCategoryType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiCustomerCategoryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника «Коды  ведомств (Главы)»
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code)
    /// </para>
    /// </summary>
    public partial class nsiDepartments : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiDepartments(XElement xe) { return XTypedServices.ToXTypedElement<nsiDepartments>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiDepartments() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника «Коды  ведомств (Главы)»
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code)
        /// </para>
        /// </summary>
        public nsiDepartments() {
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сокращенное наименование
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code)
        /// </para>
        /// </summary>
        public string shortName {
            get {
                XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код главы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiDepartments", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiDepartments>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
        
        private class shortNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 254, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private shortNameLocalType() {
            }
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция федерального перечня услуг (работ)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, founder?, service+)
    /// </para>
    /// </summary>
    public partial class nsiFederalServiceType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nsiServiceType> serviceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiFederalServiceType(XElement xe) { return XTypedServices.ToXTypedElement<nsiFederalServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiFederalServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("service", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция федерального перечня услуг (работ)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, founder?, service+)
        /// </para>
        /// </summary>
        public nsiFederalServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Учредитель
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, founder?, service+)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType founder {
            get {
                XElement x = this.GetElement(XName.Get("founder", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("founder", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Услуга (работа)
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, founder?, service+)
        /// </para>
        /// </summary>
        public IList<nsiServiceType> service {
            get {
                if ((this.serviceField == null)) {
                    this.serviceField = new XTypedList<nsiServiceType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", "http://bus.gov.ru/types/1"));
                }
                return this.serviceField;
            }
            set {
                if ((value == null)) {
                    this.serviceField = null;
                }
                else {
                    if ((this.serviceField == null)) {
                        this.serviceField = XTypedList<nsiServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<nsiServiceType>(this.serviceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiFederalServiceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiFederalServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
            localElementDictionary.Add(XName.Get("service", "http://bus.gov.ru/types/1"), typeof(nsiServiceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника Виды учреждений
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiInstitutionTypeType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiInstitutionTypeType(XElement xe) { return XTypedServices.ToXTypedElement<nsiInstitutionTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiInstitutionTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника Виды учреждений
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiInstitutionTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Код вида учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.institutionTypeCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование вида учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.institutionTypeCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiInstitutionTypeType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiInstitutionTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника Cвязи бюджетов и кодов КБК
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
    /// </para>
    /// </summary>
    public partial class nsiKbkBudgetType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiKbkBudgetType(XElement xe) { return XTypedServices.ToXTypedElement<nsiKbkBudgetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiKbkBudgetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("tofk", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника Cвязи бюджетов и кодов КБК
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public nsiKbkBudgetType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КБК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kbkCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КБК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджет
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType budget {
            get {
                XElement x = this.GetElement(XName.Get("budget", "http://bus.gov.ru/types/1"));
                return ((refNsiBudgetStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("budget", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип КБК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ТОФК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, budget, type, tofk)
        /// </para>
        /// </summary>
        public refNsiTofkType tofk {
            get {
                XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                return ((refNsiTofkType)(x));
            }
            set {
                this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiKbkBudgetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiKbkBudgetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(refNsiBudgetStrongType));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class typeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private typeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника КЛАДР
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
    /// </para>
    /// </summary>
    public partial class nsiKladrType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiKladrType(XElement xe) { return XTypedServices.ToXTypedElement<nsiKladrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiKladrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("level", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("zip", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника КЛАДР
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public nsiKladrType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kladrMixCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.kladrMixCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Уровень КЛАДР
        ///
        ///Допустимые значения:
        /// D - Федеральный округ;
        /// R - Регион;
        /// A - Район;
        /// C - Город;
        /// S - Населенный пункт;
        /// L - Улица.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public string level {
            get {
                XElement x = this.GetElement(XName.Get("level", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("level", "http://bus.gov.ru/types/1"), value, "level", global::bus.gov.ru.types.Item1.kladrLevelType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public refNsiOkatoType okato {
            get {
                XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                return ((refNsiOkatoType)(x));
            }
            set {
                this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Индекс
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, level, okato?, zip?)
        /// </para>
        /// </summary>
        public string zip {
            get {
                XElement x = this.GetElement(XName.Get("zip", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("zip", "http://bus.gov.ru/types/1"), value, "zip", global::bus.gov.ru.types.Item1.zipType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiKladrType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiKladrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("level", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("zip", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника КОСГУ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
    /// </para>
    /// </summary>
    public partial class nsiKosguType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiKosguType(XElement xe) { return XTypedServices.ToXTypedElement<nsiKosguType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiKosguType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника КОСГУ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public nsiKosguType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kosguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiKosguType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiKosguType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип позиции справочника ОГС
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
    /// </para>
    /// </summary>
    public abstract partial class nsiOgsPositionType : global::bus.gov.ru.types.Item1.changablePositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOgsPositionType(XElement xe) {  return (nsiOgsPositionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOgsPositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("annulment", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Тип позиции справочника ОГС
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
        /// </para>
        /// </summary>
        public nsiOgsPositionType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата включения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
        /// </para>
        /// </summary>
        public System.DateTime startDateActive {
            get {
                XElement x = this.GetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата исключения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> endDateActive {
            get {
                XElement x = this.GetElement(XName.Get("endDateActive", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Статус
        ///Допустимые значения:
        /// 800 – требует уточнения;
        /// 801 – включена;
        /// 865 – исключена;
        /// 888 – отменена.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
        /// </para>
        /// </summary>
        public string businessStatus {
            get {
                XElement x = this.GetElement(XName.Get("businessStatus", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), value, "businessStatus", global::bus.gov.ru.types.Item1.ogsBusinessStatusType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак аннулирования полномочий
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment)
        /// </para>
        /// </summary>
        public bool annulment {
            get {
                XElement x = this.GetElement(XName.Get("annulment", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(XName.Get("annulment", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOgsPositionType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("annulment", "http://bus.gov.ru/types/1"), typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция перечня ГМУ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
    /// </para>
    /// </summary>
    public partial class nsiOgsType : global::bus.gov.ru.types.Item1.nsiOgsPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOgsType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOgsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOgsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("annulment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("additional", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("other", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция перечня ГМУ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public nsiOgsType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public additionalLocalType additional {
            get {
                XElement x = this.GetElement(XName.Get("additional", "http://bus.gov.ru/types/1"));
                return ((additionalLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("additional", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Остальные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public otherLocalType other {
            get {
                XElement x = this.GetElement(XName.Get("other", "http://bus.gov.ru/types/1"));
                return ((otherLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("other", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип регистрации учреждения на сайте ГМУ
        ///
        ///Допустимые значения:
        /// S - зарегистрировано самостоятельно;
        /// F - зарегистрировано организацией, являющейся представителем учреждения.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string gmuRegistrationType {
            get {
                XElement x = this.GetElement(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), value, "gmuRegistrationType", global::bus.gov.ru.types.Item1.gmuRegistrationTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOgsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOgsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("annulment", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("additional", "http://bus.gov.ru/types/1"), typeof(additionalLocalType));
            localElementDictionary.Add(XName.Get("other", "http://bus.gov.ru/types/1"), typeof(otherLocalType));
            localElementDictionary.Add(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<institutionBudgetStrongType> budgetField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<requisiteType> paymentRequisiteField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в СПЗ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string regNumSpz {
                get {
                    XElement x = this.GetElement(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), value, "regNumSpz", global::bus.gov.ru.types.Item1.spzCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в ПУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string regNumPubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), value, "regNumPubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в РУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string regNumRubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), value, "regNumRubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в НУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string regNumNubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), value, "regNumNubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ИНН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string inn {
                get {
                    XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КПП
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string kpp {
                get {
                    XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string ogrn {
                get {
                    XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// БИК
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string bik {
                get {
                    XElement x = this.GetElement(XName.Get("bik", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("bik", "http://bus.gov.ru/types/1"), value, "bik", bikLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Регистрационный номер банка
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string nomBank {
                get {
                    XElement x = this.GetElement(XName.Get("nomBank", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("nomBank", "http://bus.gov.ru/types/1"), value, "nomBank", nomBankLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType rbs {
                get {
                    XElement x = this.GetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Главный распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType grbs {
                get {
                    XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
            /// 02 - орган управления государственным внебюджетным фондом;
            /// 03 - бюджетное учреждение;
            /// 04 - организация с долей государственного участия;
            /// 05 - унитарное предприятие;
            /// 06 - субъект естественных монополий;
            /// 07 - иная организация (Используется для учета негосударственных организаций);
            /// 08 - казенное учреждение;
            /// 09 - государственная корпорация, государственная компания (в том числе госкорпорация «Росатом»);
            /// 10 - автономное учреждение;
            /// 11 - организация, осуществляющая регулируемые виды деятельности;
            /// 12 - хозяйственное общество, с долей государства, муниципального образования более 50 процентов;
            /// 13 - дочернее хозяйственное общество;
            /// 14 - специализированная организация;
            /// 15 - оператор официального сайта;
            /// 16 - оператор электронной площадки;
            /// 17 – орган аудита;
            /// 18 – банк;
            /// 19 – орган контроля;
            /// 20 – иное юридическое лицо.
            ///
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.ogsOrgTypeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ТОФК клиента
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public refNsiTofkType tofk {
                get {
                    XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                    return ((refNsiTofkType)(x));
                }
                set {
                    this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Специальные указания
            ///
            ///Допустимые значения:
            /// 04 - организации не предоставляются субсидии;
            /// 05 - организации предоставляются субсидии.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public string special {
                get {
                    XElement x = this.GetElement(XName.Get("special", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("special", "http://bus.gov.ru/types/1"), value, "special", global::bus.gov.ru.types.Item1.ogsSpecialType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовый орган
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public refNsiOgsStrongType financial {
                get {
                    XElement x = this.GetElement(XName.Get("financial", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("financial", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на ООС
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public credentialsOosType credentialsOos {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"));
                    return ((credentialsOosType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на сайте ГМУ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public credentialsGmuType credentialsGmu {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"));
                    return ((credentialsGmuType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия ФК
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public credentialsFkType credentialsFk {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"));
                    return ((credentialsFkType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Oрган государственной власти, в ведении которого по ведомственной или организационной принадлежности находится организация, обладающая полномочиями в сфере размещений заказов
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType headAgency {
                get {
                    XElement x = this.GetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Общероссийские классификаторы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public institutionClassifierType classifier {
                get {
                    XElement x = this.GetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"));
                    return ((institutionClassifierType)(x));
                }
                set {
                    this.SetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Бюджет
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public IList<institutionBudgetStrongType> budget {
                get {
                    if ((this.budgetField == null)) {
                        this.budgetField = new XTypedList<institutionBudgetStrongType>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", "http://bus.gov.ru/types/1"));
                    }
                    return this.budgetField;
                }
                set {
                    if ((value == null)) {
                        this.budgetField = null;
                    }
                    else {
                        if ((this.budgetField == null)) {
                            this.budgetField = XTypedList<institutionBudgetStrongType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<institutionBudgetStrongType>(this.budgetField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Фактический адрес
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public addressStrongType address {
                get {
                    XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                    return ((addressStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("address", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Платежный реквизит
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public IList<requisiteType> paymentRequisite {
                get {
                    if ((this.paymentRequisiteField == null)) {
                        this.paymentRequisiteField = new XTypedList<requisiteType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                    }
                    return this.paymentRequisiteField;
                }
                set {
                    if ((value == null)) {
                        this.paymentRequisiteField = null;
                    }
                    else {
                        if ((this.paymentRequisiteField == null)) {
                            this.paymentRequisiteField = XTypedList<requisiteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<requisiteType>(this.paymentRequisiteField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Является федеральным органом исполнительной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> foiv {
                get {
                    XElement x = this.GetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является филиалом
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public bool branch {
                get {
                    XElement x = this.GetElement(XName.Get("branch", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("branch", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата обновления данных организации в ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата и время обновления данных организации из ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulBasedUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является органом государственной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> ogv {
                get {
                    XElement x = this.GetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Публично-правовое образование
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, bik?, nomBank?, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?, ppo?)
            /// </para>
            /// </summary>
            public ppoLocalType ppo {
                get {
                    XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                    return ((ppoLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("bik", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("nomBank", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
                localElementDictionary.Add(XName.Get("special", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("financial", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
                localElementDictionary.Add(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), typeof(credentialsOosType));
                localElementDictionary.Add(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), typeof(credentialsGmuType));
                localElementDictionary.Add(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), typeof(credentialsFkType));
                localElementDictionary.Add(XName.Get("headAgency", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("classifier", "http://bus.gov.ru/types/1"), typeof(institutionClassifierType));
                localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(institutionBudgetStrongType));
                localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(addressStrongType));
                localElementDictionary.Add(XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"), typeof(requisiteType));
                localElementDictionary.Add(XName.Get("foiv", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("ogv", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(ppoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
            
            private class bikLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "\\d{9}|\\d{0}"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private bikLocalType() {
                }
            }
            
            private class nomBankLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 6, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nomBankLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name?, oktmo)
            /// </para>
            /// </summary>
            public partial class ppoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ppoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ppoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name?, oktmo)
                /// </para>
                /// </summary>
                public ppoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Наименование публично-правового образования
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (name?, oktmo)
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// ОКТМО  публично-правового образования
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (name?, oktmo)
                /// </para>
                /// </summary>
                public refNsiOktmoType oktmo {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                        return ((refNsiOktmoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ppo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ppoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class nameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private nameLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
        /// </para>
        /// </summary>
        public partial class additionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<branchChildType> branchField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator additionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<additionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static additionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("institutionType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppoOKATO", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("phone", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("www", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("branch", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("enactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public additionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public refNsiInstitutionTypeType institutionType {
                get {
                    XElement x = this.GetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"));
                    return ((refNsiInstitutionTypeType)(x));
                }
                set {
                    this.SetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер организации в Сводном реестре
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public string regNumConsReg {
                get {
                    XElement x = this.GetElement(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"), value, "regNumConsReg", global::bus.gov.ru.types.Item1.regNumConsRegOgsType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОКАТО публично-правового образования
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public refNsiOkatoType ppoOKATO {
                get {
                    XElement x = this.GetElement(XName.Get("ppoOKATO", "http://bus.gov.ru/types/1"));
                    return ((refNsiOkatoType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppoOKATO", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Телефон
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public string phone {
                get {
                    XElement x = this.GetElement(XName.Get("phone", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("phone", "http://bus.gov.ru/types/1"), value, "phone", global::bus.gov.ru.types.Item1.phoneStrongType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Ссылка на сайт учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public string www {
                get {
                    XElement x = this.GetElement(XName.Get("www", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("www", "http://bus.gov.ru/types/1"), value, "www", wwwLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Филиалы и представительства
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public IList<branchChildType> branch {
                get {
                    if ((this.branchField == null)) {
                        this.branchField = new XTypedList<branchChildType>(this, LinqToXsdTypeManager.Instance, XName.Get("branch", "http://bus.gov.ru/types/1"));
                    }
                    return this.branchField;
                }
                set {
                    if ((value == null)) {
                        this.branchField = null;
                    }
                    else {
                        if ((this.branchField == null)) {
                            this.branchField = XTypedList<branchChildType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("branch", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<branchChildType>(this.branchField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Код главы ГРБС (Первые три символа КБК)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public string section {
                get {
                    XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public institutionEnactmentType enactment {
                get {
                    XElement x = this.GetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"));
                    return ((institutionEnactmentType)(x));
                }
                set {
                    this.SetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОКАТО
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, regNumConsReg?, ppoOKATO?, phone, www?, branch*, section?, enactment?, okato)
            /// </para>
            /// </summary>
            public refNsiOkatoType okato {
                get {
                    XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                    return ((refNsiOkatoType)(x));
                }
                set {
                    this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("additional", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<additionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("institutionType", "http://bus.gov.ru/types/1"), typeof(refNsiInstitutionTypeType));
                localElementDictionary.Add(XName.Get("regNumConsReg", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ppoOKATO", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
                localElementDictionary.Add(XName.Get("phone", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("www", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(branchChildType));
                localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("enactment", "http://bus.gov.ru/types/1"), typeof(institutionEnactmentType));
                localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class wwwLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private wwwLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (chief*, founder*)
        /// </para>
        /// </summary>
        public partial class otherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<employeeType> chiefField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLocalType> founderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("chief", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (chief*, founder*)
            /// </para>
            /// </summary>
            public otherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Руководитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief*, founder*)
            /// </para>
            /// </summary>
            public IList<employeeType> chief {
                get {
                    if ((this.chiefField == null)) {
                        this.chiefField = new XTypedList<employeeType>(this, LinqToXsdTypeManager.Instance, XName.Get("chief", "http://bus.gov.ru/types/1"));
                    }
                    return this.chiefField;
                }
                set {
                    if ((value == null)) {
                        this.chiefField = null;
                    }
                    else {
                        if ((this.chiefField == null)) {
                            this.chiefField = XTypedList<employeeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("chief", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<employeeType>(this.chiefField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief*, founder*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.nsiOgsType.otherLocalType.founderLocalType> founder {
                get {
                    if ((this.founderField == null)) {
                        this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                    }
                    return this.founderField;
                }
                set {
                    if ((value == null)) {
                        this.founderField = null;
                    }
                    else {
                        if ((this.founderField == null)) {
                            this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLocalType>(this.founderField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("other", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("chief", "http://bus.gov.ru/types/1"), typeof(employeeType));
                localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum?, fullName, authorities?)
            /// </para>
            /// </summary>
            public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiOgsSoftType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static founderLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Полномочия учредителя
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderAuthoritiesVSRIType authorities {
                    get {
                        XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                        return ((founderAuthoritiesVSRIType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founder", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesVSRIType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКАТО
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiOkatoType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkatoType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkatoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkatoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКАТО
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiOkatoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okatoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okatoCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkatoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkatoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника  единиц измерения
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
    /// </para>
    /// </summary>
    public partial class nsiOkeiType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkeiType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkeiType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkeiType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("symbol", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("group", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника  единиц измерения
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public nsiOkeiType() {
        }
        
        /// <summary>
        /// <para>
        /// Код справочника единиц измерения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okeiCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по справочнику единиц измерения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Буквенный код
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public string symbol {
            get {
                XElement x = this.GetElement(XName.Get("symbol", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("symbol", "http://bus.gov.ru/types/1"), value, "symbol", symbolLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Раздел
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public sectionLocalType section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return ((sectionLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("section", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Группа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, symbol?, section, group)
        /// </para>
        /// </summary>
        public groupLocalType group {
            get {
                XElement x = this.GetElement(XName.Get("group", "http://bus.gov.ru/types/1"));
                return ((groupLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("group", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkeiType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkeiType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("symbol", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(sectionLocalType));
            localElementDictionary.Add(XName.Get("group", "http://bus.gov.ru/types/1"), typeof(groupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class symbolLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 30, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private symbolLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, name)
        /// </para>
        /// </summary>
        public partial class sectionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator sectionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sectionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static sectionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public sectionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Код раздела
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public string code {
                get {
                    XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Наименование раздела
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("section", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<sectionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class codeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private codeLocalType() {
                }
            }
            
            private class nameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nameLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, name)
        /// </para>
        /// </summary>
        public partial class groupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator groupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<groupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static groupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public groupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Код группы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public long code {
                get {
                    XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
                set {
                    this.SetElement(XName.Get("code", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Наименование группы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code, name)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("group", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<groupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(long));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class nameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nameLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКЭР
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
    /// </para>
    /// </summary>
    public partial class nsiOkerType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkerType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("subsection", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКЭР
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public nsiOkerType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКЭР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okerCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКЭР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okerCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public refNsiOkatoType okato {
            get {
                XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                return ((refNsiOkatoType)(x));
            }
            set {
                this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Раздел
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", sectionLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Подраздел
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, okato?, section?, subsection?)
        /// </para>
        /// </summary>
        public string subsection {
            get {
                XElement x = this.GetElement(XName.Get("subsection", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("subsection", "http://bus.gov.ru/types/1"), value, "subsection", subsectionLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkerType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("subsection", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class sectionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private sectionLocalType() {
            }
        }
        
        private class subsectionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private subsectionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКФС
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiOkfsType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkfsType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkfsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkfsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКФС
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiOkfsType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКФС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okfsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКФС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okfsCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkfsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkfsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКОГУ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiOkoguType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkoguType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkoguType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkoguType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКОГУ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiOkoguType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКОГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okoguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКОГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okoguCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkoguType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkoguType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКОПФ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
    /// </para>
    /// </summary>
    public partial class nsiOkopfType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkopfType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkopfType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkopfType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКОПФ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public nsiOkopfType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКОПФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okopfNewCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКОПФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okopfNewCodeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkopfType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkopfType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКПО
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
    /// </para>
    /// </summary>
    public partial class nsiOkpoType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkpoType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkpoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkpoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКПО
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public nsiOkpoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКПО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКПО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkpoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkpoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКТМО
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
    /// </para>
    /// </summary>
    public partial class nsiOktmoType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOktmoType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOktmoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOktmoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("addInfo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКТМО
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
        /// </para>
        /// </summary>
        public nsiOktmoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.oktmoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.oktmoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительные данные
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, addInfo?)
        /// </para>
        /// </summary>
        public string addInfo {
            get {
                XElement x = this.GetElement(XName.Get("addInfo", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("addInfo", "http://bus.gov.ru/types/1"), value, "addInfo", addInfoLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOktmoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOktmoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("addInfo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class addInfoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private addInfoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника ОКВЭД
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
    /// </para>
    /// </summary>
    public partial class nsiOkvedType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiOkvedType(XElement xe) { return XTypedServices.ToXTypedElement<nsiOkvedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiOkvedType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("subsection", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника ОКВЭД
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public nsiOkvedType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okvedCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.okvedCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Раздел
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public string section {
            get {
                XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", sectionLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Подраздел
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, section, subsection?)
        /// </para>
        /// </summary>
        public string subsection {
            get {
                XElement x = this.GetElement(XName.Get("subsection", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("subsection", "http://bus.gov.ru/types/1"), value, "subsection", subsectionLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiOkvedType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiOkvedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("subsection", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class sectionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private sectionLocalType() {
            }
        }
        
        private class subsectionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private subsectionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Базовый тип позиции справочника
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
    /// </para>
    /// </summary>
    public abstract partial class nsiPositionType : global::bus.gov.ru.types.Item1.changablePositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiPositionType(XElement xe) {  return (nsiPositionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiPositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Базовый тип позиции справочника
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
        /// </para>
        /// </summary>
        public nsiPositionType() {
        }
        
        /// <summary>
        /// <para>
        /// Дата принятия изменения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> approveDate {
            get {
                XElement x = this.GetElement(XName.Get("approveDate", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("approveDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата включения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
        /// </para>
        /// </summary>
        public System.DateTime startDateActive {
            get {
                XElement x = this.GetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата исключения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> endDateActive {
            get {
                XElement x = this.GetElement(XName.Get("endDateActive", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Статус
        ///
        ///Допустимые значения:
        /// 801 – включена;
        /// 866 – исключена.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus)
        /// </para>
        /// </summary>
        public string businessStatus {
            get {
                XElement x = this.GetElement(XName.Get("businessStatus", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), value, "businessStatus", global::bus.gov.ru.types.Item1.businessStatusType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiPositionType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника Публично-правовые образования
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
    /// </para>
    /// </summary>
    public partial class nsiPpoType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiPpoType(XElement xe) { return XTypedServices.ToXTypedElement<nsiPpoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiPpoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("okato", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника Публично-правовые образования
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public nsiPpoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код публично-правового образования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.ppoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование публично-правового образования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cсылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.ppoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public refNsiOktmoType oktmo {
            get {
                XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                return ((refNsiOktmoType)(x));
            }
            set {
                this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, code, name, parentCode?, oktmo, okato?)
        /// </para>
        /// </summary>
        public refNsiOkatoType okato {
            get {
                XElement x = this.GetElement(XName.Get("okato", "http://bus.gov.ru/types/1"));
                return ((refNsiOkatoType)(x));
            }
            set {
                this.SetElement(XName.Get("okato", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiPpoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiPpoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            localElementDictionary.Add(XName.Get("okato", "http://bus.gov.ru/types/1"), typeof(refNsiOkatoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Перечень услуг (работ)
    /// </para>
    /// <para>
    /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
    /// </para>
    /// </summary>
    public partial class nsiServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refNsiCustomerCategoryType> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiServiceType(XElement xe) { return XTypedServices.ToXTypedElement<nsiServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("parentCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("enactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("category", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("field", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Перечень услуг (работ)
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public nsiServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Код услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на родителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public string parentCode {
            get {
                XElement x = this.GetElement(XName.Get("parentCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("parentCode", "http://bus.gov.ru/types/1"), value, "parentCode", global::bus.gov.ru.types.Item1.serviceCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак услуги или работы
        ///
        ///Допустимые значения:
        /// S – услуга;
        /// W – работа.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.serviceTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер (код) по утвержденному перечню услуг (работ)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public string number {
            get {
                XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Реквизиты документа, утвердившего перечень услуг (работ)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public enactmentLocalType enactment {
            get {
                XElement x = this.GetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"));
                return ((enactmentLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Категория потребителей
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public IList<refNsiCustomerCategoryType> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<refNsiCustomerCategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("category", "http://bus.gov.ru/types/1"));
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<refNsiCustomerCategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("category", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<refNsiCustomerCategoryType>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Сфера деятельности
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, parentCode?, type, number?, enactment?, category*, field)
        /// </para>
        /// </summary>
        public fieldType field {
            get {
                XElement x = this.GetElement(XName.Get("field", "http://bus.gov.ru/types/1"));
                return ((fieldType)(x));
            }
            set {
                this.SetElement(XName.Get("field", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiServiceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("parentCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("enactment", "http://bus.gov.ru/types/1"), typeof(enactmentLocalType));
            localElementDictionary.Add(XName.Get("category", "http://bus.gov.ru/types/1"), typeof(refNsiCustomerCategoryType));
            localElementDictionary.Add(XName.Get("field", "http://bus.gov.ru/types/1"), typeof(fieldType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class numberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private numberLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (type?, name?, number?, date?, author?)
        /// </para>
        /// </summary>
        public partial class enactmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator enactmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<enactmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static enactmentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("author", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public enactmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид документа
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public string type {
                get {
                    XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Наименование документа
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Номер документа
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public string number {
                get {
                    XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата документа
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> date {
                get {
                    XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Орган, утвердивший документ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (type?, name?, number?, date?, author?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType author {
                get {
                    XElement x = this.GetElement(XName.Get("author", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("author", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("enactment", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<enactmentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("author", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class typeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private typeLocalType() {
                }
            }
            
            private class nameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nameLocalType() {
                }
            }
            
            private class numberLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private numberLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция перечня услуг (работ) субъекта РФ
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, ppo, founder?, service+)
    /// </para>
    /// </summary>
    public partial class nsiSubjectServiceType : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nsiServiceType> serviceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiSubjectServiceType(XElement xe) { return XTypedServices.ToXTypedElement<nsiSubjectServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiSubjectServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("service", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция перечня услуг (работ) субъекта РФ
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, ppo, founder?, service+)
        /// </para>
        /// </summary>
        public nsiSubjectServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Публично-правовое образование
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, ppo, founder?, service+)
        /// </para>
        /// </summary>
        public refNsiPpoType ppo {
            get {
                XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                return ((refNsiPpoType)(x));
            }
            set {
                this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Учредитель
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, ppo, founder?, service+)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType founder {
            get {
                XElement x = this.GetElement(XName.Get("founder", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("founder", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Услуга (работа)
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, ppo, founder?, service+)
        /// </para>
        /// </summary>
        public IList<nsiServiceType> service {
            get {
                if ((this.serviceField == null)) {
                    this.serviceField = new XTypedList<nsiServiceType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", "http://bus.gov.ru/types/1"));
                }
                return this.serviceField;
            }
            set {
                if ((value == null)) {
                    this.serviceField = null;
                }
                else {
                    if ((this.serviceField == null)) {
                        this.serviceField = XTypedList<nsiServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<nsiServiceType>(this.serviceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiSubjectServiceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiSubjectServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(refNsiPpoType));
            localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
            localElementDictionary.Add(XName.Get("service", "http://bus.gov.ru/types/1"), typeof(nsiServiceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Позиция справочника «ТОФК»
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
    /// </para>
    /// </summary>
    public partial class nsiTOFK : global::bus.gov.ru.types.Item1.nsiPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator nsiTOFK(XElement xe) { return XTypedServices.ToXTypedElement<nsiTOFK>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nsiTOFK() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approveDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("address", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Позиция справочника «ТОФК»
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
        /// </para>
        /// </summary>
        public nsiTOFK() {
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование органа ФК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сокращенное наименование органа ФК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
        /// </para>
        /// </summary>
        public string shortName {
            get {
                XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код по классификатору органов Федерального казначейства
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Адрес органа ФК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, approveDate?, startDateActive, endDateActive?, businessStatus, fullName, shortName?, code, address)
        /// </para>
        /// </summary>
        public string address {
            get {
                XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("address", "http://bus.gov.ru/types/1"), value, "address", addressLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nsiTOFK", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nsiTOFK>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("approveDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
        
        private class shortNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private shortNameLocalType() {
            }
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{4}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class addressLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 512, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private addressLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Результат обработки пакета
    /// </para>
    /// <para>
    /// Regular expression: (refId?, result, positionResult*, violation*)
    /// </para>
    /// </summary>
    public partial class packetResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<positionResultType> positionResultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<violationType> violationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator packetResultType(XElement xe) { return XTypedServices.ToXTypedElement<packetResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static packetResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("refId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("result", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("positionResult", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("violation", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Результат обработки пакета
        /// </para>
        /// <para>
        /// Regular expression: (refId?, result, positionResult*, violation*)
        /// </para>
        /// </summary>
        public packetResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор обработанного пакета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (refId?, result, positionResult*, violation*)
        /// </para>
        /// </summary>
        public string refId {
            get {
                XElement x = this.GetElement(XName.Get("refId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("refId", "http://bus.gov.ru/types/1"), value, "refId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Результат обработки пакета
        ///
        ///Допустимые значения:
        /// success - пакет обработан;
        /// failure - пакет не обработан.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refId?, result, positionResult*, violation*)
        /// </para>
        /// </summary>
        public string result {
            get {
                XElement x = this.GetElement(XName.Get("result", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("result", "http://bus.gov.ru/types/1"), value, "result", global::bus.gov.ru.types.Item1.resultType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Результат обработки позиции
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (refId?, result, positionResult*, violation*)
        /// </para>
        /// </summary>
        public IList<positionResultType> positionResult {
            get {
                if ((this.positionResultField == null)) {
                    this.positionResultField = new XTypedList<positionResultType>(this, LinqToXsdTypeManager.Instance, XName.Get("positionResult", "http://bus.gov.ru/types/1"));
                }
                return this.positionResultField;
            }
            set {
                if ((value == null)) {
                    this.positionResultField = null;
                }
                else {
                    if ((this.positionResultField == null)) {
                        this.positionResultField = XTypedList<positionResultType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("positionResult", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<positionResultType>(this.positionResultField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Выявленные в процессе обработки пакета нарушения и ошибки
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (refId?, result, positionResult*, violation*)
        /// </para>
        /// </summary>
        public IList<violationType> violation {
            get {
                if ((this.violationField == null)) {
                    this.violationField = new XTypedList<violationType>(this, LinqToXsdTypeManager.Instance, XName.Get("violation", "http://bus.gov.ru/types/1"));
                }
                return this.violationField;
            }
            set {
                if ((value == null)) {
                    this.violationField = null;
                }
                else {
                    if ((this.violationField == null)) {
                        this.violationField = XTypedList<violationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("violation", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<violationType>(this.violationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("packetResultType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<packetResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("refId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("result", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("positionResult", "http://bus.gov.ru/types/1"), typeof(positionResultType));
            localElementDictionary.Add(XName.Get("violation", "http://bus.gov.ru/types/1"), typeof(violationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Отчет о финансовых результатах деятельности (ф. 0503121)
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
    /// </para>
    /// </summary>
    public partial class annualBalanceF0503121Type : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator annualBalanceF0503121Type(XElement xe) { return XTypedServices.ToXTypedElement<annualBalanceF0503121Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annualBalanceF0503121Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("formationPeriod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("generalData", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("income", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("expense", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Отчет о финансовых результатах деятельности (ф. 0503121)
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceF0503121Type() {
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> formationPeriod {
            get {
                XElement x = this.GetElement(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), value, "formationPeriod", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Общие данные
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public annualBalanceBudgetGeneralDataType generalData {
            get {
                XElement x = this.GetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"));
                return ((annualBalanceBudgetGeneralDataType)(x));
            }
            set {
                this.SetElement(XName.Get("generalData", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Доходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public incomeLocalType income {
            get {
                XElement x = this.GetElement(XName.Get("income", "http://bus.gov.ru/types/1"));
                return ((incomeLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("income", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расходы
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public expenseLocalType expense {
            get {
                XElement x = this.GetElement(XName.Get("expense", "http://bus.gov.ru/types/1"));
                return ((expenseLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("expense", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Чистый операционный результат
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public netOperatingResultsLocalType netOperatingResults {
            get {
                XElement x = this.GetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"));
                return ((netOperatingResultsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с нефинансовыми активами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public nonFinancialAssetsTransactionsLocalType nonFinancialAssetsTransactions {
            get {
                XElement x = this.GetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"));
                return ((nonFinancialAssetsTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Операции с финансовыми активами и обязательствами
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public financialAssetsLiabilitiesTransactionsLocalType financialAssetsLiabilitiesTransactions {
            get {
                XElement x = this.GetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"));
                return ((financialAssetsLiabilitiesTransactionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, formationPeriod?, generalData, income, expense, netOperatingResults, nonFinancialAssetsTransactions, financialAssetsLiabilitiesTransactions, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("annualBalanceF0503121Type", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annualBalanceF0503121Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("formationPeriod", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("generalData", "http://bus.gov.ru/types/1"), typeof(annualBalanceBudgetGeneralDataType));
            localElementDictionary.Add(XName.Get("income", "http://bus.gov.ru/types/1"), typeof(incomeLocalType));
            localElementDictionary.Add(XName.Get("expense", "http://bus.gov.ru/types/1"), typeof(expenseLocalType));
            localElementDictionary.Add(XName.Get("netOperatingResults", "http://bus.gov.ru/types/1"), typeof(netOperatingResultsLocalType));
            localElementDictionary.Add(XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1"), typeof(nonFinancialAssetsTransactionsLocalType));
            localElementDictionary.Add(XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1"), typeof(financialAssetsLiabilitiesTransactionsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class incomeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator incomeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<incomeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static incomeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public incomeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("income", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<incomeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class expenseLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator expenseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<expenseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static expenseLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public expenseLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("expense", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<expenseLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class netOperatingResultsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator netOperatingResultsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<netOperatingResultsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static netOperatingResultsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public netOperatingResultsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("netOperatingResults", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<netOperatingResultsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class nonFinancialAssetsTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator nonFinancialAssetsTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nonFinancialAssetsTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static nonFinancialAssetsTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public nonFinancialAssetsTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("nonFinancialAssetsTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nonFinancialAssetsTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportItem+)
        /// </para>
        /// </summary>
        public partial class financialAssetsLiabilitiesTransactionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<reportItemF0503121TopLevelType> reportItemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator financialAssetsLiabilitiesTransactionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static financialAssetsLiabilitiesTransactionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportItem", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public financialAssetsLiabilitiesTransactionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (reportItem+)
            /// </para>
            /// </summary>
            public IList<reportItemF0503121TopLevelType> reportItem {
                get {
                    if ((this.reportItemField == null)) {
                        this.reportItemField = new XTypedList<reportItemF0503121TopLevelType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                    }
                    return this.reportItemField;
                }
                set {
                    if ((value == null)) {
                        this.reportItemField = null;
                    }
                    else {
                        if ((this.reportItemField == null)) {
                            this.reportItemField = XTypedList<reportItemF0503121TopLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportItem", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<reportItemF0503121TopLevelType>(this.reportItemField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("financialAssetsLiabilitiesTransactions", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<financialAssetsLiabilitiesTransactionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121TopLevelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Пакет данных
    /// </para>
    /// <para>
    /// Regular expression: (header)
    /// </para>
    /// </summary>
    public abstract partial class packetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator packetType(XElement xe) {  return (packetType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static packetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("header", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Пакет данных
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public packetType() {
        }
        
        /// <summary>
        /// <para>
        /// Заголовок информационного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public headerType header {
            get {
                XElement x = this.GetElement(XName.Get("header", "http://bus.gov.ru/types/1"));
                return ((headerType)(x));
            }
            set {
                this.SetElement(XName.Get("header", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("packetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("header", "http://bus.gov.ru/types/1"), typeof(headerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Персональные данные
    /// </para>
    /// <para>
    /// Regular expression: (lastName, firstName, middleName?)
    /// </para>
    /// </summary>
    public partial class personType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator personType(XElement xe) { return XTypedServices.ToXTypedElement<personType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static personType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lastName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("firstName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("middleName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Персональные данные
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?)
        /// </para>
        /// </summary>
        public personType() {
        }
        
        /// <summary>
        /// <para>
        /// Фамилия
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?)
        /// </para>
        /// </summary>
        public string lastName {
            get {
                XElement x = this.GetElement(XName.Get("lastName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lastName", "http://bus.gov.ru/types/1"), value, "lastName", lastNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Имя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?)
        /// </para>
        /// </summary>
        public string firstName {
            get {
                XElement x = this.GetElement(XName.Get("firstName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("firstName", "http://bus.gov.ru/types/1"), value, "firstName", firstNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Отчество
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?)
        /// </para>
        /// </summary>
        public string middleName {
            get {
                XElement x = this.GetElement(XName.Get("middleName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("middleName", "http://bus.gov.ru/types/1"), value, "middleName", middleNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("personType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<personType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("lastName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("firstName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("middleName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class lastNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lastNameLocalType() {
            }
        }
        
        private class firstNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private firstNameLocalType() {
            }
        }
        
        private class middleNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private middleNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Результат обработки позиции
    /// </para>
    /// <para>
    /// Regular expression: (refPositionId, result, violation*, url?)
    /// </para>
    /// </summary>
    public partial class positionResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<violationType> violationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator positionResultType(XElement xe) { return XTypedServices.ToXTypedElement<positionResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static positionResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("refPositionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("result", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("violation", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("url", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Результат обработки позиции
        /// </para>
        /// <para>
        /// Regular expression: (refPositionId, result, violation*, url?)
        /// </para>
        /// </summary>
        public positionResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор обработанной позиции
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refPositionId, result, violation*, url?)
        /// </para>
        /// </summary>
        public string refPositionId {
            get {
                XElement x = this.GetElement(XName.Get("refPositionId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("refPositionId", "http://bus.gov.ru/types/1"), value, "refPositionId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Результат обработки позиции
        ///
        ///Допустимые значения:
        /// success - обработано успешно;
        /// failure - обработано с ошибками.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (refPositionId, result, violation*, url?)
        /// </para>
        /// </summary>
        public string result {
            get {
                XElement x = this.GetElement(XName.Get("result", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("result", "http://bus.gov.ru/types/1"), value, "result", global::bus.gov.ru.types.Item1.resultType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Выявленные в процессе обработки позиции нарушения и ошибки
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (refPositionId, result, violation*, url?)
        /// </para>
        /// </summary>
        public IList<violationType> violation {
            get {
                if ((this.violationField == null)) {
                    this.violationField = new XTypedList<violationType>(this, LinqToXsdTypeManager.Instance, XName.Get("violation", "http://bus.gov.ru/types/1"));
                }
                return this.violationField;
            }
            set {
                if ((value == null)) {
                    this.violationField = null;
                }
                else {
                    if ((this.violationField == null)) {
                        this.violationField = XTypedList<violationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("violation", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<violationType>(this.violationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Гиперссылка на форму отображения загруженных данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (refPositionId, result, violation*, url?)
        /// </para>
        /// </summary>
        public string url {
            get {
                XElement x = this.GetElement(XName.Get("url", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("url", "http://bus.gov.ru/types/1"), value, "url", global::bus.gov.ru.types.Item1.urlType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("positionResultType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<positionResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("refPositionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("result", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("violation", "http://bus.gov.ru/types/1"), typeof(violationType));
            localElementDictionary.Add(XName.Get("url", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Базовый тип позиции
    /// </para>
    /// <para>
    /// Regular expression: (positionId)
    /// </para>
    /// </summary>
    public partial class positionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator positionType(XElement xe) { return XTypedServices.ToXTypedElement<positionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static positionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Базовый тип позиции
        /// </para>
        /// <para>
        /// Regular expression: (positionId)
        /// </para>
        /// </summary>
        public positionType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор позиции в информационном пакете
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId)
        /// </para>
        /// </summary>
        public string positionId {
            get {
                XElement x = this.GetElement(XName.Get("positionId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("positionId", "http://bus.gov.ru/types/1"), value, "positionId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("positionType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<positionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Регистрационные данные учреждения для офлайн-клиента 
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
    /// </para>
    /// </summary>
    public partial class ofcRegistrationInfoType : global::bus.gov.ru.types.Item1.nsiOgsPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ofcRegistrationInfoType(XElement xe) { return XTypedServices.ToXTypedElement<ofcRegistrationInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ofcRegistrationInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("annulment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("additional", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("other", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Регистрационные данные учреждения для офлайн-клиента 
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public ofcRegistrationInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Организация, являющаяся представителем учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType authorizedOrg {
            get {
                XElement x = this.GetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public additionalLocalType additional {
            get {
                XElement x = this.GetElement(XName.Get("additional", "http://bus.gov.ru/types/1"));
                return ((additionalLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("additional", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Остальные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public otherLocalType other {
            get {
                XElement x = this.GetElement(XName.Get("other", "http://bus.gov.ru/types/1"));
                return ((otherLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("other", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип регистрации учреждения на сайте ГМУ
        ///
        ///Допустимые значения:
        /// S - зарегистрировано самостоятельно;
        /// F - зарегистрировано организацией, являющейся представителем учреждения.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string gmuRegistrationType {
            get {
                XElement x = this.GetElement(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), value, "gmuRegistrationType", global::bus.gov.ru.types.Item1.gmuRegistrationTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ofcRegistrationInfoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ofcRegistrationInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("annulment", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("additional", "http://bus.gov.ru/types/1"), typeof(additionalLocalType));
            localElementDictionary.Add(XName.Get("other", "http://bus.gov.ru/types/1"), typeof(otherLocalType));
            localElementDictionary.Add(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<institutionBudgetStrongType> budgetField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<requisiteType> paymentRequisiteField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в СПЗ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumSpz {
                get {
                    XElement x = this.GetElement(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), value, "regNumSpz", global::bus.gov.ru.types.Item1.spzCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в ПУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumPubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), value, "regNumPubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в РУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumRubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), value, "regNumRubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в НУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumNubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), value, "regNumNubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ИНН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string inn {
                get {
                    XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КПП
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string kpp {
                get {
                    XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string ogrn {
                get {
                    XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType rbs {
                get {
                    XElement x = this.GetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Главный распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType grbs {
                get {
                    XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
            /// 02 - орган управления государственным внебюджетным фондом;
            /// 03 - бюджетное учреждение;
            /// 04 - организация с долей государственного участия;
            /// 05 - унитарное предприятие;
            /// 06 - субъект естественных монополий;
            /// 07 - иная организация (Используется для учета негосударственных организаций);
            /// 08 -  казенное учреждение;
            /// 09 - государственная корпорация, государственная компания;
            /// 10 - автономное учреждение;
            /// 11 - организация, осуществляющая регулируемые виды деятельности;
            /// 12 - хозяйственное общество, в уставном капитале которого доля участия Российской Федерации, субъекта Российской Федерации, муниципального образования в совокупности превышает 50 процентов;
            /// 13 - дочернее хозяйственное общество;
            /// 14 - специализированная организация;
            /// 15 - оператор официального сайта;
            /// 16 - оператор электронной площадки.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.ogsOrgTypeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ТОФК клиента
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiTofkType tofk {
                get {
                    XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                    return ((refNsiTofkType)(x));
                }
                set {
                    this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Специальные указания
            ///
            ///Допустимые значения:
            /// 04 - организации не предоставляются субсидии;
            /// 05 - организации предоставляются субсидии.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string special {
                get {
                    XElement x = this.GetElement(XName.Get("special", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("special", "http://bus.gov.ru/types/1"), value, "special", global::bus.gov.ru.types.Item1.ogsSpecialType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовый орган
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsStrongType financial {
                get {
                    XElement x = this.GetElement(XName.Get("financial", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("financial", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на ООС
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsOosType credentialsOos {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"));
                    return ((credentialsOosType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на сайте ГМУ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsGmuType credentialsGmu {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"));
                    return ((credentialsGmuType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия ФК
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsFkType credentialsFk {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"));
                    return ((credentialsFkType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Oрган государственной власти, в ведении которого по ведомственной или организационной принадлежности находится организация, обладающая полномочиями в сфере размещений заказов
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType headAgency {
                get {
                    XElement x = this.GetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Общероссийские классификаторы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public institutionClassifierType classifier {
                get {
                    XElement x = this.GetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"));
                    return ((institutionClassifierType)(x));
                }
                set {
                    this.SetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Бюджет
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public IList<institutionBudgetStrongType> budget {
                get {
                    if ((this.budgetField == null)) {
                        this.budgetField = new XTypedList<institutionBudgetStrongType>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", "http://bus.gov.ru/types/1"));
                    }
                    return this.budgetField;
                }
                set {
                    if ((value == null)) {
                        this.budgetField = null;
                    }
                    else {
                        if ((this.budgetField == null)) {
                            this.budgetField = XTypedList<institutionBudgetStrongType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<institutionBudgetStrongType>(this.budgetField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Фактический адрес
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public addressStrongType address {
                get {
                    XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                    return ((addressStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("address", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Платежный реквизит
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public IList<requisiteType> paymentRequisite {
                get {
                    if ((this.paymentRequisiteField == null)) {
                        this.paymentRequisiteField = new XTypedList<requisiteType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                    }
                    return this.paymentRequisiteField;
                }
                set {
                    if ((value == null)) {
                        this.paymentRequisiteField = null;
                    }
                    else {
                        if ((this.paymentRequisiteField == null)) {
                            this.paymentRequisiteField = XTypedList<requisiteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<requisiteType>(this.paymentRequisiteField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Является федеральным органом исполнительной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> foiv {
                get {
                    XElement x = this.GetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является филиалом
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public bool branch {
                get {
                    XElement x = this.GetElement(XName.Get("branch", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("branch", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата обновления данных организации в ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата и время обновления данных организации из ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulBasedUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является органом государственной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> ogv {
                get {
                    XElement x = this.GetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
                localElementDictionary.Add(XName.Get("special", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("financial", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
                localElementDictionary.Add(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), typeof(credentialsOosType));
                localElementDictionary.Add(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), typeof(credentialsGmuType));
                localElementDictionary.Add(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), typeof(credentialsFkType));
                localElementDictionary.Add(XName.Get("headAgency", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("classifier", "http://bus.gov.ru/types/1"), typeof(institutionClassifierType));
                localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(institutionBudgetStrongType));
                localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(addressStrongType));
                localElementDictionary.Add(XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"), typeof(requisiteType));
                localElementDictionary.Add(XName.Get("foiv", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("ogv", "http://bus.gov.ru/types/1"), typeof(bool));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
        /// </para>
        /// </summary>
        public partial class additionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<branchChildType> branchField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator additionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<additionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static additionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("institutionType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("phone", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("www", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("branch", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("enactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public additionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public refNsiInstitutionTypeType institutionType {
                get {
                    XElement x = this.GetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"));
                    return ((refNsiInstitutionTypeType)(x));
                }
                set {
                    this.SetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Публично-правовое образование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public ppoLocalType ppo {
                get {
                    XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                    return ((ppoLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Телефон
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string phone {
                get {
                    XElement x = this.GetElement(XName.Get("phone", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("phone", "http://bus.gov.ru/types/1"), value, "phone", global::bus.gov.ru.types.Item1.phoneStrongType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Ссылка на сайт учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string www {
                get {
                    XElement x = this.GetElement(XName.Get("www", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("www", "http://bus.gov.ru/types/1"), value, "www", wwwLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Филиалы и представительства
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public IList<branchChildType> branch {
                get {
                    if ((this.branchField == null)) {
                        this.branchField = new XTypedList<branchChildType>(this, LinqToXsdTypeManager.Instance, XName.Get("branch", "http://bus.gov.ru/types/1"));
                    }
                    return this.branchField;
                }
                set {
                    if ((value == null)) {
                        this.branchField = null;
                    }
                    else {
                        if ((this.branchField == null)) {
                            this.branchField = XTypedList<branchChildType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("branch", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<branchChildType>(this.branchField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Код главы ГРБС (Первые три символа КБК)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string section {
                get {
                    XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public institutionEnactmentType enactment {
                get {
                    XElement x = this.GetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"));
                    return ((institutionEnactmentType)(x));
                }
                set {
                    this.SetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОКТМО
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public refNsiOktmoType oktmo {
                get {
                    XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                    return ((refNsiOktmoType)(x));
                }
                set {
                    this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("additional", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<additionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("institutionType", "http://bus.gov.ru/types/1"), typeof(refNsiInstitutionTypeType));
                localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(ppoLocalType));
                localElementDictionary.Add(XName.Get("phone", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("www", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(branchChildType));
                localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("enactment", "http://bus.gov.ru/types/1"), typeof(institutionEnactmentType));
                localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code, name?, oktmo?)
            /// </para>
            /// </summary>
            public partial class ppoLocalType : global::bus.gov.ru.types.Item1.refNsiPpoType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ppoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ppoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (code, name?, oktmo?)
                /// </para>
                /// </summary>
                public ppoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ОКТМО
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code, name?, oktmo?)
                /// </para>
                /// </summary>
                public refNsiOktmoType oktmo {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                        return ((refNsiOktmoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ppo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ppoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            private class wwwLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private wwwLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (chief?, founder*)
        /// </para>
        /// </summary>
        public partial class otherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLocalType> founderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("chief", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public otherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Руководитель
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public employeeType chief {
                get {
                    XElement x = this.GetElement(XName.Get("chief", "http://bus.gov.ru/types/1"));
                    return ((employeeType)(x));
                }
                set {
                    this.SetElement(XName.Get("chief", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.ofcRegistrationInfoType.otherLocalType.founderLocalType> founder {
                get {
                    if ((this.founderField == null)) {
                        this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                    }
                    return this.founderField;
                }
                set {
                    if ((value == null)) {
                        this.founderField = null;
                    }
                    else {
                        if ((this.founderField == null)) {
                            this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLocalType>(this.founderField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("other", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("chief", "http://bus.gov.ru/types/1"), typeof(employeeType));
                localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum?, fullName, authorities?)
            /// </para>
            /// </summary>
            public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiOgsSoftType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static founderLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Полномочия учредителя
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderAuthoritiesType authorities {
                    get {
                        XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                        return ((founderAuthoritiesType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founder", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Информация о пользователе
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, user, organization)
    /// </para>
    /// </summary>
    public partial class ofcUserType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ofcUserType(XElement xe) { return XTypedServices.ToXTypedElement<ofcUserType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ofcUserType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("user", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("organization", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Информация о пользователе
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, user, organization)
        /// </para>
        /// </summary>
        public ofcUserType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор позиции в информационном пакете
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, user, organization)
        /// </para>
        /// </summary>
        public string positionId {
            get {
                XElement x = this.GetElement(XName.Get("positionId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("positionId", "http://bus.gov.ru/types/1"), value, "positionId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата и время изменения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, user, organization)
        /// </para>
        /// </summary>
        public System.DateTime changeDate {
            get {
                XElement x = this.GetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Пользователь
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, user, organization)
        /// </para>
        /// </summary>
        public userLocalType user {
            get {
                XElement x = this.GetElement(XName.Get("user", "http://bus.gov.ru/types/1"));
                return ((userLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("user", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Организация пользователя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, user, organization)
        /// </para>
        /// </summary>
        public organizationLocalType organization {
            get {
                XElement x = this.GetElement(XName.Get("organization", "http://bus.gov.ru/types/1"));
                return ((organizationLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("organization", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ofcUserType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ofcUserType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("user", "http://bus.gov.ru/types/1"), typeof(userLocalType));
            localElementDictionary.Add(XName.Get("organization", "http://bus.gov.ru/types/1"), typeof(organizationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (lastName, firstName, middleName?, privilege, role)
        /// </para>
        /// </summary>
        public partial class userLocalType : global::bus.gov.ru.types.Item1.personType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator userLocalType(XElement xe) { return XTypedServices.ToXTypedElement<userLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static userLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("lastName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("firstName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("middleName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("privilege", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("role", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (lastName, firstName, middleName?, privilege, role)
            /// </para>
            /// </summary>
            public userLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Права пользователя
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (lastName, firstName, middleName?, privilege, role)
            /// </para>
            /// </summary>
            public privilegeLocalType privilege {
                get {
                    XElement x = this.GetElement(XName.Get("privilege", "http://bus.gov.ru/types/1"));
                    return ((privilegeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("privilege", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Роль пользователя 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (lastName, firstName, middleName?, privilege, role)
            /// </para>
            /// </summary>
            public roleLocalType role {
                get {
                    XElement x = this.GetElement(XName.Get("role", "http://bus.gov.ru/types/1"));
                    return ((roleLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("role", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("user", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<userLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("lastName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("firstName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("middleName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("privilege", "http://bus.gov.ru/types/1"), typeof(privilegeLocalType));
                localElementDictionary.Add(XName.Get("role", "http://bus.gov.ru/types/1"), typeof(roleLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
            /// </para>
            /// </summary>
            public partial class privilegeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator privilegeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<privilegeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static privilegeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("privilegeAction", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("privilageOfc", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("blockStatusAdmin", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("blockStatusOperator", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
                /// </para>
                /// </summary>
                public privilegeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Права по формированию сведений
                ///Допустимые значения:
                ///	AGINF – Общая информация об учреждении.
                ///
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
                /// </para>
                /// </summary>
                public string privilegeAction {
                    get {
                        XElement x = this.GetElement(XName.Get("privilegeAction", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("privilegeAction", "http://bus.gov.ru/types/1"), value, "privilegeAction", privilegeActionLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Право формировать сведения в офлайн-клиенте
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
                /// </para>
                /// </summary>
                public bool privilageOfc {
                    get {
                        XElement x = this.GetElement(XName.Get("privilageOfc", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("privilageOfc", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Признак блокировки пользователя администратором организации
                ///Допустимые значения:
                ///	B - Пользователь заблокирован;
                ///	U – Пользователь разблокирован.
                ///
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
                /// </para>
                /// </summary>
                public string blockStatusAdmin {
                    get {
                        XElement x = this.GetElement(XName.Get("blockStatusAdmin", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("blockStatusAdmin", "http://bus.gov.ru/types/1"), value, "blockStatusAdmin", blockStatusAdminLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Признак блокировки пользователя оператором сайта
                ///Допустимые значения:
                ///	1 - Пользователь заблокирован;
                ///	0 – Пользователь разблокирован.
                ///
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (privilegeAction, privilageOfc, blockStatusAdmin?, blockStatusOperator?)
                /// </para>
                /// </summary>
                public System.Nullable<int> blockStatusOperator {
                    get {
                        XElement x = this.GetElement(XName.Get("blockStatusOperator", "http://bus.gov.ru/types/1"));
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("blockStatusOperator", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("privilege", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<privilegeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("privilegeAction", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("privilageOfc", "http://bus.gov.ru/types/1"), typeof(bool));
                    localElementDictionary.Add(XName.Get("blockStatusAdmin", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("blockStatusOperator", "http://bus.gov.ru/types/1"), typeof(int));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class privilegeActionLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 200, null, null, 1, new string[] {
                                    "AGINF"}, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private privilegeActionLocalType() {
                    }
                }
                
                private class blockStatusAdminLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(9)), null, 0, 1, null, null, 0, null, null, 0, new string[] {
                                    "U",
                                    "B"}, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private blockStatusAdminLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ofcRole)
            /// </para>
            /// </summary>
            public partial class roleLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator roleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<roleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static roleLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ofcRole", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (ofcRole)
                /// </para>
                /// </summary>
                public roleLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Роль пользователя в офлайн-клиенте
                ///Допустимые значения:
                ///	S – специалист.
                ///
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ofcRole)
                /// </para>
                /// </summary>
                public string ofcRole {
                    get {
                        XElement x = this.GetElement(XName.Get("ofcRole", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("ofcRole", "http://bus.gov.ru/types/1"), value, "ofcRole", ofcRoleLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("role", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<roleLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("ofcRole", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class ofcRoleLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(9)), null, 0, 1, null, null, 0, null, null, 0, new string[] {
                                    "S"}, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private ofcRoleLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
        /// </para>
        /// </summary>
        public partial class organizationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator organizationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<organizationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static organizationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("subInstitutions", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
            /// </para>
            /// </summary>
            public organizationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в перечне ГМУ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
            /// </para>
            /// </summary>
            public string regNum {
                get {
                    XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Учреждения, для которых организация является представителем 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?, subInstitutions?)
            /// </para>
            /// </summary>
            public subInstitutionsLocalType subInstitutions {
                get {
                    XElement x = this.GetElement(XName.Get("subInstitutions", "http://bus.gov.ru/types/1"));
                    return ((subInstitutionsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("subInstitutions", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("organization", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<organizationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("subInstitutions", "http://bus.gov.ru/types/1"), typeof(subInstitutionsLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum, fullName, shortName?)
            /// </para>
            /// </summary>
            public partial class subInstitutionsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator subInstitutionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<subInstitutionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static subInstitutionsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("shortName", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum, fullName, shortName?)
                /// </para>
                /// </summary>
                public subInstitutionsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Реестровый номер в перечне ГМУ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (regNum, fullName, shortName?)
                /// </para>
                /// </summary>
                public string regNum {
                    get {
                        XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Полное наименование
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (regNum, fullName, shortName?)
                /// </para>
                /// </summary>
                public string fullName {
                    get {
                        XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Сокращенное наименование 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum, fullName, shortName?)
                /// </para>
                /// </summary>
                public string shortName {
                    get {
                        XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("subInstitutions", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<subInstitutionsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class fullNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private fullNameLocalType() {
                    }
                }
                
                private class shortNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private shortNameLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// ПГМУ для офлайн-клиента 
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
    /// </para>
    /// </summary>
    public partial class ofcOgsType : global::bus.gov.ru.types.Item1.nsiOgsPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ofcOgsType(XElement xe) { return XTypedServices.ToXTypedElement<ofcOgsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ofcOgsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("startDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("endDateActive", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("businessStatus", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("annulment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("additional", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("other", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// ПГМУ для офлайн-клиента 
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public ofcOgsType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Организация, являющаяся представителем учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType authorizedOrg {
            get {
                XElement x = this.GetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"));
                return ((refNsiOgsStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дополнительные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public additionalLocalType additional {
            get {
                XElement x = this.GetElement(XName.Get("additional", "http://bus.gov.ru/types/1"));
                return ((additionalLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("additional", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Остальные реквизиты учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public otherLocalType other {
            get {
                XElement x = this.GetElement(XName.Get("other", "http://bus.gov.ru/types/1"));
                return ((otherLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("other", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип регистрации учреждения на сайте ГМУ
        ///
        ///Допустимые значения:
        /// S - зарегистрировано самостоятельно;
        /// F - зарегистрировано организацией, являющейся представителем учреждения.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, startDateActive, endDateActive?, businessStatus, annulment, regNum, authorizedOrg?, main?, additional?, other?, gmuRegistrationType?)
        /// </para>
        /// </summary>
        public string gmuRegistrationType {
            get {
                XElement x = this.GetElement(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), value, "gmuRegistrationType", global::bus.gov.ru.types.Item1.gmuRegistrationTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ofcOgsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ofcOgsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("startDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("endDateActive", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("businessStatus", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("annulment", "http://bus.gov.ru/types/1"), typeof(bool));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("authorizedOrg", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("additional", "http://bus.gov.ru/types/1"), typeof(additionalLocalType));
            localElementDictionary.Add(XName.Get("other", "http://bus.gov.ru/types/1"), typeof(otherLocalType));
            localElementDictionary.Add(XName.Get("gmuRegistrationType", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<institutionBudgetStrongType> budgetField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<requisiteType> paymentRequisiteField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в СПЗ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumSpz {
                get {
                    XElement x = this.GetElement(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), value, "regNumSpz", global::bus.gov.ru.types.Item1.spzCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в ПУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumPubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), value, "regNumPubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в РУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumRubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), value, "regNumRubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реестровый номер в НУБП
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string regNumNubp {
                get {
                    XElement x = this.GetElement(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), value, "regNumNubp", global::bus.gov.ru.types.Item1.ubpCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сокращенное наименование 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string shortName {
                get {
                    XElement x = this.GetElement(XName.Get("shortName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("shortName", "http://bus.gov.ru/types/1"), value, "shortName", shortNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ИНН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string inn {
                get {
                    XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КПП
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string kpp {
                get {
                    XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОГРН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string ogrn {
                get {
                    XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType rbs {
                get {
                    XElement x = this.GetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("rbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Главный распорядитель бюджетных средств
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType grbs {
                get {
                    XElement x = this.GetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("grbs", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
            /// 02 - орган управления государственным внебюджетным фондом;
            /// 03 - бюджетное учреждение;
            /// 04 - организация с долей государственного участия;
            /// 05 - унитарное предприятие;
            /// 06 - субъект естественных монополий;
            /// 07 - иная организация (Используется для учета негосударственных организаций);
            /// 08 -  казенное учреждение;
            /// 09 - государственная корпорация, государственная компания;
            /// 10 - автономное учреждение;
            /// 11 - организация, осуществляющая регулируемые виды деятельности;
            /// 12 - хозяйственное общество, в уставном капитале которого доля участия Российской Федерации, субъекта Российской Федерации, муниципального образования в совокупности превышает 50 процентов;
            /// 13 - дочернее хозяйственное общество;
            /// 14 - специализированная организация;
            /// 15 - оператор официального сайта;
            /// 16 - оператор электронной площадки.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.ogsOrgTypeType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ТОФК клиента
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiTofkType tofk {
                get {
                    XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                    return ((refNsiTofkType)(x));
                }
                set {
                    this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Специальные указания
            ///
            ///Допустимые значения:
            /// 04 - организации не предоставляются субсидии;
            /// 05 - организации предоставляются субсидии.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public string special {
                get {
                    XElement x = this.GetElement(XName.Get("special", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("special", "http://bus.gov.ru/types/1"), value, "special", global::bus.gov.ru.types.Item1.ogsSpecialType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Финансовый орган
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsStrongType financial {
                get {
                    XElement x = this.GetElement(XName.Get("financial", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("financial", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на ООС
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsOosType credentialsOos {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"));
                    return ((credentialsOosType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия учреждения на сайте ГМУ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsGmuType credentialsGmu {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"));
                    return ((credentialsGmuType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Полномочия ФК
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public credentialsFkType credentialsFk {
                get {
                    XElement x = this.GetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"));
                    return ((credentialsFkType)(x));
                }
                set {
                    this.SetElement(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Oрган государственной власти, в ведении которого по ведомственной или организационной принадлежности находится организация, обладающая полномочиями в сфере размещений заказов
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType headAgency {
                get {
                    XElement x = this.GetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType)(x));
                }
                set {
                    this.SetElement(XName.Get("headAgency", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Общероссийские классификаторы
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public institutionClassifierType classifier {
                get {
                    XElement x = this.GetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"));
                    return ((institutionClassifierType)(x));
                }
                set {
                    this.SetElement(XName.Get("classifier", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Бюджет
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public IList<institutionBudgetStrongType> budget {
                get {
                    if ((this.budgetField == null)) {
                        this.budgetField = new XTypedList<institutionBudgetStrongType>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", "http://bus.gov.ru/types/1"));
                    }
                    return this.budgetField;
                }
                set {
                    if ((value == null)) {
                        this.budgetField = null;
                    }
                    else {
                        if ((this.budgetField == null)) {
                            this.budgetField = XTypedList<institutionBudgetStrongType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<institutionBudgetStrongType>(this.budgetField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Фактический адрес
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public addressStrongType address {
                get {
                    XElement x = this.GetElement(XName.Get("address", "http://bus.gov.ru/types/1"));
                    return ((addressStrongType)(x));
                }
                set {
                    this.SetElement(XName.Get("address", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Платежный реквизит
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public IList<requisiteType> paymentRequisite {
                get {
                    if ((this.paymentRequisiteField == null)) {
                        this.paymentRequisiteField = new XTypedList<requisiteType>(this, LinqToXsdTypeManager.Instance, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                    }
                    return this.paymentRequisiteField;
                }
                set {
                    if ((value == null)) {
                        this.paymentRequisiteField = null;
                    }
                    else {
                        if ((this.paymentRequisiteField == null)) {
                            this.paymentRequisiteField = XTypedList<requisiteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<requisiteType>(this.paymentRequisiteField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Является федеральным органом исполнительной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> foiv {
                get {
                    XElement x = this.GetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("foiv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является филиалом
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public bool branch {
                get {
                    XElement x = this.GetElement(XName.Get("branch", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("branch", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата обновления данных организации в ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата и время обновления данных организации из ЕГРЮЛ
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<System.DateTime> egrulBasedUpdateDate {
                get {
                    XElement x = this.GetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElement(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Является органом государственной власти
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((regNumSpz?, regNumPubp?, regNumRubp?, regNumNubp?)?, fullName, shortName?, inn, kpp, ogrn, rbs?, grbs?, orgType, tofk, special?, financial?, credentialsOos, credentialsGmu, credentialsFk, headAgency?, classifier, budget*, address, paymentRequisite*, foiv?, branch, egrulUpdateDate?, egrulBasedUpdateDate?, ogv?)
            /// </para>
            /// </summary>
            public System.Nullable<bool> ogv {
                get {
                    XElement x = this.GetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ogv", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNumSpz", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumPubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumRubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("regNumNubp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("shortName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("grbs", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
                localElementDictionary.Add(XName.Get("special", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("financial", "http://bus.gov.ru/types/1"), typeof(refNsiOgsStrongType));
                localElementDictionary.Add(XName.Get("credentialsOos", "http://bus.gov.ru/types/1"), typeof(credentialsOosType));
                localElementDictionary.Add(XName.Get("credentialsGmu", "http://bus.gov.ru/types/1"), typeof(credentialsGmuType));
                localElementDictionary.Add(XName.Get("credentialsFk", "http://bus.gov.ru/types/1"), typeof(credentialsFkType));
                localElementDictionary.Add(XName.Get("headAgency", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                localElementDictionary.Add(XName.Get("classifier", "http://bus.gov.ru/types/1"), typeof(institutionClassifierType));
                localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(institutionBudgetStrongType));
                localElementDictionary.Add(XName.Get("address", "http://bus.gov.ru/types/1"), typeof(addressStrongType));
                localElementDictionary.Add(XName.Get("paymentRequisite", "http://bus.gov.ru/types/1"), typeof(requisiteType));
                localElementDictionary.Add(XName.Get("foiv", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("egrulUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("egrulBasedUpdateDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                localElementDictionary.Add(XName.Get("ogv", "http://bus.gov.ru/types/1"), typeof(bool));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            private class shortNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private shortNameLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
        /// </para>
        /// </summary>
        public partial class additionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<branchChildType> branchField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator additionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<additionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static additionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("institutionType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("phone", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("www", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("branch", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("section", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("enactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public additionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Вид учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public refNsiInstitutionTypeType institutionType {
                get {
                    XElement x = this.GetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"));
                    return ((refNsiInstitutionTypeType)(x));
                }
                set {
                    this.SetElement(XName.Get("institutionType", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Публично-правовое образование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public ppoLocalType ppo {
                get {
                    XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                    return ((ppoLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Телефон
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string phone {
                get {
                    XElement x = this.GetElement(XName.Get("phone", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("phone", "http://bus.gov.ru/types/1"), value, "phone", global::bus.gov.ru.types.Item1.phoneStrongType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Ссылка на сайт учреждения
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string www {
                get {
                    XElement x = this.GetElement(XName.Get("www", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("www", "http://bus.gov.ru/types/1"), value, "www", wwwLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Филиалы и представительства
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public IList<branchChildType> branch {
                get {
                    if ((this.branchField == null)) {
                        this.branchField = new XTypedList<branchChildType>(this, LinqToXsdTypeManager.Instance, XName.Get("branch", "http://bus.gov.ru/types/1"));
                    }
                    return this.branchField;
                }
                set {
                    if ((value == null)) {
                        this.branchField = null;
                    }
                    else {
                        if ((this.branchField == null)) {
                            this.branchField = XTypedList<branchChildType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("branch", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<branchChildType>(this.branchField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Код главы ГРБС (Первые три символа КБК)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public string section {
                get {
                    XElement x = this.GetElement(XName.Get("section", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("section", "http://bus.gov.ru/types/1"), value, "section", global::bus.gov.ru.types.Item1.sectionType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Реквизиты правового акта органа, осуществляющего функции и полномочия учредителя, о назначении членов наблюдательного совета
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public institutionEnactmentType enactment {
                get {
                    XElement x = this.GetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"));
                    return ((institutionEnactmentType)(x));
                }
                set {
                    this.SetElement(XName.Get("enactment", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// ОКТМО
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (institutionType?, ppo, phone, www?, branch*, section?, enactment?, oktmo)
            /// </para>
            /// </summary>
            public refNsiOktmoType oktmo {
                get {
                    XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                    return ((refNsiOktmoType)(x));
                }
                set {
                    this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("additional", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<additionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("institutionType", "http://bus.gov.ru/types/1"), typeof(refNsiInstitutionTypeType));
                localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(ppoLocalType));
                localElementDictionary.Add(XName.Get("phone", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("www", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("branch", "http://bus.gov.ru/types/1"), typeof(branchChildType));
                localElementDictionary.Add(XName.Get("section", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("enactment", "http://bus.gov.ru/types/1"), typeof(institutionEnactmentType));
                localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code, name?, oktmo?)
            /// </para>
            /// </summary>
            public partial class ppoLocalType : global::bus.gov.ru.types.Item1.refNsiPpoType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ppoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ppoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ppoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("oktmo", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (code, name?, oktmo?)
                /// </para>
                /// </summary>
                public ppoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ОКТМО
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (code, name?, oktmo?)
                /// </para>
                /// </summary>
                public refNsiOktmoType oktmo {
                    get {
                        XElement x = this.GetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"));
                        return ((refNsiOktmoType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("oktmo", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ppo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ppoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("oktmo", "http://bus.gov.ru/types/1"), typeof(refNsiOktmoType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            private class wwwLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private wwwLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (chief?, founder*)
        /// </para>
        /// </summary>
        public partial class otherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLocalType> founderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator otherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static otherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("chief", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public otherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Руководитель
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public employeeType chief {
                get {
                    XElement x = this.GetElement(XName.Get("chief", "http://bus.gov.ru/types/1"));
                    return ((employeeType)(x));
                }
                set {
                    this.SetElement(XName.Get("chief", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредитель
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (chief?, founder*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.ofcOgsType.otherLocalType.founderLocalType> founder {
                get {
                    if ((this.founderField == null)) {
                        this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                    }
                    return this.founderField;
                }
                set {
                    if ((value == null)) {
                        this.founderField = null;
                    }
                    else {
                        if ((this.founderField == null)) {
                            this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLocalType>(this.founderField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("other", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("chief", "http://bus.gov.ru/types/1"), typeof(employeeType));
                localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum?, fullName, authorities?)
            /// </para>
            /// </summary>
            public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiOgsSoftType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static founderLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Полномочия учредителя
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (regNum?, fullName, authorities?)
                /// </para>
                /// </summary>
                public founderAuthoritiesType authorities {
                    get {
                        XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                        return ((founderAuthoritiesType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founder", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете о финансовых результатах деятельности (ф. 0503121) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503121BaseType_2013 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503121BaseType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503121BaseType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503121BaseType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("sectionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeans", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете о финансовых результатах деятельности (ф. 0503121) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public reportItemF0503121BaseType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код по КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string sectionNumber {
            get {
                XElement x = this.GetElement(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), value, "sectionNumber", global::bus.gov.ru.types.Item1.kosguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivity {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), value, "budgetActivity", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeans {
            get {
                XElement x = this.GetElement(XName.Get("availableMeans", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), value, "availableMeans", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503121BaseType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503121BaseType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете о финансовых результатах деятельности (ф. 0503121)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503121BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503121BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503121BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503121BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("sectionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeans", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете о финансовых результатах деятельности (ф. 0503121)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public reportItemF0503121BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код по КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public string sectionNumber {
            get {
                XElement x = this.GetElement(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), value, "sectionNumber", global::bus.gov.ru.types.Item1.kosguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivity {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), value, "budgetActivity", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> incomeActivity {
            get {
                XElement x = this.GetElement(XName.Get("incomeActivity", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("incomeActivity", "http://bus.gov.ru/types/1"), value, "incomeActivity", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeans {
            get {
                XElement x = this.GetElement(XName.Get("availableMeans", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), value, "availableMeans", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503121BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503121BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503121TopLevelType_2013 : global::bus.gov.ru.types.Item1.reportItemF0503121BaseType_2013, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503121BaseType_2013> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503121TopLevelType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503121TopLevelType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503121TopLevelType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("sectionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeans", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        ///  Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503121TopLevelType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, availableMeans?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503121BaseType_2013> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503121BaseType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503121BaseType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503121BaseType_2013>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503121TopLevelType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503121TopLevelType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121BaseType_2013));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503121TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503121BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503121BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503121TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503121TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503121TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("sectionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivity", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeans", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503121)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503121TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, sectionNumber?, budgetActivity?, incomeActivity?, availableMeans?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503121BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503121BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503121BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503121BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503121TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503121TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("sectionNumber", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivity", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeans", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503121BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете об исполнении бюджета (ф. 0503127)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503127BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503127BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503127BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503127BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете об исполнении бюджета (ф. 0503127)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public reportItemF0503127BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код дохода по бюджетной классификации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public string budgetClassificationCode {
            get {
                XElement x = this.GetElement(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), value, "budgetClassificationCode", budgetClassificationCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Утвержденные бюджетные назначения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> approvedBudgetAssignments {
            get {
                XElement x = this.GetElement(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1"), value, "approvedBudgetAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Лимиты бюджетных обязательств
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetObligationLimits {
            get {
                XElement x = this.GetElement(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1"), value, "budgetObligationLimits", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через финансовые органы
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execFinancialAuthorities {
            get {
                XElement x = this.GetElement(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), value, "execFinancialAuthorities", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через банковские счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execBankAccounts {
            get {
                XElement x = this.GetElement(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), value, "execBankAccounts", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через некассовые операции
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execNonCashOperations {
            get {
                XElement x = this.GetElement(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), value, "execNonCashOperations", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execTotal {
            get {
                XElement x = this.GetElement(XName.Get("execTotal", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execTotal", "http://bus.gov.ru/types/1"), value, "execTotal", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Неисполненные назначения (по ассигнованиям)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> unexecAssignments {
            get {
                XElement x = this.GetElement(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), value, "unexecAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Неисполненные назначения по лимитам бюджетных обязательств
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> unexecBudgetObligationLimit {
            get {
                XElement x = this.GetElement(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1"), value, "unexecBudgetObligationLimit", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503127BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503127BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class budgetClassificationCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private budgetClassificationCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503127TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503127BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503127BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503127TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503127TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503127TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете об исполнении бюджета (ф. 0503127)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503127TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedBudgetAssignments?, budgetObligationLimits?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, unexecBudgetObligationLimit?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503127BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503127BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503127BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503127BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503127TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503127TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedBudgetAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetObligationLimits", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecBudgetObligationLimit", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503127BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в балансе (ф. 0503130) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130BaseType_2013 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130BaseType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130BaseType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130BaseType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в балансе (ф. 0503130) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public reportItemF0503130BaseType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Название актива или пассива
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivityBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), value, "budgetActivityBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность на конец отчетного периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivityEndYear {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), value, "budgetActivityEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeansBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), value, "availableMeansBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на конец отчетного периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeansEndYear {
            get {
                XElement x = this.GetElement(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), value, "availableMeansEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), value, "totalBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец отчетного периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130BaseType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130BaseType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в балансе (ф. 0503130)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в балансе (ф. 0503130)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public reportItemF0503130BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Название актива или пассива
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivityBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), value, "budgetActivityBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджетная деятельность на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> budgetActivityEndYear {
            get {
                XElement x = this.GetElement(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), value, "budgetActivityEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> incomeActivityBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1"), value, "incomeActivityBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> incomeActivityEndYear {
            get {
                XElement x = this.GetElement(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1"), value, "incomeActivityEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeansBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), value, "availableMeansBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> availableMeansEndYear {
            get {
                XElement x = this.GetElement(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), value, "availableMeansEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), value, "totalBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в справке баланса (ф. 0503130) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130BaseReferenceType_2013 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130BaseReferenceType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130BaseReferenceType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130BaseReferenceType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в справке баланса (ф. 0503130) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public reportItemF0503130BaseReferenceType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование забалансового счета, показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), value, "totalBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец отчетного периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130BaseReferenceType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130BaseReferenceType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в справке баланса (ф. 0503130) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130TopLevelReferenceType_2013 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503130BaseReferenceType_2013> reportSubItemReferField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130TopLevelReferenceType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130TopLevelReferenceType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130TopLevelReferenceType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItemRefer", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в справке баланса (ф. 0503130) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public reportItemF0503130TopLevelReferenceType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование забалансового счета, показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalBeginYear {
            get {
                XElement x = this.GetElement(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), value, "totalBeginYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец отчетного периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, totalBeginYear?, totalEndYear?, reportSubItemRefer*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503130BaseReferenceType_2013> reportSubItemRefer {
            get {
                if ((this.reportSubItemReferField == null)) {
                    this.reportSubItemReferField = new XTypedList<reportItemF0503130BaseReferenceType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItemRefer", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemReferField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemReferField = null;
                }
                else {
                    if ((this.reportSubItemReferField == null)) {
                        this.reportSubItemReferField = XTypedList<reportItemF0503130BaseReferenceType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItemRefer", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503130BaseReferenceType_2013>(this.reportSubItemReferField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130TopLevelReferenceType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130TopLevelReferenceType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItemRefer", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130BaseReferenceType_2013));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в справке баланса (ф. 0503130)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*, accountNumber)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130TopLevelReferenceType : global::bus.gov.ru.types.Item1.reportItemF0503130TopLevelType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130TopLevelReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130TopLevelReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130TopLevelReferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accountNumber", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в справке баланса (ф. 0503130)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public reportItemF0503130TopLevelReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Номер забалансового счета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public string accountNumber {
            get {
                XElement x = this.GetElement(XName.Get("accountNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), value, "accountNumber", accountNumberLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130TopLevelReferenceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130TopLevelReferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130BaseType));
            localElementDictionary.Add(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class accountNumberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{2}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private accountNumberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе (ф. 0503130) за период начиная с 2013 года включительно
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130TopLevelType_2013 : global::bus.gov.ru.types.Item1.reportItemF0503130BaseType_2013, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503130BaseType_2013> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130TopLevelType_2013(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130TopLevelType_2013>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130TopLevelType_2013() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе (ф. 0503130) за период начиная с 2013 года включительно
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503130TopLevelType_2013() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503130BaseType_2013> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503130BaseType_2013>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503130BaseType_2013>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503130BaseType_2013>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130TopLevelType_2013", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130TopLevelType_2013>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130BaseType_2013));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе (ф. 0503130)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503130TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503130BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503130BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503130TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503130TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503130TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе (ф. 0503130)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503130TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetActivityBeginYear?, budgetActivityEndYear?, incomeActivityBeginYear?, incomeActivityEndYear?, availableMeansBeginYear?, availableMeansEndYear?, totalBeginYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503130BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503130BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503130BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503130BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503130TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503130TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("budgetActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("incomeActivityEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("availableMeansEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalBeginYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503130BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503137BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503137BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503137BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503137BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public reportItemF0503137BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код дохода по бюджетной классификации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public string budgetClassificationCode {
            get {
                XElement x = this.GetElement(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), value, "budgetClassificationCode", budgetClassificationCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Утвержденные сметные назначения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> approvedEstimateAssignments {
            get {
                XElement x = this.GetElement(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1"), value, "approvedEstimateAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через финансовые органы
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execFinancialAuthorities {
            get {
                XElement x = this.GetElement(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), value, "execFinancialAuthorities", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через банковские счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execBankAccounts {
            get {
                XElement x = this.GetElement(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), value, "execBankAccounts", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через некассовые операции
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execNonCashOperations {
            get {
                XElement x = this.GetElement(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), value, "execNonCashOperations", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execTotal {
            get {
                XElement x = this.GetElement(XName.Get("execTotal", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execTotal", "http://bus.gov.ru/types/1"), value, "execTotal", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Неисполненные назначения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> unexecAssignments {
            get {
                XElement x = this.GetElement(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), value, "unexecAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503137BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503137BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class budgetClassificationCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private budgetClassificationCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503137TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503137BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503137BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503137TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503137TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503137TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете об исполнении смет доходов и расходов по приносящей доход деятельности главного распорядителя, получателя бюджетных средств (ф. 0503137)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503137TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, budgetClassificationCode?, approvedEstimateAssignments?, execFinancialAuthorities?, execBankAccounts?, execNonCashOperations?, execTotal?, unexecAssignments?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503137BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503137BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503137BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503137BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503137TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503137TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budgetClassificationCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedEstimateAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execFinancialAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503137BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете о финансовых результатах деятельности (ф. 0503721)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503721BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503721BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503721BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503721BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("services", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете о финансовых результатах деятельности (ф. 0503721)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public reportItemF0503721BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код аналитики
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public string analyticCode {
            get {
                XElement x = this.GetElement(XName.Get("analyticCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), value, "analyticCode", analyticCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFunds {
            get {
                XElement x = this.GetElement(XName.Get("targetFunds", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), value, "targetFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по оказанию услуг (работ)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> services {
            get {
                XElement x = this.GetElement(XName.Get("services", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("services", "http://bus.gov.ru/types/1"), value, "services", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> temporaryFunds {
            get {
                XElement x = this.GetElement(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1"), value, "temporaryFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503721BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503721BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("services", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class analyticCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}|[X|x]"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private analyticCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете о финансовых результатах деятельности (ф. 0503721)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503721BaseType2015 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503721BaseType2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503721BaseType2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503721BaseType2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете о финансовых результатах деятельности (ф. 0503721)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public reportItemF0503721BaseType2015() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код аналитики
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public string analyticCode {
            get {
                XElement x = this.GetElement(XName.Get("analyticCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), value, "analyticCode", analyticCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFunds {
            get {
                XElement x = this.GetElement(XName.Get("targetFunds", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), value, "targetFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по государственному заданию
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> stateTaskFunds {
            get {
                XElement x = this.GetElement(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1"), value, "stateTaskFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> revenueFunds {
            get {
                XElement x = this.GetElement(XName.Get("revenueFunds", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("revenueFunds", "http://bus.gov.ru/types/1"), value, "revenueFunds", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503721BaseType2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503721BaseType2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class analyticCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}|[X|x]"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private analyticCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503721TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503721BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503721BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503721TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503721TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503721TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("services", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503721TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, services?, temporaryFunds?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503721BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503721BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503721BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503721BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503721TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503721TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("services", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503721TopLevelType2015 : global::bus.gov.ru.types.Item1.reportItemF0503721BaseType2015, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503721BaseType2015> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503721TopLevelType2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503721TopLevelType2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503721TopLevelType2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFunds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете о финансовых результатах деятельности (ф. 0503721)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503721TopLevelType2015() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, analyticCode?, targetFunds?, stateTaskFunds?, revenueFunds?, total?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503721BaseType2015> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503721BaseType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503721BaseType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503721BaseType2015>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503721TopLevelType2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503721TopLevelType2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFunds", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503721BaseType2015));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public reportItemF0503730BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Название актива или пассива
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFundsStartYear {
            get {
                XElement x = this.GetElement(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), value, "targetFundsStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFundsEndYear {
            get {
                XElement x = this.GetElement(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), value, "targetFundsEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по оказанию услуг (работ) на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> servicesStartYear {
            get {
                XElement x = this.GetElement(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1"), value, "servicesStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по оказанию услуг (работ) на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> servicesEndYear {
            get {
                XElement x = this.GetElement(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1"), value, "servicesEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> temporaryFundsStartYear {
            get {
                XElement x = this.GetElement(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1"), value, "temporaryFundsStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства во временном распоряжении на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> temporaryFundsEndYear {
            get {
                XElement x = this.GetElement(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1"), value, "temporaryFundsEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalStartYear {
            get {
                XElement x = this.GetElement(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), value, "totalStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730BaseType2015 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730BaseType2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730BaseType2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730BaseType2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public reportItemF0503730BaseType2015() {
        }
        
        /// <summary>
        /// <para>
        /// Название актива или пассива
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFundsStartYear {
            get {
                XElement x = this.GetElement(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), value, "targetFundsStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность с целевыми средствами на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> targetFundsEndYear {
            get {
                XElement x = this.GetElement(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), value, "targetFundsEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по государственному заданию на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> stateTaskFundsStartYear {
            get {
                XElement x = this.GetElement(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1"), value, "stateTaskFundsStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Деятельность по государственному заданию на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> stateTaskFundsEndYear {
            get {
                XElement x = this.GetElement(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1"), value, "stateTaskFundsEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> revenueFundsStartYear {
            get {
                XElement x = this.GetElement(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1"), value, "revenueFundsStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Приносящая доход деятельность на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> revenueFundsEndYear {
            get {
                XElement x = this.GetElement(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1"), value, "revenueFundsEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на начало года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalStartYear {
            get {
                XElement x = this.GetElement(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), value, "totalStartYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Итого на конец года
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> totalEndYear {
            get {
                XElement x = this.GetElement(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), value, "totalEndYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730BaseType2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730BaseType2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730TopLevelReferenceType : global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730TopLevelReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730TopLevelReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730TopLevelReferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accountNumber", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public reportItemF0503730TopLevelReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Номер забалансового счета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public string accountNumber {
            get {
                XElement x = this.GetElement(XName.Get("accountNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), value, "accountNumber", accountNumberLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730TopLevelReferenceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730TopLevelReferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730BaseType));
            localElementDictionary.Add(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class accountNumberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{2}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private accountNumberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730TopLevelReferenceType_2015 : global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelType_2015, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730TopLevelReferenceType_2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730TopLevelReferenceType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730TopLevelReferenceType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("accountNumber", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public reportItemF0503730TopLevelReferenceType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Номер забалансового счета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*, accountNumber)
        /// </para>
        /// </summary>
        public string accountNumber {
            get {
                XElement x = this.GetElement(XName.Get("accountNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), value, "accountNumber", accountNumberLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730TopLevelReferenceType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730TopLevelReferenceType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730BaseType2015));
            localElementDictionary.Add(XName.Get("accountNumber", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class accountNumberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{2}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private accountNumberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503730BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503730BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503730TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, servicesStartYear?, servicesEndYear?, temporaryFundsStartYear?, temporaryFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503730BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503730BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503730BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503730BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("servicesEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("temporaryFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503730TopLevelType_2015 : global::bus.gov.ru.types.Item1.reportItemF0503730BaseType2015, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503730BaseType2015> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503730TopLevelType_2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503730TopLevelType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503730TopLevelType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalStartYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalEndYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в балансе государственного (муниципального) учреждения (ф. 0503730)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503730TopLevelType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, targetFundsStartYear?, targetFundsEndYear?, stateTaskFundsStartYear?, stateTaskFundsEndYear?, revenueFundsStartYear?, revenueFundsEndYear?, totalStartYear?, totalEndYear?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503730BaseType2015> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503730BaseType2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503730BaseType2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503730BaseType2015>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503730TopLevelType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503730TopLevelType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("targetFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("targetFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("stateTaskFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("revenueFundsEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalStartYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalEndYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503730BaseType2015));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503737BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503737BaseType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503737BaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503737BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execCashAgency", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public reportItemF0503737BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код аналитики
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public string analyticCode {
            get {
                XElement x = this.GetElement(XName.Get("analyticCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), value, "analyticCode", analyticCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Утверждено плановых назначений
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> approvedPlanAssignments {
            get {
                XElement x = this.GetElement(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1"), value, "approvedPlanAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через лицевые счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execPersonalAuthorities {
            get {
                XElement x = this.GetElement(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1"), value, "execPersonalAuthorities", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через банковские счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execBankAccounts {
            get {
                XElement x = this.GetElement(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), value, "execBankAccounts", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через некассовые операции
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execNonCashOperations {
            get {
                XElement x = this.GetElement(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), value, "execNonCashOperations", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено через через кассу учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execCashAgency {
            get {
                XElement x = this.GetElement(XName.Get("execCashAgency", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execCashAgency", "http://bus.gov.ru/types/1"), value, "execCashAgency", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Исполнено итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> execTotal {
            get {
                XElement x = this.GetElement(XName.Get("execTotal", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("execTotal", "http://bus.gov.ru/types/1"), value, "execTotal", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Не исполнено плановых назначений
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> unexecPlanAssignments {
            get {
                XElement x = this.GetElement(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1"), value, "unexecPlanAssignments", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503737BaseType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503737BaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execCashAgency", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class analyticCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private analyticCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
    /// </para>
    /// </summary>
    public partial class reportItemF0503737BaseReturnExpenseType_2015 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503737BaseReturnExpenseType_2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503737BaseReturnExpenseType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503737BaseReturnExpenseType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnTotal", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public reportItemF0503737BaseReturnExpenseType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код аналитики
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public string analyticCode {
            get {
                XElement x = this.GetElement(XName.Get("analyticCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), value, "analyticCode", analyticCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Произведено возвратов через лицевые счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> returnPersonalAuthorities {
            get {
                XElement x = this.GetElement(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1"), value, "returnPersonalAuthorities", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Произведено возвратов через банковские счета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> returnBankAccounts {
            get {
                XElement x = this.GetElement(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1"), value, "returnBankAccounts", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Произведено возвратов некассовыми операциями
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> returnNonCashOperations {
            get {
                XElement x = this.GetElement(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1"), value, "returnNonCashOperations", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Произведено возвратов через кассу учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> returnCashAgency {
            get {
                XElement x = this.GetElement(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1"), value, "returnCashAgency", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        ///  итого
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> returnTotal {
            get {
                XElement x = this.GetElement(XName.Get("returnTotal", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("returnTotal", "http://bus.gov.ru/types/1"), value, "returnTotal", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503737BaseReturnExpenseType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503737BaseReturnExpenseType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}(\\.\\d{1,2})?"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class analyticCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private analyticCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503737TopLevelType : global::bus.gov.ru.types.Item1.reportItemF0503737BaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503737BaseType> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503737TopLevelType(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503737TopLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503737TopLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execCashAgency", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("execTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503737TopLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, approvedPlanAssignments?, execPersonalAuthorities?, execBankAccounts?, execNonCashOperations?, execCashAgency?, execTotal?, unexecPlanAssignments?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503737BaseType> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503737BaseType>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503737BaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503737BaseType>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503737TopLevelType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503737TopLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approvedPlanAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execPersonalAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execCashAgency", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("execTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("unexecPlanAssignments", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737BaseType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?, reportSubItem*)
    /// </para>
    /// </summary>
    public partial class reportItemF0503737TopLevelReturnExpenseType_2015 : global::bus.gov.ru.types.Item1.reportItemF0503737BaseReturnExpenseType_2015, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportItemF0503737BaseReturnExpenseType_2015> reportSubItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator reportItemF0503737TopLevelReturnExpenseType_2015(XElement xe) { return XTypedServices.ToXTypedElement<reportItemF0503737TopLevelReturnExpenseType_2015>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reportItemF0503737TopLevelReturnExpenseType_2015() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("analyticCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("returnTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportSubItem", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Запись верхнего уровня в отчете об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?, reportSubItem*)
        /// </para>
        /// </summary>
        public reportItemF0503737TopLevelReturnExpenseType_2015() {
        }
        
        /// <summary>
        /// <para>
        /// Детализация записи верхнего уровня
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, analyticCode?, returnPersonalAuthorities?, returnBankAccounts?, returnNonCashOperations?, returnCashAgency?, returnTotal?, reportSubItem*)
        /// </para>
        /// </summary>
        public IList<reportItemF0503737BaseReturnExpenseType_2015> reportSubItem {
            get {
                if ((this.reportSubItemField == null)) {
                    this.reportSubItemField = new XTypedList<reportItemF0503737BaseReturnExpenseType_2015>(this, LinqToXsdTypeManager.Instance, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                }
                return this.reportSubItemField;
            }
            set {
                if ((value == null)) {
                    this.reportSubItemField = null;
                }
                else {
                    if ((this.reportSubItemField == null)) {
                        this.reportSubItemField = XTypedList<reportItemF0503737BaseReturnExpenseType_2015>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reportSubItem", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportItemF0503737BaseReturnExpenseType_2015>(this.reportSubItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportItemF0503737TopLevelReturnExpenseType_2015", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportItemF0503737TopLevelReturnExpenseType_2015>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("analyticCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("returnPersonalAuthorities", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnBankAccounts", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnNonCashOperations", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnCashAgency", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("returnTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("reportSubItem", "http://bus.gov.ru/types/1"), typeof(reportItemF0503737BaseReturnExpenseType_2015));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестр размещенных сведений
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
    /// </para>
    /// </summary>
    public partial class regPublishedInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator regPublishedInfoType(XElement xe) { return XTypedServices.ToXTypedElement<regPublishedInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static regPublishedInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("main", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("publishedInfos", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Реестр размещенных сведений
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public regPublishedInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Идентификатор позиции в информационном пакете
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public string positionId {
            get {
                XElement x = this.GetElement(XName.Get("positionId", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("positionId", "http://bus.gov.ru/types/1"), value, "positionId", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата и время изменения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public System.DateTime changeDate {
            get {
                XElement x = this.GetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(XName.Get("changeDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.regNumConsRegType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основные реквизиты учреждения 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public mainLocalType main {
            get {
                XElement x = this.GetElement(XName.Get("main", "http://bus.gov.ru/types/1"));
                return ((mainLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("main", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Размещенные сведения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, regNum, main, publishedInfos)
        /// </para>
        /// </summary>
        public publishedInfosLocalType publishedInfos {
            get {
                XElement x = this.GetElement(XName.Get("publishedInfos", "http://bus.gov.ru/types/1"));
                return ((publishedInfosLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("publishedInfos", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("regPublishedInfoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<regPublishedInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("main", "http://bus.gov.ru/types/1"), typeof(mainLocalType));
            localElementDictionary.Add(XName.Get("publishedInfos", "http://bus.gov.ru/types/1"), typeof(publishedInfosLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
        /// </para>
        /// </summary>
        public partial class mainLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator mainLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mainLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static mainLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("orgType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budgets", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("founders", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public mainLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Полное наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public string fullName {
                get {
                    XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// ИНН
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public string inn {
                get {
                    XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// КПП
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public string kpp {
                get {
                    XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Тип организации
            ///
            ///Допустимые значения:
            /// 03 - бюджетное учреждение;
            /// 10 - автономное учреждение.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public string orgType {
                get {
                    XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.regPublishedOrgType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Бюджеты
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public budgetsLocalType budgets {
                get {
                    XElement x = this.GetElement(XName.Get("budgets", "http://bus.gov.ru/types/1"));
                    return ((budgetsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("budgets", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Учредители
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (fullName, inn, kpp, orgType, budgets?, founders?)
            /// </para>
            /// </summary>
            public foundersLocalType founders {
                get {
                    XElement x = this.GetElement(XName.Get("founders", "http://bus.gov.ru/types/1"));
                    return ((foundersLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("founders", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("main", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mainLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("budgets", "http://bus.gov.ru/types/1"), typeof(budgetsLocalType));
                localElementDictionary.Add(XName.Get("founders", "http://bus.gov.ru/types/1"), typeof(foundersLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class fullNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private fullNameLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (budget+)
            /// </para>
            /// </summary>
            public partial class budgetsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<institutionBudgetStrongType> budgetField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator budgetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<budgetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static budgetsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (budget+)
                /// </para>
                /// </summary>
                public budgetsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Бюджет
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (budget+)
                /// </para>
                /// </summary>
                public IList<institutionBudgetStrongType> budget {
                    get {
                        if ((this.budgetField == null)) {
                            this.budgetField = new XTypedList<institutionBudgetStrongType>(this, LinqToXsdTypeManager.Instance, XName.Get("budget", "http://bus.gov.ru/types/1"));
                        }
                        return this.budgetField;
                    }
                    set {
                        if ((value == null)) {
                            this.budgetField = null;
                        }
                        else {
                            if ((this.budgetField == null)) {
                                this.budgetField = XTypedList<institutionBudgetStrongType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("budget", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<institutionBudgetStrongType>(this.budgetField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("budgets", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<budgetsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(institutionBudgetStrongType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (founder+)
            /// </para>
            /// </summary>
            public partial class foundersLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<founderLocalType> founderField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator foundersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<foundersLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static foundersLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("founder", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (founder+)
                /// </para>
                /// </summary>
                public foundersLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Учредитель
                /// </para>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (founder+)
                /// </para>
                /// </summary>
                public IList<bus.gov.ru.types.Item1.regPublishedInfoType.mainLocalType.foundersLocalType.founderLocalType> founder {
                    get {
                        if ((this.founderField == null)) {
                            this.founderField = new XTypedList<founderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("founder", "http://bus.gov.ru/types/1"));
                        }
                        return this.founderField;
                    }
                    set {
                        if ((value == null)) {
                            this.founderField = null;
                        }
                        else {
                            if ((this.founderField == null)) {
                                this.founderField = XTypedList<founderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("founder", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<founderLocalType>(this.founderField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("founders", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<foundersLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("founder", "http://bus.gov.ru/types/1"), typeof(founderLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum?, fullName, INN, KPP, authorities?)
                /// </para>
                /// </summary>
                public partial class founderLocalType : global::bus.gov.ru.types.Item1.refNsiConsRegSoftType, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator founderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<founderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static founderLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("INN", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("KPP", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authorities", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (regNum?, fullName, INN, KPP, authorities?)
                    /// </para>
                    /// </summary>
                    public founderLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// ИНН учредителя 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (regNum?, fullName, INN, KPP, authorities?)
                    /// </para>
                    /// </summary>
                    public string INN {
                        get {
                            XElement x = this.GetElement(XName.Get("INN", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("INN", "http://bus.gov.ru/types/1"), value, "INN", INNLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// КПП учредителя 
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (regNum?, fullName, INN, KPP, authorities?)
                    /// </para>
                    /// </summary>
                    public string KPP {
                        get {
                            XElement x = this.GetElement(XName.Get("KPP", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("KPP", "http://bus.gov.ru/types/1"), value, "KPP", KPPLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Полномочия учредителя
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (regNum?, fullName, INN, KPP, authorities?)
                    /// </para>
                    /// </summary>
                    public founderAuthoritiesVSRIType authorities {
                        get {
                            XElement x = this.GetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"));
                            return ((founderAuthoritiesVSRIType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("authorities", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("founder", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<founderLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("INN", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("KPP", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("authorities", "http://bus.gov.ru/types/1"), typeof(founderAuthoritiesVSRIType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class INNLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                        "\\d{10}"}, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private INNLocalType() {
                        }
                    }
                    
                    private class KPPLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                        "\\d{9}"}, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private KPPLocalType() {
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (publishedInfo+)
        /// </para>
        /// </summary>
        public partial class publishedInfosLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<publishedInfoLocalType> publishedInfoField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator publishedInfosLocalType(XElement xe) { return XTypedServices.ToXTypedElement<publishedInfosLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static publishedInfosLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("publishedInfo", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (publishedInfo+)
            /// </para>
            /// </summary>
            public publishedInfosLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Размещенные сведения
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (publishedInfo+)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.regPublishedInfoType.publishedInfosLocalType.publishedInfoLocalType> publishedInfo {
                get {
                    if ((this.publishedInfoField == null)) {
                        this.publishedInfoField = new XTypedList<publishedInfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("publishedInfo", "http://bus.gov.ru/types/1"));
                    }
                    return this.publishedInfoField;
                }
                set {
                    if ((value == null)) {
                        this.publishedInfoField = null;
                    }
                    else {
                        if ((this.publishedInfoField == null)) {
                            this.publishedInfoField = XTypedList<publishedInfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("publishedInfo", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<publishedInfoLocalType>(this.publishedInfoField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("publishedInfos", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<publishedInfosLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("publishedInfo", "http://bus.gov.ru/types/1"), typeof(publishedInfoLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportYear, typeInfo, published)
            /// </para>
            /// </summary>
            public partial class publishedInfoLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator publishedInfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<publishedInfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static publishedInfoLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("typeInfo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("published", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportYear, typeInfo, published)
                /// </para>
                /// </summary>
                public publishedInfoLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Отчетный год
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (reportYear, typeInfo, published)
                /// </para>
                /// </summary>
                public decimal reportYear {
                    get {
                        XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Допустимые значения:
                ///institutionInfo (Общая информация об учреждении);
                ///stateTask (Информация о государственном (муниципальном) задании на оказание государственных (муниципальных) услуг (выполнение работ) и его исполнении);
                ///financialActivityPlan (Информация о плане финансово-хозяйственной деятельности);
                ///actionGrant (Информация об операциях с целевыми средствами из бюджета);
                ///activityResult (Информация о результатах деятельности и об использовании имущества);
                ///inspectionActivity (Сведения о проведенных в отношении учреждения контрольных мероприятиях и их результатах);
                ///annualBalanceF0503721 (Отчет о финансовых результатах деятельности (ф. 0503721));
                ///annualBalanceF0503730 (Баланс государственного (муниципального) учреждения (ф. 0503730));
                ///annualBalanceF0503737 (Отчет об исполнении учреждением плана его финансово-хозяйственной деятельности (ф. 0503737)).
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (reportYear, typeInfo, published)
                /// </para>
                /// </summary>
                public string typeInfo {
                    get {
                        XElement x = this.GetElement(XName.Get("typeInfo", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("typeInfo", "http://bus.gov.ru/types/1"), value, "typeInfo", typeInfoLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Признак размещения информации на сайте
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (reportYear, typeInfo, published)
                /// </para>
                /// </summary>
                public bool published {
                    get {
                        XElement x = this.GetElement(XName.Get("published", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("published", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("publishedInfo", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<publishedInfoLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("typeInfo", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("published", "http://bus.gov.ru/types/1"), typeof(bool));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class typeInfoLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "institutionInfo",
                                    "stateTask",
                                    "financialActivityPlan",
                                    "actionGrant",
                                    "activityResult",
                                    "inspectionActivity",
                                    "annualBalanceF0503721",
                                    "annualBalanceF0503730",
                                    "annualBalanceF0503737"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private typeInfoLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник Бюджеты (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name)
    /// </para>
    /// </summary>
    public partial class refNsiBudgetSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiBudgetSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiBudgetSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiBudgetSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник Бюджеты (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public refNsiBudgetSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Код бюджета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.budgetCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiBudgetSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiBudgetSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник Бюджеты (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiBudgetStrongType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiBudgetStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiBudgetStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiBudgetStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник Бюджеты (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Код бюджета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.budgetCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование бюджета
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiBudgetStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiBudgetStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник категорий потребителей
    /// </para>
    /// <para>
    /// Regular expression: (code?, name)
    /// </para>
    /// </summary>
    public partial class refNsiCustomerCategoryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiCustomerCategoryType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiCustomerCategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiCustomerCategoryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник категорий потребителей
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public refNsiCustomerCategoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Код категории
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.customerCategoryCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование категории
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiCustomerCategoryType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiCustomerCategoryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник Виды учреждений
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiInstitutionTypeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiInstitutionTypeType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiInstitutionTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiInstitutionTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник Виды учреждений
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiInstitutionTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Код вида учреждения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.institutionTypeCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование вида учреждения
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiInstitutionTypeType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiInstitutionTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник Cвязи бюджетов и кодов КБК
    /// </para>
    /// <para>
    /// Regular expression: (code, name?, budget)
    /// </para>
    /// </summary>
    public partial class refNsiKbkBudgetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKbkBudgetType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKbkBudgetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKbkBudgetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("budget", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник Cвязи бюджетов и кодов КБК
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, budget)
        /// </para>
        /// </summary>
        public refNsiKbkBudgetType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КБК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, budget)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КБК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, budget)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Бюджет
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, budget)
        /// </para>
        /// </summary>
        public refNsiBudgetStrongType budget {
            get {
                XElement x = this.GetElement(XName.Get("budget", "http://bus.gov.ru/types/1"));
                return ((refNsiBudgetStrongType)(x));
            }
            set {
                this.SetElement(XName.Get("budget", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKbkBudgetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKbkBudgetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("budget", "http://bus.gov.ru/types/1"), typeof(refNsiBudgetStrongType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник КБК
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiKbkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKbkType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKbkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKbkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник КБК
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiKbkType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КБК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КБК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKbkType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKbkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник КЛАДР (субъект РФ, район, город, населеннй пункт) (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name)
    /// </para>
    /// </summary>
    public partial class refNsiKladrSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKladrSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKladrSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKladrSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник КЛАДР (субъект РФ, район, город, населеннй пункт) (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public refNsiKladrSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kladrCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKladrSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKladrSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник КЛАДР (улица) (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name)
    /// </para>
    /// </summary>
    public partial class refNsiKladrStreetSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKladrStreetSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKladrStreetSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKladrStreetSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник КЛАДР (улица) (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public refNsiKladrStreetSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kladrStreetCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKladrStreetSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKladrStreetSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник КЛАДР (субъект РФ, район, город, населеннй пункт) (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiKladrStrongType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKladrStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKladrStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKladrStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник КЛАДР (субъект РФ, район, город, населеннй пункт) (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiKladrStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kladrCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КЛАДР
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKladrStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKladrStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник КОСГУ
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiKosguType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiKosguType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiKosguType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiKosguType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник КОСГУ
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiKosguType() {
        }
        
        /// <summary>
        /// <para>
        /// Код КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.kosguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по КОСГУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiKosguType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiKosguType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Расширенная ссылка на перечень ГМУ (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum?, fullName, inn?, kpp?)
    /// </para>
    /// </summary>
    public partial class refNsiOgsExtendedSoftType : global::bus.gov.ru.types.Item1.refNsiOgsSoftType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOgsExtendedSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOgsExtendedSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOgsExtendedSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Расширенная ссылка на перечень ГМУ (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public refNsiOgsExtendedSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public string kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOgsExtendedSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOgsExtendedSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum?, fullName, inn?, kpp?)
    /// </para>
    /// </summary>
    public partial class refNsiConsRegExtendedSoftType : global::bus.gov.ru.types.Item1.refNsiConsRegSoftType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiConsRegExtendedSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiConsRegExtendedSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiConsRegExtendedSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public refNsiConsRegExtendedSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName, inn?, kpp?)
        /// </para>
        /// </summary>
        public string kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiConsRegExtendedSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiConsRegExtendedSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Расширенная ссылка на перечень ГМУ (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?, inn?, kpp?)
    /// </para>
    /// </summary>
    public partial class refNsiOgsExtendedStrongType : global::bus.gov.ru.types.Item1.refNsiOgsStrongType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOgsExtendedStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOgsExtendedStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOgsExtendedStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Расширенная ссылка на перечень ГМУ (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public refNsiOgsExtendedStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public string kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOgsExtendedStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOgsExtendedStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?, inn?, kpp?)
    /// </para>
    /// </summary>
    public partial class refNsiConsRegExtendedStrongType : global::bus.gov.ru.types.Item1.refNsiConsRegStrongType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiConsRegExtendedStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiConsRegExtendedStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiConsRegExtendedStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public refNsiConsRegExtendedStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", innLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?, inn?, kpp?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", kppLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiConsRegExtendedStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiConsRegExtendedStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// ИНН (юридическое лицо)
        /// </para>
        /// </summary>
        private class innLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{10}"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private innLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// </summary>
        private class kppLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{9}"}, 0, XmlSchemaWhiteSpace.Collapse));
            
            private kppLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на перечень ГМУ (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum?, fullName)
    /// </para>
    /// </summary>
    public partial class refNsiOgsSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOgsSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOgsSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOgsSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на перечень ГМУ (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public refNsiOgsSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOgsSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOgsSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на перечень ГМУ (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum?, fullName)
    /// </para>
    /// </summary>
    public partial class refNsiOgsSoftType1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOgsSoftType1(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOgsSoftType1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOgsSoftType1() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на перечень ГМУ (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public refNsiOgsSoftType1() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOgsSoftType1", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOgsSoftType1>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на ПГМУ/Сводный реестр (мягкое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum?, fullName)
    /// </para>
    /// </summary>
    public partial class refNsiConsRegSoftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiConsRegSoftType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiConsRegSoftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiConsRegSoftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на ПГМУ/Сводный реестр (мягкое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public refNsiConsRegSoftType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.regNumConsRegType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (regNum?, fullName)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiConsRegSoftType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiConsRegSoftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на перечень ГМУ (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?)
    /// </para>
    /// </summary>
    public partial class refNsiOgsStrongType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOgsStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOgsStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOgsStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на перечень ГМУ (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public refNsiOgsStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации в перечне ГМУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", global::bus.gov.ru.types.Item1.ogsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOgsStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOgsStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
    /// </para>
    /// <para>
    /// Regular expression: (regNum, fullName?)
    /// </para>
    /// </summary>
    public partial class refNsiConsRegStrongType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiConsRegStrongType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiConsRegStrongType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiConsRegStrongType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на ПГМУ/Сводный реестр (строгое ограничение)
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public refNsiConsRegStrongType() {
        }
        
        /// <summary>
        /// <para>
        /// Реестровый номер организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public string regNum {
            get {
                XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", regNumLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (regNum, fullName?)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiConsRegStrongType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiConsRegStrongType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class regNumLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{13}|\\d{3}([A-Za-zА-Яа-я0-9]){5}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private regNumLocalType() {
            }
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКАТО
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOkatoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkatoType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkatoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkatoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКАТО
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOkatoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okatoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkatoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkatoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКЕИ
    /// </para>
    /// <para>
    /// Regular expression: (code, symbol?)
    /// </para>
    /// </summary>
    public partial class refNsiOkeiType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkeiType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkeiType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkeiType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("symbol", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКЕИ
        /// </para>
        /// <para>
        /// Regular expression: (code, symbol?)
        /// </para>
        /// </summary>
        public refNsiOkeiType() {
        }
        
        /// <summary>
        /// <para>
        /// Код справочника единиц измерения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, symbol?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okeiCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Буквенный код
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, symbol?)
        /// </para>
        /// </summary>
        public string symbol {
            get {
                XElement x = this.GetElement(XName.Get("symbol", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("symbol", "http://bus.gov.ru/types/1"), value, "symbol", symbolLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkeiType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkeiType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("symbol", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class symbolLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 30, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private symbolLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКФС
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOkfsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkfsType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkfsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkfsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКФС
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOkfsType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКФС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okfsCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКФС
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkfsType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkfsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКОГУ
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOkoguType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkoguType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkoguType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkoguType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКОГУ
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOkoguType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКОГУ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okoguCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКОГУ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkoguType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkoguType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКОПФ
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOkopfType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkopfType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkopfType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkopfType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКОПФ
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOkopfType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКОПФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okopfMixCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКОПФ
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkopfType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkopfType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКПО
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOkpoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkpoType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkpoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkpoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКПО
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOkpoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКПО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okpoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКПО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkpoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkpoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКТМО
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiOktmoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOktmoType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOktmoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOktmoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКТМО
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiOktmoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.oktmoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКТМО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOktmoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOktmoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ОКВЭД
    /// </para>
    /// <para>
    /// Regular expression: (code, name?, type)
    /// </para>
    /// </summary>
    public partial class refNsiOkvedType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiOkvedType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiOkvedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiOkvedType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ОКВЭД
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public refNsiOkvedType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.okvedCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ОКВЭД
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип вида деятельности
        ///
        ///Допустимые значения:
        /// C - основной;
        /// O - иной.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?, type)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.activityTypeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiOkvedType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiOkvedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник Публично-правовые образования
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiPpoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiPpoType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiPpoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiPpoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник Публично-правовые образования
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiPpoType() {
        }
        
        /// <summary>
        /// <para>
        /// Код публично-правового образования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.ppoCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование публично-правового образования
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiPpoType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiPpoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на перечень услуг (работ)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name, type, number?)
    /// </para>
    /// </summary>
    public partial class refNsiServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiServiceType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на перечень услуг (работ)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, number?)
        /// </para>
        /// </summary>
        public refNsiServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Код услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, number?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, number?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак услуги или работы
        ///
        ///Допустимые значения:
        /// S – услуга;
        /// W – работа.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, number?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.serviceTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер (код) по утвержденному перечню услуг (работ)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, number?)
        /// </para>
        /// </summary>
        public string number {
            get {
                XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiServiceType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class numberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private numberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на перечень услуг (работ)
    /// </para>
    /// <para>
    /// Regular expression: (code?, name, type, uniqueNumber?)
    /// </para>
    /// </summary>
    public partial class refNsiService640rType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiService640rType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiService640rType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiService640rType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("uniqueNumber", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на перечень услуг (работ)
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?)
        /// </para>
        /// </summary>
        public refNsiService640rType() {
        }
        
        /// <summary>
        /// <para>
        /// Код услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование услуги (работы)
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Признак услуги или работы
        ///
        ///Допустимые значения:
        /// S – услуга;
        /// W – работа.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?)
        /// </para>
        /// </summary>
        public string type {
            get {
                XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", global::bus.gov.ru.types.Item1.serviceTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Уникальный номер по базовому (отраслевому) перечню 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?)
        /// </para>
        /// </summary>
        public string uniqueNumber {
            get {
                XElement x = this.GetElement(XName.Get("uniqueNumber", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("uniqueNumber", "http://bus.gov.ru/types/1"), value, "uniqueNumber", uniqueNumberLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiService640rType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiService640rType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("uniqueNumber", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class uniqueNumberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private uniqueNumberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Ссылка на справочник ТОФК
    /// </para>
    /// <para>
    /// Regular expression: (code, name?)
    /// </para>
    /// </summary>
    public partial class refNsiTofkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator refNsiTofkType(XElement xe) { return XTypedServices.ToXTypedElement<refNsiTofkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refNsiTofkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Ссылка на справочник ТОФК
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public refNsiTofkType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ТОФК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", global::bus.gov.ru.types.Item1.tofkCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Наименование по ТОФК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("refNsiTofkType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refNsiTofkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Платежные реквизиты
    /// </para>
    /// <para>
    /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
    /// </para>
    /// </summary>
    public partial class requisiteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator requisiteType(XElement xe) { return XTypedServices.ToXTypedElement<requisiteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static requisiteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("creditOrgName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("creditOrgAdds", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("bik", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("correspAccount", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("currentAccount", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("personalAccount", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("tofk", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Платежные реквизиты
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public requisiteType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование кредитной организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string creditOrgName {
            get {
                XElement x = this.GetElement(XName.Get("creditOrgName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("creditOrgName", "http://bus.gov.ru/types/1"), value, "creditOrgName", creditOrgNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Адрес кредитной организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string creditOrgAdds {
            get {
                XElement x = this.GetElement(XName.Get("creditOrgAdds", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("creditOrgAdds", "http://bus.gov.ru/types/1"), value, "creditOrgAdds", creditOrgAddsLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// БИК
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string bik {
            get {
                XElement x = this.GetElement(XName.Get("bik", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("bik", "http://bus.gov.ru/types/1"), value, "bik", bikLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Корреспондентский счет
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string correspAccount {
            get {
                XElement x = this.GetElement(XName.Get("correspAccount", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("correspAccount", "http://bus.gov.ru/types/1"), value, "correspAccount", correspAccountLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Расчетный счет
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string currentAccount {
            get {
                XElement x = this.GetElement(XName.Get("currentAccount", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("currentAccount", "http://bus.gov.ru/types/1"), value, "currentAccount", currentAccountLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Лицевой счет
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public string personalAccount {
            get {
                XElement x = this.GetElement(XName.Get("personalAccount", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("personalAccount", "http://bus.gov.ru/types/1"), value, "personalAccount", personalAccountLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ТОФК
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creditOrgName, creditOrgAdds, bik, correspAccount?, currentAccount?, personalAccount?, tofk?)
        /// </para>
        /// </summary>
        public refNsiTofkType tofk {
            get {
                XElement x = this.GetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"));
                return ((refNsiTofkType)(x));
            }
            set {
                this.SetElement(XName.Get("tofk", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("requisiteType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<requisiteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("creditOrgName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("creditOrgAdds", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("bik", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("correspAccount", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("currentAccount", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("personalAccount", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("tofk", "http://bus.gov.ru/types/1"), typeof(refNsiTofkType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class creditOrgNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private creditOrgNameLocalType() {
            }
        }
        
        private class creditOrgAddsLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private creditOrgAddsLocalType() {
            }
        }
        
        private class bikLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "(\\p{L}|\\d){9}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private bikLocalType() {
            }
        }
        
        private class correspAccountLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "(\\p{L}|\\d){20}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private correspAccountLocalType() {
            }
        }
        
        private class currentAccountLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "(\\p{L}|\\d){20}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private currentAccountLocalType() {
            }
        }
        
        private class personalAccountLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "(03|05|20|21|30|41)(\\p{L}|\\d){9}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private personalAccountLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатели услуги
    /// </para>
    /// <para>
    /// Regular expression: (index, valueYear, valueActual?)
    /// </para>
    /// </summary>
    public partial class serviceIndexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator serviceIndexType(XElement xe) { return XTypedServices.ToXTypedElement<serviceIndexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static serviceIndexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("index", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueActual", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатели услуги
        /// </para>
        /// <para>
        /// Regular expression: (index, valueYear, valueActual?)
        /// </para>
        /// </summary>
        public serviceIndexType() {
        }
        
        /// <summary>
        /// <para>
        /// Показатель
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (index, valueYear, valueActual?)
        /// </para>
        /// </summary>
        public indexLocalType index {
            get {
                XElement x = this.GetElement(XName.Get("index", "http://bus.gov.ru/types/1"));
                return ((indexLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("index", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Значение показателя на год
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (index, valueYear, valueActual?)
        /// </para>
        /// </summary>
        public valueYearLocalType valueYear {
            get {
                XElement x = this.GetElement(XName.Get("valueYear", "http://bus.gov.ru/types/1"));
                return ((valueYearLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("valueYear", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Фактические значения показателей
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (index, valueYear, valueActual?)
        /// </para>
        /// </summary>
        public valueActualLocalType valueActual {
            get {
                XElement x = this.GetElement(XName.Get("valueActual", "http://bus.gov.ru/types/1"));
                return ((valueActualLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("valueActual", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("serviceIndexType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<serviceIndexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("index", "http://bus.gov.ru/types/1"), typeof(indexLocalType));
            localElementDictionary.Add(XName.Get("valueYear", "http://bus.gov.ru/types/1"), typeof(valueYearLocalType));
            localElementDictionary.Add(XName.Get("valueActual", "http://bus.gov.ru/types/1"), typeof(valueActualLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, unit, info?)
        /// </para>
        /// </summary>
        public partial class indexLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator indexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<indexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static indexLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unit", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("info", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, unit, info?)
            /// </para>
            /// </summary>
            public indexLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, unit, info?)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Единица измерения
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (name, unit, info?)
            /// </para>
            /// </summary>
            public refNsiOkeiType unit {
                get {
                    XElement x = this.GetElement(XName.Get("unit", "http://bus.gov.ru/types/1"));
                    return ((refNsiOkeiType)(x));
                }
                set {
                    this.SetElement(XName.Get("unit", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дополнительная информация 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (name, unit, info?)
            /// </para>
            /// </summary>
            public string info {
                get {
                    XElement x = this.GetElement(XName.Get("info", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("info", "http://bus.gov.ru/types/1"), value, "info", infoLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("index", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<indexLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("unit", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
                localElementDictionary.Add(XName.Get("info", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class nameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nameLocalType() {
                }
            }
            
            private class infoLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private infoLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
        /// </para>
        /// </summary>
        public partial class valueYearLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator valueYearLocalType(XElement xe) { return XTypedServices.ToXTypedElement<valueYearLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static valueYearLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("currentYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nextYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("source", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public valueYearLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Отчетный
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string reportYear {
                get {
                    XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", reportYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Текущий
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string currentYear {
                get {
                    XElement x = this.GetElement(XName.Get("currentYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("currentYear", "http://bus.gov.ru/types/1"), value, "currentYear", currentYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Очередной
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string nextYear {
                get {
                    XElement x = this.GetElement(XName.Get("nextYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("nextYear", "http://bus.gov.ru/types/1"), value, "nextYear", nextYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Первый плановый
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string planFirstYear {
                get {
                    XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", planFirstYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Второй плановый
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string planLastYear {
                get {
                    XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", planLastYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Источник информации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?, source?)
            /// </para>
            /// </summary>
            public string source {
                get {
                    XElement x = this.GetElement(XName.Get("source", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("source", "http://bus.gov.ru/types/1"), value, "source", sourceLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("valueYear", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<valueYearLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("currentYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("nextYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("source", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class reportYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private reportYearLocalType() {
                }
            }
            
            private class currentYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private currentYearLocalType() {
                }
            }
            
            private class nextYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nextYearLocalType() {
                }
            }
            
            private class planFirstYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private planFirstYearLocalType() {
                }
            }
            
            private class planLastYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private planLastYearLocalType() {
                }
            }
            
            private class sourceLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private sourceLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (actualValue?, rejectReason?, source?)
        /// </para>
        /// </summary>
        public partial class valueActualLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator valueActualLocalType(XElement xe) { return XTypedServices.ToXTypedElement<valueActualLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static valueActualLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("actualValue", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rejectReason", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("source", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (actualValue?, rejectReason?, source?)
            /// </para>
            /// </summary>
            public valueActualLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Фактическое значение
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (actualValue?, rejectReason?, source?)
            /// </para>
            /// </summary>
            public string actualValue {
                get {
                    XElement x = this.GetElement(XName.Get("actualValue", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("actualValue", "http://bus.gov.ru/types/1"), value, "actualValue", actualValueLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Причины отклонения от запланированного значения показателя
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (actualValue?, rejectReason?, source?)
            /// </para>
            /// </summary>
            public string rejectReason {
                get {
                    XElement x = this.GetElement(XName.Get("rejectReason", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("rejectReason", "http://bus.gov.ru/types/1"), value, "rejectReason", rejectReasonLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Источник информации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (actualValue?, rejectReason?, source?)
            /// </para>
            /// </summary>
            public string source {
                get {
                    XElement x = this.GetElement(XName.Get("source", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("source", "http://bus.gov.ru/types/1"), value, "source", sourceLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("valueActual", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<valueActualLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("actualValue", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rejectReason", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("source", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class actualValueLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private actualValueLocalType() {
                }
            }
            
            private class rejectReasonLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private rejectReasonLocalType() {
                }
            }
            
            private class sourceLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private sourceLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатели услуги
    /// </para>
    /// <para>
    /// Regular expression: (index, deviation?, valueYear, valueActual*)
    /// </para>
    /// </summary>
    public partial class serviceIndex640rType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<valueActualLocalType> valueActualField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator serviceIndex640rType(XElement xe) { return XTypedServices.ToXTypedElement<serviceIndex640rType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static serviceIndex640rType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("index", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("deviation", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueActual", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатели услуги
        /// </para>
        /// <para>
        /// Regular expression: (index, deviation?, valueYear, valueActual*)
        /// </para>
        /// </summary>
        public serviceIndex640rType() {
        }
        
        /// <summary>
        /// <para>
        /// Показатель
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (index, deviation?, valueYear, valueActual*)
        /// </para>
        /// </summary>
        public indexLocalType index {
            get {
                XElement x = this.GetElement(XName.Get("index", "http://bus.gov.ru/types/1"));
                return ((indexLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("index", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Допустимое (возможное) отклонение (%) 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (index, deviation?, valueYear, valueActual*)
        /// </para>
        /// </summary>
        public string deviation {
            get {
                XElement x = this.GetElement(XName.Get("deviation", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("deviation", "http://bus.gov.ru/types/1"), value, "deviation", deviationLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Значение показателя 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (index, deviation?, valueYear, valueActual*)
        /// </para>
        /// </summary>
        public valueYearLocalType valueYear {
            get {
                XElement x = this.GetElement(XName.Get("valueYear", "http://bus.gov.ru/types/1"));
                return ((valueYearLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("valueYear", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Фактические значения показателей
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (index, deviation?, valueYear, valueActual*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.serviceIndex640rType.valueActualLocalType> valueActual {
            get {
                if ((this.valueActualField == null)) {
                    this.valueActualField = new XTypedList<valueActualLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("valueActual", "http://bus.gov.ru/types/1"));
                }
                return this.valueActualField;
            }
            set {
                if ((value == null)) {
                    this.valueActualField = null;
                }
                else {
                    if ((this.valueActualField == null)) {
                        this.valueActualField = XTypedList<valueActualLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("valueActual", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<valueActualLocalType>(this.valueActualField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("serviceIndex640rType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<serviceIndex640rType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("index", "http://bus.gov.ru/types/1"), typeof(indexLocalType));
            localElementDictionary.Add(XName.Get("deviation", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("valueYear", "http://bus.gov.ru/types/1"), typeof(valueYearLocalType));
            localElementDictionary.Add(XName.Get("valueActual", "http://bus.gov.ru/types/1"), typeof(valueActualLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (regNum, name, unit)
        /// </para>
        /// </summary>
        public partial class indexLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator indexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<indexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static indexLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("unit", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum, name, unit)
            /// </para>
            /// </summary>
            public indexLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Уникальный номер реестровой записи
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (regNum, name, unit)
            /// </para>
            /// </summary>
            public string regNum {
                get {
                    XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", regNumLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Наименование
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (regNum, name, unit)
            /// </para>
            /// </summary>
            public string name {
                get {
                    XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Единица измерения
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (regNum, name, unit)
            /// </para>
            /// </summary>
            public refNsiOkeiType unit {
                get {
                    XElement x = this.GetElement(XName.Get("unit", "http://bus.gov.ru/types/1"));
                    return ((refNsiOkeiType)(x));
                }
                set {
                    this.SetElement(XName.Get("unit", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("index", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<indexLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("unit", "http://bus.gov.ru/types/1"), typeof(refNsiOkeiType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class regNumLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 45, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private regNumLocalType() {
                }
            }
            
            private class nameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nameLocalType() {
                }
            }
        }
        
        private class deviationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private deviationLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
        /// </para>
        /// </summary>
        public partial class valueYearLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator valueYearLocalType(XElement xe) { return XTypedServices.ToXTypedElement<valueYearLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static valueYearLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("currentYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nextYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public valueYearLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Отчетный
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public string reportYear {
                get {
                    XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", reportYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Текущий
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public string currentYear {
                get {
                    XElement x = this.GetElement(XName.Get("currentYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("currentYear", "http://bus.gov.ru/types/1"), value, "currentYear", currentYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Очередной
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public string nextYear {
                get {
                    XElement x = this.GetElement(XName.Get("nextYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("nextYear", "http://bus.gov.ru/types/1"), value, "nextYear", nextYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Первый плановый
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public string planFirstYear {
                get {
                    XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", planFirstYearLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Второй плановый
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
            /// </para>
            /// </summary>
            public string planLastYear {
                get {
                    XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", planLastYearLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("valueYear", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<valueYearLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("currentYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("nextYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class reportYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private reportYearLocalType() {
                }
            }
            
            private class currentYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private currentYearLocalType() {
                }
            }
            
            private class nextYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private nextYearLocalType() {
                }
            }
            
            private class planFirstYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private planFirstYearLocalType() {
                }
            }
            
            private class planLastYearLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private planLastYearLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
        /// </para>
        /// </summary>
        public partial class valueActualLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator valueActualLocalType(XElement xe) { return XTypedServices.ToXTypedElement<valueActualLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static valueActualLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportGUID", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("actualValue", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reject", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rejectReason", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("averagePrice", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public valueActualLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public reportGUID reportGUID {
                get {
                    XElement x = this.GetElement(XName.Get("reportGUID", "http://bus.gov.ru/types/1"));
                    return ((reportGUID)(x));
                }
                set {
                    this.SetElement(XName.Get("reportGUID", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Исполнено на текущую дату
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public string actualValue {
                get {
                    XElement x = this.GetElement(XName.Get("actualValue", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("actualValue", "http://bus.gov.ru/types/1"), value, "actualValue", actualValueLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Отклонение, превышающее допустимое (возможное) значение
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public string reject {
                get {
                    XElement x = this.GetElement(XName.Get("reject", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("reject", "http://bus.gov.ru/types/1"), value, "reject", rejectLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Причины отклонения от запланированного значения показателя
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public string rejectReason {
                get {
                    XElement x = this.GetElement(XName.Get("rejectReason", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("rejectReason", "http://bus.gov.ru/types/1"), value, "rejectReason", rejectReasonLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Фактическое значение среднего размера платы (цены, тарифа) за государственную услугу
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, actualValue?, reject?, rejectReason?, averagePrice?)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> averagePrice {
                get {
                    XElement x = this.GetElement(XName.Get("averagePrice", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), value, "averagePrice", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("valueActual", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<valueActualLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportGUID", "http://bus.gov.ru/types/1"), typeof(reportGUID));
                localElementDictionary.Add(XName.Get("actualValue", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("reject", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rejectReason", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class actualValueLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private actualValueLocalType() {
                }
            }
            
            private class rejectLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 250, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private rejectLocalType() {
                }
            }
            
            private class rejectReasonLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private rejectReasonLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Государственное задание
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
    /// </para>
    /// </summary>
    public partial class stateTaskType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<serviceLocalType> serviceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator stateTaskType(XElement xe) { return XTypedServices.ToXTypedElement<stateTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static stateTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("service", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Государственное задание
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public stateTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Отчетный год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> reportYear {
            get {
                XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Текущий финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Очередной финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> nextFinancialYear {
            get {
                XElement x = this.GetElement(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"), value, "nextFinancialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Первый год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planFirstYear {
            get {
                XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Второй год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planLastYear {
            get {
                XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Услуга (работа)
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.stateTaskType.serviceLocalType> service {
            get {
                if ((this.serviceField == null)) {
                    this.serviceField = new XTypedList<serviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", "http://bus.gov.ru/types/1"));
                }
                return this.serviceField;
            }
            set {
                if ((value == null)) {
                    this.serviceField = null;
                }
                else {
                    if ((this.serviceField == null)) {
                        this.serviceField = XTypedList<serviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<serviceLocalType>(this.serviceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, document*)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("stateTaskType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<stateTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("service", "http://bus.gov.ru/types/1"), typeof(serviceLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
        /// </para>
        /// </summary>
        public partial class serviceLocalType : global::bus.gov.ru.types.Item1.refNsiServiceType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<refNsiCustomerCategoryType> categoryField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<serviceIndexType> volumeIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<serviceIndexType> qualityIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> renderEnactmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<informingProcedureLocalType> informingProcedureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<supervisionProcedureLocalType> supervisionProcedureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator serviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<serviceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static serviceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("category", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("volumeIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("qualityIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("renderEnactment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("payment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("informingProcedure", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportRequirements", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public serviceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Порядковый номер раздела
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public int ordinalNumber {
                get {
                    XElement x = this.GetElement(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Категория потребителей
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<refNsiCustomerCategoryType> category {
                get {
                    if ((this.categoryField == null)) {
                        this.categoryField = new XTypedList<refNsiCustomerCategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("category", "http://bus.gov.ru/types/1"));
                    }
                    return this.categoryField;
                }
                set {
                    if ((value == null)) {
                        this.categoryField = null;
                    }
                    else {
                        if ((this.categoryField == null)) {
                            this.categoryField = XTypedList<refNsiCustomerCategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("category", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<refNsiCustomerCategoryType>(this.categoryField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Показатель объёма
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<serviceIndexType> volumeIndex {
                get {
                    if ((this.volumeIndexField == null)) {
                        this.volumeIndexField = new XTypedList<serviceIndexType>(this, LinqToXsdTypeManager.Instance, XName.Get("volumeIndex", "http://bus.gov.ru/types/1"));
                    }
                    return this.volumeIndexField;
                }
                set {
                    if ((value == null)) {
                        this.volumeIndexField = null;
                    }
                    else {
                        if ((this.volumeIndexField == null)) {
                            this.volumeIndexField = XTypedList<serviceIndexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("volumeIndex", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<serviceIndexType>(this.volumeIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Показатель качества
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<serviceIndexType> qualityIndex {
                get {
                    if ((this.qualityIndexField == null)) {
                        this.qualityIndexField = new XTypedList<serviceIndexType>(this, LinqToXsdTypeManager.Instance, XName.Get("qualityIndex", "http://bus.gov.ru/types/1"));
                    }
                    return this.qualityIndexField;
                }
                set {
                    if ((value == null)) {
                        this.qualityIndexField = null;
                    }
                    else {
                        if ((this.qualityIndexField == null)) {
                            this.qualityIndexField = XTypedList<serviceIndexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("qualityIndex", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<serviceIndexType>(this.qualityIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Нормативно правовой акт, регулирующий порядок оказания государственной (муниципальной) услуги
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<string> renderEnactment {
                get {
                    if ((this.renderEnactmentField == null)) {
                        this.renderEnactmentField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("renderEnactment", "http://bus.gov.ru/types/1"));
                    }
                    return this.renderEnactmentField;
                }
                set {
                    if ((value == null)) {
                        this.renderEnactmentField = null;
                    }
                    else {
                        if ((this.renderEnactmentField == null)) {
                            this.renderEnactmentField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("renderEnactment", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.renderEnactmentField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения о ценах (тарифах) на услугу
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public paymentLocalType payment {
                get {
                    XElement x = this.GetElement(XName.Get("payment", "http://bus.gov.ru/types/1"));
                    return ((paymentLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("payment", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Порядок информирования потенциальных потребителей муниципальной услуги
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTaskType.serviceLocalType.informingProcedureLocalType> informingProcedure {
                get {
                    if ((this.informingProcedureField == null)) {
                        this.informingProcedureField = new XTypedList<informingProcedureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("informingProcedure", "http://bus.gov.ru/types/1"));
                    }
                    return this.informingProcedureField;
                }
                set {
                    if ((value == null)) {
                        this.informingProcedureField = null;
                    }
                    else {
                        if ((this.informingProcedureField == null)) {
                            this.informingProcedureField = XTypedList<informingProcedureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("informingProcedure", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<informingProcedureLocalType>(this.informingProcedureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Порядок контроля за исполнением государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTaskType.serviceLocalType.supervisionProcedureLocalType> supervisionProcedure {
                get {
                    if ((this.supervisionProcedureField == null)) {
                        this.supervisionProcedureField = new XTypedList<supervisionProcedureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"));
                    }
                    return this.supervisionProcedureField;
                }
                set {
                    if ((value == null)) {
                        this.supervisionProcedureField = null;
                    }
                    else {
                        if ((this.supervisionProcedureField == null)) {
                            this.supervisionProcedureField = XTypedList<supervisionProcedureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<supervisionProcedureLocalType>(this.supervisionProcedureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Требования к отчетности об исполнении государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, number?, ordinalNumber, category*, volumeIndex*, qualityIndex*, renderEnactment*, payment?, informingProcedure*, supervisionProcedure*, reportRequirements?)
            /// </para>
            /// </summary>
            public reportRequirementsLocalType reportRequirements {
                get {
                    XElement x = this.GetElement(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"));
                    return ((reportRequirementsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("service", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<serviceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), typeof(int));
                localElementDictionary.Add(XName.Get("category", "http://bus.gov.ru/types/1"), typeof(refNsiCustomerCategoryType));
                localElementDictionary.Add(XName.Get("volumeIndex", "http://bus.gov.ru/types/1"), typeof(serviceIndexType));
                localElementDictionary.Add(XName.Get("qualityIndex", "http://bus.gov.ru/types/1"), typeof(serviceIndexType));
                localElementDictionary.Add(XName.Get("renderEnactment", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("payment", "http://bus.gov.ru/types/1"), typeof(paymentLocalType));
                localElementDictionary.Add(XName.Get("informingProcedure", "http://bus.gov.ru/types/1"), typeof(informingProcedureLocalType));
                localElementDictionary.Add(XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"), typeof(supervisionProcedureLocalType));
                localElementDictionary.Add(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"), typeof(reportRequirementsLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class renderEnactmentLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private renderEnactmentLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (averagePrice, limitPrice*, priceEnactment)
            /// </para>
            /// </summary>
            public partial class paymentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<limitPriceLocalType> limitPriceField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator paymentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<paymentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static paymentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("averagePrice", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("limitPrice", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("priceEnactment", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (averagePrice, limitPrice*, priceEnactment)
                /// </para>
                /// </summary>
                public paymentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Средневзвешенная цена за единицу услуги (руб.)
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (averagePrice, limitPrice*, priceEnactment)
                /// </para>
                /// </summary>
                public decimal averagePrice {
                    get {
                        XElement x = this.GetElement(XName.Get("averagePrice", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), value, "averagePrice", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Значение предельных цен (тарифов)
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (averagePrice, limitPrice*, priceEnactment)
                /// </para>
                /// </summary>
                public IList<bus.gov.ru.types.Item1.stateTaskType.serviceLocalType.paymentLocalType.limitPriceLocalType> limitPrice {
                    get {
                        if ((this.limitPriceField == null)) {
                            this.limitPriceField = new XTypedList<limitPriceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("limitPrice", "http://bus.gov.ru/types/1"));
                        }
                        return this.limitPriceField;
                    }
                    set {
                        if ((value == null)) {
                            this.limitPriceField = null;
                        }
                        else {
                            if ((this.limitPriceField == null)) {
                                this.limitPriceField = XTypedList<limitPriceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("limitPrice", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<limitPriceLocalType>(this.limitPriceField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Сведения о нормативных правовых актах, устанавливающих цены (тарифы) на услугу либо порядок их установления
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (averagePrice, limitPrice*, priceEnactment)
                /// </para>
                /// </summary>
                public priceEnactmentLocalType priceEnactment {
                    get {
                        XElement x = this.GetElement(XName.Get("priceEnactment", "http://bus.gov.ru/types/1"));
                        return ((priceEnactmentLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("priceEnactment", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("payment", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<paymentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), typeof(decimal));
                    localElementDictionary.Add(XName.Get("limitPrice", "http://bus.gov.ru/types/1"), typeof(limitPriceLocalType));
                    localElementDictionary.Add(XName.Get("priceEnactment", "http://bus.gov.ru/types/1"), typeof(priceEnactmentLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name, price)
                /// </para>
                /// </summary>
                public partial class limitPriceLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator limitPriceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<limitPriceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static limitPriceLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("price", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (name, price)
                    /// </para>
                    /// </summary>
                    public limitPriceLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Наименование услуги
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (name, price)
                    /// </para>
                    /// </summary>
                    public string name {
                        get {
                            XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Цена (тариф), единица измерения
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (name, price)
                    /// </para>
                    /// </summary>
                    public string price {
                        get {
                            XElement x = this.GetElement(XName.Get("price", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("price", "http://bus.gov.ru/types/1"), value, "price", priceLocalType.TypeDefinition);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("limitPrice", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<limitPriceLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("price", "http://bus.gov.ru/types/1"), typeof(string));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class nameLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private nameLocalType() {
                        }
                    }
                    
                    private class priceLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private priceLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (type, name, number, date, author)
                /// </para>
                /// </summary>
                public partial class priceEnactmentLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator priceEnactmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<priceEnactmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static priceEnactmentLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("author", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public priceEnactmentLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Вид нормативного правового акта
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public string type {
                        get {
                            XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Наименование нормативного правового акта
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public string name {
                        get {
                            XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Номер нормативного правового акта
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public string number {
                        get {
                            XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Дата нормативного правового акта
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public System.DateTime date {
                        get {
                            XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Орган, утвердивший нормативный правовой акт
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (type, name, number, date, author)
                    /// </para>
                    /// </summary>
                    public refNsiOgsSoftType author {
                        get {
                            XElement x = this.GetElement(XName.Get("author", "http://bus.gov.ru/types/1"));
                            return ((refNsiOgsSoftType)(x));
                        }
                        set {
                            this.SetElement(XName.Get("author", "http://bus.gov.ru/types/1"), value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("priceEnactment", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<priceEnactmentLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                        localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                        localElementDictionary.Add(XName.Get("author", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class typeLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private typeLocalType() {
                        }
                    }
                    
                    private class nameLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private nameLocalType() {
                        }
                    }
                    
                    private class numberLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                        
                        private numberLocalType() {
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (method, content, rate)
            /// </para>
            /// </summary>
            public partial class informingProcedureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator informingProcedureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<informingProcedureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static informingProcedureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("method", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("content", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rate", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (method, content, rate)
                /// </para>
                /// </summary>
                public informingProcedureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Способ информирования
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (method, content, rate)
                /// </para>
                /// </summary>
                public string method {
                    get {
                        XElement x = this.GetElement(XName.Get("method", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("method", "http://bus.gov.ru/types/1"), value, "method", methodLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Состав размещаемой (доводимой) информации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (method, content, rate)
                /// </para>
                /// </summary>
                public string content {
                    get {
                        XElement x = this.GetElement(XName.Get("content", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("content", "http://bus.gov.ru/types/1"), value, "content", contentLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Частота обновления информации
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (method, content, rate)
                /// </para>
                /// </summary>
                public string rate {
                    get {
                        XElement x = this.GetElement(XName.Get("rate", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("rate", "http://bus.gov.ru/types/1"), value, "rate", rateLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("informingProcedure", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<informingProcedureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("method", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("content", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("rate", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class methodLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private methodLocalType() {
                    }
                }
                
                private class contentLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private contentLocalType() {
                    }
                }
                
                private class rateLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private rateLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (form, rate, supervisor)
            /// </para>
            /// </summary>
            public partial class supervisionProcedureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator supervisionProcedureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<supervisionProcedureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static supervisionProcedureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("form", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisor", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (form, rate, supervisor)
                /// </para>
                /// </summary>
                public supervisionProcedureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Форма контроля
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (form, rate, supervisor)
                /// </para>
                /// </summary>
                public string form {
                    get {
                        XElement x = this.GetElement(XName.Get("form", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("form", "http://bus.gov.ru/types/1"), value, "form", formLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Периодичность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (form, rate, supervisor)
                /// </para>
                /// </summary>
                public string rate {
                    get {
                        XElement x = this.GetElement(XName.Get("rate", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("rate", "http://bus.gov.ru/types/1"), value, "rate", rateLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Орган исполнительной власти, осуществляющий контроль за оказанием услуги
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (form, rate, supervisor)
                /// </para>
                /// </summary>
                public refNsiOgsSoftType supervisor {
                    get {
                        XElement x = this.GetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"));
                        return ((refNsiOgsSoftType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<supervisionProcedureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("form", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("rate", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("supervisor", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class formLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private formLocalType() {
                    }
                }
                
                private class rateLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private rateLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
            /// </para>
            /// </summary>
            public partial class reportRequirementsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> earlyTerminationField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> deliveryTermField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> otherRequirementField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> otherInfoField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator reportRequirementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<reportRequirementsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static reportRequirementsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("earlyTermination", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("deliveryTerm", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherRequirement", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherInfo", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
                /// </para>
                /// </summary>
                public reportRequirementsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Основание для досрочного прекращения государственного (муниципального) задания
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
                /// </para>
                /// </summary>
                public IList<string> earlyTermination {
                    get {
                        if ((this.earlyTerminationField == null)) {
                            this.earlyTerminationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("earlyTermination", "http://bus.gov.ru/types/1"));
                        }
                        return this.earlyTerminationField;
                    }
                    set {
                        if ((value == null)) {
                            this.earlyTerminationField = null;
                        }
                        else {
                            if ((this.earlyTerminationField == null)) {
                                this.earlyTerminationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("earlyTermination", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.earlyTerminationField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Сроки предоставления отчетов об исполнении государственного (муниципального) задания
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
                /// </para>
                /// </summary>
                public IList<string> deliveryTerm {
                    get {
                        if ((this.deliveryTermField == null)) {
                            this.deliveryTermField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"));
                        }
                        return this.deliveryTermField;
                    }
                    set {
                        if ((value == null)) {
                            this.deliveryTermField = null;
                        }
                        else {
                            if ((this.deliveryTermField == null)) {
                                this.deliveryTermField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.deliveryTermField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Иные требования к отчетности об исполнении
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
                /// </para>
                /// </summary>
                public IList<string> otherRequirement {
                    get {
                        if ((this.otherRequirementField == null)) {
                            this.otherRequirementField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("otherRequirement", "http://bus.gov.ru/types/1"));
                        }
                        return this.otherRequirementField;
                    }
                    set {
                        if ((value == null)) {
                            this.otherRequirementField = null;
                        }
                        else {
                            if ((this.otherRequirementField == null)) {
                                this.otherRequirementField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("otherRequirement", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.otherRequirementField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Иная информация, необходимая для исполнения (контроля за исполнением) государственного (муниципального) задания
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (earlyTermination*, deliveryTerm*, otherRequirement*, otherInfo*)
                /// </para>
                /// </summary>
                public IList<string> otherInfo {
                    get {
                        if ((this.otherInfoField == null)) {
                            this.otherInfoField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("otherInfo", "http://bus.gov.ru/types/1"));
                        }
                        return this.otherInfoField;
                    }
                    set {
                        if ((value == null)) {
                            this.otherInfoField = null;
                        }
                        else {
                            if ((this.otherInfoField == null)) {
                                this.otherInfoField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("otherInfo", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.otherInfoField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("reportRequirements", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<reportRequirementsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("earlyTermination", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("otherRequirement", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("otherInfo", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class earlyTerminationLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private earlyTerminationLocalType() {
                    }
                }
                
                private class deliveryTermLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private deliveryTermLocalType() {
                    }
                }
                
                private class otherRequirementLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private otherRequirementLocalType() {
                    }
                }
                
                private class otherInfoLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private otherInfoLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Государственное задание в соответствии с Постановлением Правительства РФ от 26 июня 2015 г. N640 
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
    /// </para>
    /// </summary>
    public partial class stateTask640rType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<serviceLocalType> serviceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> earlyTerminationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> otherInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<supervisionProcedureLocalType> supervisionProcedureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<reportsLocalType> reportsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentType> documentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator stateTask640rType(XElement xe) { return XTypedServices.ToXTypedElement<stateTask640rType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static stateTask640rType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("service", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("earlyTermination", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherInfo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reportRequirements", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("reports", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("document", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("statementDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approverFirstName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approverLastName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approverMiddleName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("approverPosition", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Государственное задание в соответствии с Постановлением Правительства РФ от 26 июня 2015 г. N640 
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public stateTask640rType() {
        }
        
        /// <summary>
        /// <para>
        /// Отчетный год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> reportYear {
            get {
                XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Текущий финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialYear {
            get {
                XElement x = this.GetElement(XName.Get("financialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialYear", "http://bus.gov.ru/types/1"), value, "financialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Очередной финансовый год
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> nextFinancialYear {
            get {
                XElement x = this.GetElement(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"), value, "nextFinancialYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Первый год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planFirstYear {
            get {
                XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Второй год планового периода
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> planLastYear {
            get {
                XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Услуга (работа)
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType> service {
            get {
                if ((this.serviceField == null)) {
                    this.serviceField = new XTypedList<serviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", "http://bus.gov.ru/types/1"));
                }
                return this.serviceField;
            }
            set {
                if ((value == null)) {
                    this.serviceField = null;
                }
                else {
                    if ((this.serviceField == null)) {
                        this.serviceField = XTypedList<serviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<serviceLocalType>(this.serviceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Основание для досрочного прекращения государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<string> earlyTermination {
            get {
                if ((this.earlyTerminationField == null)) {
                    this.earlyTerminationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("earlyTermination", "http://bus.gov.ru/types/1"));
                }
                return this.earlyTerminationField;
            }
            set {
                if ((value == null)) {
                    this.earlyTerminationField = null;
                }
                else {
                    if ((this.earlyTerminationField == null)) {
                        this.earlyTerminationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("earlyTermination", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.earlyTerminationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Иная информация, необходимая для исполнения (контроля за исполнением) государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<string> otherInfo {
            get {
                if ((this.otherInfoField == null)) {
                    this.otherInfoField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("otherInfo", "http://bus.gov.ru/types/1"));
                }
                return this.otherInfoField;
            }
            set {
                if ((value == null)) {
                    this.otherInfoField = null;
                }
                else {
                    if ((this.otherInfoField == null)) {
                        this.otherInfoField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("otherInfo", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.otherInfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Требования к отчетности об исполнении государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public reportRequirementsLocalType reportRequirements {
            get {
                XElement x = this.GetElement(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"));
                return ((reportRequirementsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Порядок контроля за исполнением государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.stateTask640rType.supervisionProcedureLocalType> supervisionProcedure {
            get {
                if ((this.supervisionProcedureField == null)) {
                    this.supervisionProcedureField = new XTypedList<supervisionProcedureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"));
                }
                return this.supervisionProcedureField;
            }
            set {
                if ((value == null)) {
                    this.supervisionProcedureField = null;
                }
                else {
                    if ((this.supervisionProcedureField == null)) {
                        this.supervisionProcedureField = XTypedList<supervisionProcedureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<supervisionProcedureLocalType>(this.supervisionProcedureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Отчет(ы) о выполнении государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.stateTask640rType.reportsLocalType> reports {
            get {
                if ((this.reportsField == null)) {
                    this.reportsField = new XTypedList<reportsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("reports", "http://bus.gov.ru/types/1"));
                }
                return this.reportsField;
            }
            set {
                if ((value == null)) {
                    this.reportsField = null;
                }
                else {
                    if ((this.reportsField == null)) {
                        this.reportsField = XTypedList<reportsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("reports", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<reportsLocalType>(this.reportsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Документ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public IList<documentType> document {
            get {
                if ((this.documentField == null)) {
                    this.documentField = new XTypedList<documentType>(this, LinqToXsdTypeManager.Instance, XName.Get("document", "http://bus.gov.ru/types/1"));
                }
                return this.documentField;
            }
            set {
                if ((value == null)) {
                    this.documentField = null;
                }
                else {
                    if ((this.documentField == null)) {
                        this.documentField = XTypedList<documentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("document", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<documentType>(this.documentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата утверждения государственного задания
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> statementDate {
            get {
                XElement x = this.GetElement(XName.Get("statementDate", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("statementDate", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Номер государственного задания
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public string number {
            get {
                XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Имя уполномоченного лица, утвердившего государственное задание
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public string approverFirstName {
            get {
                XElement x = this.GetElement(XName.Get("approverFirstName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approverFirstName", "http://bus.gov.ru/types/1"), value, "approverFirstName", approverFirstNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Фамилия уполномоченного лица, утвердившего государственное задание
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public string approverLastName {
            get {
                XElement x = this.GetElement(XName.Get("approverLastName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approverLastName", "http://bus.gov.ru/types/1"), value, "approverLastName", approverLastNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Отчество уполномоченного лица, утвердившего государственное задание
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public string approverMiddleName {
            get {
                XElement x = this.GetElement(XName.Get("approverMiddleName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approverMiddleName", "http://bus.gov.ru/types/1"), value, "approverMiddleName", approverMiddleNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Должность уполномоченного лица, утвердившего государственное задание
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, reportYear?, financialYear?, nextFinancialYear?, planFirstYear?, planLastYear?, service+, earlyTermination*, otherInfo*, reportRequirements?, supervisionProcedure*, reports*, document*, statementDate?, number?, approverFirstName?, approverLastName?, approverMiddleName?, approverPosition?)
        /// </para>
        /// </summary>
        public string approverPosition {
            get {
                XElement x = this.GetElement(XName.Get("approverPosition", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("approverPosition", "http://bus.gov.ru/types/1"), value, "approverPosition", approverPositionLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("stateTask640rType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<stateTask640rType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("financialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("nextFinancialYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("service", "http://bus.gov.ru/types/1"), typeof(serviceLocalType));
            localElementDictionary.Add(XName.Get("earlyTermination", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("otherInfo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("reportRequirements", "http://bus.gov.ru/types/1"), typeof(reportRequirementsLocalType));
            localElementDictionary.Add(XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1"), typeof(supervisionProcedureLocalType));
            localElementDictionary.Add(XName.Get("reports", "http://bus.gov.ru/types/1"), typeof(reportsLocalType));
            localElementDictionary.Add(XName.Get("document", "http://bus.gov.ru/types/1"), typeof(documentType));
            localElementDictionary.Add(XName.Get("statementDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approverFirstName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approverLastName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approverMiddleName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("approverPosition", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
        /// </para>
        /// </summary>
        public partial class serviceLocalType : global::bus.gov.ru.types.Item1.refNsiService640rType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<refNsiCustomerCategoryType> categoryField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<priceEnactmentLocalType> priceEnactmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<renderEnactmentLocalType> renderEnactmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<informingProcedureLocalType> informingProcedureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<serviceIndex640rType> qualityIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<volumeIndexLocalType> volumeIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<indexesLocalType> indexesField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
         public static explicit operator serviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<serviceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static serviceLocalType() {
                BuildElementDictionary();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public serviceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Порядковый номер раздела
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public int ordinalNumber {
                get {
                    XElement x = this.GetElement(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), value, "ordinalNumber", ordinalNumberLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Категория потребителей
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<refNsiCustomerCategoryType> category {
                get {
                    if ((this.categoryField == null)) {
                        this.categoryField = new XTypedList<refNsiCustomerCategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("category", "http://bus.gov.ru/types/1"));
                    }
                    return this.categoryField;
                }
                set {
                    if ((value == null)) {
                        this.categoryField = null;
                    }
                    else {
                        if ((this.categoryField == null)) {
                            this.categoryField = XTypedList<refNsiCustomerCategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("category", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<refNsiCustomerCategoryType>(this.categoryField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Признак "Возможность взимания платы за услугу"
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public System.Nullable<bool> payService {
                get {
                    XElement x = this.GetElement(XName.Get("payService", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(XName.Get("payService", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Средневзвешенная цена за единицу услуги (руб.)
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public System.Nullable<decimal> averagePrice {
                get {
                    XElement x = this.GetElement(XName.Get("averagePrice", "http://bus.gov.ru/types/1"));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), value, "averagePrice", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Нормативные правовые акты, устанавливающие цены (тарифы) на услугу либо порядок его (ее) установления
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType.priceEnactmentLocalType> priceEnactment {
                get {
                    if ((this.priceEnactmentField == null)) {
                        this.priceEnactmentField = new XTypedList<priceEnactmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("priceEnactment", "http://bus.gov.ru/types/1"));
                    }
                    return this.priceEnactmentField;
                }
                set {
                    if ((value == null)) {
                        this.priceEnactmentField = null;
                    }
                    else {
                        if ((this.priceEnactmentField == null)) {
                            this.priceEnactmentField = XTypedList<priceEnactmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("priceEnactment", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<priceEnactmentLocalType>(this.priceEnactmentField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Нормативно правовой акт, регулирующий порядок оказания государственной (муниципальной) услуги
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType.renderEnactmentLocalType> renderEnactment {
                get {
                    if ((this.renderEnactmentField == null)) {
                        this.renderEnactmentField = new XTypedList<renderEnactmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("renderEnactment", "http://bus.gov.ru/types/1"));
                    }
                    return this.renderEnactmentField;
                }
                set {
                    if ((value == null)) {
                        this.renderEnactmentField = null;
                    }
                    else {
                        if ((this.renderEnactmentField == null)) {
                            this.renderEnactmentField = XTypedList<renderEnactmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("renderEnactment", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<renderEnactmentLocalType>(this.renderEnactmentField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Порядок информирования потенциальных потребителей муниципальной услуги
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType.informingProcedureLocalType> informingProcedure {
                get {
                    if ((this.informingProcedureField == null)) {
                        this.informingProcedureField = new XTypedList<informingProcedureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("informingProcedure", "http://bus.gov.ru/types/1"));
                    }
                    return this.informingProcedureField;
                }
                set {
                    if ((value == null)) {
                        this.informingProcedureField = null;
                    }
                    else {
                        if ((this.informingProcedureField == null)) {
                            this.informingProcedureField = XTypedList<informingProcedureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("informingProcedure", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<informingProcedureLocalType>(this.informingProcedureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Показатель(и) качества
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<serviceIndex640rType> qualityIndex {
                get {
                    if ((this.qualityIndexField == null)) {
                        this.qualityIndexField = new XTypedList<serviceIndex640rType>(this, LinqToXsdTypeManager.Instance, XName.Get("qualityIndex", "http://bus.gov.ru/types/1"));
                    }
                    return this.qualityIndexField;
                }
                set {
                    if ((value == null)) {
                        this.qualityIndexField = null;
                    }
                    else {
                        if ((this.qualityIndexField == null)) {
                            this.qualityIndexField = XTypedList<serviceIndex640rType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("qualityIndex", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<serviceIndex640rType>(this.qualityIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Показатель(и) объёма
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType.volumeIndexLocalType> volumeIndex {
                get {
                    if ((this.volumeIndexField == null)) {
                        this.volumeIndexField = new XTypedList<volumeIndexLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("volumeIndex", "http://bus.gov.ru/types/1"));
                    }
                    return this.volumeIndexField;
                }
                set {
                    if ((value == null)) {
                        this.volumeIndexField = null;
                    }
                    else {
                        if ((this.volumeIndexField == null)) {
                            this.volumeIndexField = XTypedList<volumeIndexLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("volumeIndex", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<volumeIndexLocalType>(this.volumeIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Индексы
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (code?, name, type, uniqueNumber?, ordinalNumber, category*, (payService, averagePrice?, priceEnactment+)?, renderEnactment*, informingProcedure*, qualityIndex*, volumeIndex*, indexes*)
            /// </para>
            /// </summary>
            public IList<bus.gov.ru.types.Item1.stateTask640rType.serviceLocalType.indexesLocalType> indexes {
                get {
                    if ((this.indexesField == null)) {
                        this.indexesField = new XTypedList<indexesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("indexes", "http://bus.gov.ru/types/1"));
                    }
                    return this.indexesField;
                }
                set {
                    if ((value == null)) {
                        this.indexesField = null;
                    }
                    else {
                        if ((this.indexesField == null)) {
                            this.indexesField = XTypedList<indexesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("indexes", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<indexesLocalType>(this.indexesField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("service", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<serviceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("uniqueNumber", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("ordinalNumber", "http://bus.gov.ru/types/1"), typeof(int));
                localElementDictionary.Add(XName.Get("category", "http://bus.gov.ru/types/1"), typeof(refNsiCustomerCategoryType));
                localElementDictionary.Add(XName.Get("payService", "http://bus.gov.ru/types/1"), typeof(bool));
                localElementDictionary.Add(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), typeof(decimal));
                localElementDictionary.Add(XName.Get("priceEnactment", "http://bus.gov.ru/types/1"), typeof(priceEnactmentLocalType));
                localElementDictionary.Add(XName.Get("renderEnactment", "http://bus.gov.ru/types/1"), typeof(renderEnactmentLocalType));
                localElementDictionary.Add(XName.Get("informingProcedure", "http://bus.gov.ru/types/1"), typeof(informingProcedureLocalType));
                localElementDictionary.Add(XName.Get("qualityIndex", "http://bus.gov.ru/types/1"), typeof(serviceIndex640rType));
                localElementDictionary.Add(XName.Get("volumeIndex", "http://bus.gov.ru/types/1"), typeof(volumeIndexLocalType));
                localElementDictionary.Add(XName.Get("indexes", "http://bus.gov.ru/types/1"), typeof(indexesLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            private class ordinalNumberLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
                
                private ordinalNumberLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type, author, date, number, name)
            /// </para>
            /// </summary>
            public partial class priceEnactmentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator priceEnactmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<priceEnactmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static priceEnactmentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("author", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public priceEnactmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Вид нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Орган, утвердивший нормативный правовой акт
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public refNsiOgsSoftType author {
                    get {
                        XElement x = this.GetElement(XName.Get("author", "http://bus.gov.ru/types/1"));
                        return ((refNsiOgsSoftType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("author", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Дата нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public System.DateTime date {
                    get {
                        XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Номер нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string number {
                    get {
                        XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("priceEnactment", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<priceEnactmentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("author", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                    localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                    localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class typeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private typeLocalType() {
                    }
                }
                
                private class numberLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private numberLocalType() {
                    }
                }
                
                private class nameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private nameLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (type, author, date, number, name)
            /// </para>
            /// </summary>
            public partial class renderEnactmentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator renderEnactmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<renderEnactmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static renderEnactmentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("type", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("author", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("number", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public renderEnactmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Вид нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XElement x = this.GetElement(XName.Get("type", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("type", "http://bus.gov.ru/types/1"), value, "type", typeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Орган, утвердивший нормативный правовой акт
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public refNsiOgsSoftType author {
                    get {
                        XElement x = this.GetElement(XName.Get("author", "http://bus.gov.ru/types/1"));
                        return ((refNsiOgsSoftType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("author", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Дата нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public System.DateTime date {
                    get {
                        XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Номер нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string number {
                    get {
                        XElement x = this.GetElement(XName.Get("number", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("number", "http://bus.gov.ru/types/1"), value, "number", numberLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование нормативного правового акта
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (type, author, date, number, name)
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("renderEnactment", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<renderEnactmentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("type", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("author", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType));
                    localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
                    localElementDictionary.Add(XName.Get("number", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class typeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private typeLocalType() {
                    }
                }
                
                private class numberLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private numberLocalType() {
                    }
                }
                
                private class nameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private nameLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (method?, content?, rate?)
            /// </para>
            /// </summary>
            public partial class informingProcedureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator informingProcedureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<informingProcedureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static informingProcedureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("method", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("content", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rate", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (method?, content?, rate?)
                /// </para>
                /// </summary>
                public informingProcedureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Способ информирования
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (method?, content?, rate?)
                /// </para>
                /// </summary>
                public string method {
                    get {
                        XElement x = this.GetElement(XName.Get("method", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("method", "http://bus.gov.ru/types/1"), value, "method", methodLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Состав размещаемой (доводимой) информации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (method?, content?, rate?)
                /// </para>
                /// </summary>
                public string content {
                    get {
                        XElement x = this.GetElement(XName.Get("content", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("content", "http://bus.gov.ru/types/1"), value, "content", contentLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Частота обновления информации
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (method?, content?, rate?)
                /// </para>
                /// </summary>
                public string rate {
                    get {
                        XElement x = this.GetElement(XName.Get("rate", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("rate", "http://bus.gov.ru/types/1"), value, "rate", rateLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("informingProcedure", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<informingProcedureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("method", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("content", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("rate", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class methodLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private methodLocalType() {
                    }
                }
                
                private class contentLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private contentLocalType() {
                    }
                }
                
                private class rateLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private rateLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (index, deviation?, valueYear, valueActual*, averagePrice?)
            /// </para>
            /// </summary>
            public partial class volumeIndexLocalType : global::bus.gov.ru.types.Item1.serviceIndex640rType, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator volumeIndexLocalType(XElement xe) { return XTypedServices.ToXTypedElement<volumeIndexLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static volumeIndexLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("index", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("deviation", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("valueActual", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("averagePrice", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (index, deviation?, valueYear, valueActual*, averagePrice?)
                /// </para>
                /// </summary>
                public volumeIndexLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Среднегодовой размер платы (цена, тариф)
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (index, deviation?, valueYear, valueActual*, averagePrice?)
                /// </para>
                /// </summary>
                public averagePriceLocalType averagePrice {
                    get {
                        XElement x = this.GetElement(XName.Get("averagePrice", "http://bus.gov.ru/types/1"));
                        return ((averagePriceLocalType)(x));
                    }
                    set {
                        this.SetElement(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("volumeIndex", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<volumeIndexLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("index", "http://bus.gov.ru/types/1"), typeof(void));
                    localElementDictionary.Add(XName.Get("deviation", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("valueYear", "http://bus.gov.ru/types/1"), typeof(void));
                    localElementDictionary.Add(XName.Get("valueActual", "http://bus.gov.ru/types/1"), typeof(void));
                    localElementDictionary.Add(XName.Get("averagePrice", "http://bus.gov.ru/types/1"), typeof(averagePriceLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                /// </para>
                /// </summary>
                public partial class averagePriceLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator averagePriceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<averagePriceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static averagePriceLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("currentYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("nextYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planFirstYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("planLastYear", "http://bus.gov.ru/types/1")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public averagePriceLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Отчетный
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> reportYear {
                        get {
                            XElement x = this.GetElement(XName.Get("reportYear", "http://bus.gov.ru/types/1"));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("reportYear", "http://bus.gov.ru/types/1"), value, "reportYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Текущий
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> currentYear {
                        get {
                            XElement x = this.GetElement(XName.Get("currentYear", "http://bus.gov.ru/types/1"));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("currentYear", "http://bus.gov.ru/types/1"), value, "currentYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Очередной
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> nextYear {
                        get {
                            XElement x = this.GetElement(XName.Get("nextYear", "http://bus.gov.ru/types/1"));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("nextYear", "http://bus.gov.ru/types/1"), value, "nextYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Первый плановый
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> planFirstYear {
                        get {
                            XElement x = this.GetElement(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), value, "planFirstYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Второй плановый
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (reportYear?, currentYear?, nextYear?, planFirstYear?, planLastYear?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<decimal> planLastYear {
                        get {
                            XElement x = this.GetElement(XName.Get("planLastYear", "http://bus.gov.ru/types/1"));
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), value, "planLastYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("averagePrice", "http://bus.gov.ru/types/1");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<averagePriceLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("reportYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("currentYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("nextYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("planFirstYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                        localElementDictionary.Add(XName.Get("planLastYear", "http://bus.gov.ru/types/1"), typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (regNum, contentIndex*, conditionIndex*)
            /// </para>
            /// </summary>
            public partial class indexesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> contentIndexField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XSimpleList<string> conditionIndexField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator indexesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<indexesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static indexesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("regNum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("contentIndex", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("conditionIndex", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (regNum, contentIndex*, conditionIndex*)
                /// </para>
                /// </summary>
                public indexesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Уникальный номер реестровой записи
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (regNum, contentIndex*, conditionIndex*)
                /// </para>
                /// </summary>
                public string regNum {
                    get {
                        XElement x = this.GetElement(XName.Get("regNum", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("regNum", "http://bus.gov.ru/types/1"), value, "regNum", regNumLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование показателя, характеризующего содержание услуги(работы)
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (regNum, contentIndex*, conditionIndex*)
                /// </para>
                /// </summary>
                public IList<string> contentIndex {
                    get {
                        if ((this.contentIndexField == null)) {
                            this.contentIndexField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("contentIndex", "http://bus.gov.ru/types/1"));
                        }
                        return this.contentIndexField;
                    }
                    set {
                        if ((value == null)) {
                            this.contentIndexField = null;
                        }
                        else {
                            if ((this.contentIndexField == null)) {
                                this.contentIndexField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("contentIndex", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.contentIndexField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Наименование показателя,  характеризующего условия (формы) услуги (выполнения работы)
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (regNum, contentIndex*, conditionIndex*)
                /// </para>
                /// </summary>
                public IList<string> conditionIndex {
                    get {
                        if ((this.conditionIndexField == null)) {
                            this.conditionIndexField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("conditionIndex", "http://bus.gov.ru/types/1"));
                        }
                        return this.conditionIndexField;
                    }
                    set {
                        if ((value == null)) {
                            this.conditionIndexField = null;
                        }
                        else {
                            if ((this.conditionIndexField == null)) {
                                this.conditionIndexField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("conditionIndex", "http://bus.gov.ru/types/1"));
                            }
                            else {
                                XTypedServices.SetList<System.String>(this.conditionIndexField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("indexes", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<indexesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("regNum", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("contentIndex", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("conditionIndex", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class regNumLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 45, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private regNumLocalType() {
                    }
                }
                
                private class contentIndexLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private contentIndexLocalType() {
                    }
                }
                
                private class conditionIndexLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private conditionIndexLocalType() {
                    }
                }
            }
        }
        
        private class earlyTerminationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private earlyTerminationLocalType() {
            }
        }
        
        private class otherInfoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private otherInfoLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
        /// </para>
        /// </summary>
        public partial class reportRequirementsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> deliveryTermField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> otherRequirementField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> otherIndicatorsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator reportRequirementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<reportRequirementsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static reportRequirementsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("periodicityTerm", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("deliveryTerm", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherRequirement", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("otherIndicators", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
            /// </para>
            /// </summary>
            public reportRequirementsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Периодичность предоставления отчетов о выполнении государственного(муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
            /// </para>
            /// </summary>
            public string periodicityTerm {
                get {
                    XElement x = this.GetElement(XName.Get("periodicityTerm", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("periodicityTerm", "http://bus.gov.ru/types/1"), value, "periodicityTerm", periodicityTermLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сроки предоставления отчетов об исполнении государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
            /// </para>
            /// </summary>
            public IList<string> deliveryTerm {
                get {
                    if ((this.deliveryTermField == null)) {
                        this.deliveryTermField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"));
                    }
                    return this.deliveryTermField;
                }
                set {
                    if ((value == null)) {
                        this.deliveryTermField = null;
                    }
                    else {
                        if ((this.deliveryTermField == null)) {
                            this.deliveryTermField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.deliveryTermField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Иные требования к отчетности о выполнении государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
            /// </para>
            /// </summary>
            public IList<string> otherRequirement {
                get {
                    if ((this.otherRequirementField == null)) {
                        this.otherRequirementField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("otherRequirement", "http://bus.gov.ru/types/1"));
                    }
                    return this.otherRequirementField;
                }
                set {
                    if ((value == null)) {
                        this.otherRequirementField = null;
                    }
                    else {
                        if ((this.otherRequirementField == null)) {
                            this.otherRequirementField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("otherRequirement", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.otherRequirementField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Иные показатели, связанные с выполнением государственного (муниципального) задания
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (periodicityTerm?, deliveryTerm*, otherRequirement*, otherIndicators*)
            /// </para>
            /// </summary>
            public IList<string> otherIndicators {
                get {
                    if ((this.otherIndicatorsField == null)) {
                        this.otherIndicatorsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("otherIndicators", "http://bus.gov.ru/types/1"));
                    }
                    return this.otherIndicatorsField;
                }
                set {
                    if ((value == null)) {
                        this.otherIndicatorsField = null;
                    }
                    else {
                        if ((this.otherIndicatorsField == null)) {
                            this.otherIndicatorsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("otherIndicators", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.otherIndicatorsField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reportRequirements", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<reportRequirementsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("periodicityTerm", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("deliveryTerm", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("otherRequirement", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("otherIndicators", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class periodicityTermLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private periodicityTermLocalType() {
                }
            }
            
            private class deliveryTermLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private deliveryTermLocalType() {
                }
            }
            
            private class otherRequirementLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private otherRequirementLocalType() {
                }
            }
            
            private class otherIndicatorsLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private otherIndicatorsLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (form, rate, supervisor)
        /// </para>
        /// </summary>
        public partial class supervisionProcedureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator supervisionProcedureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<supervisionProcedureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static supervisionProcedureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("form", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("supervisor", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (form, rate, supervisor)
            /// </para>
            /// </summary>
            public supervisionProcedureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Форма контроля
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (form, rate, supervisor)
            /// </para>
            /// </summary>
            public string form {
                get {
                    XElement x = this.GetElement(XName.Get("form", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("form", "http://bus.gov.ru/types/1"), value, "form", formLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Периодичность
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (form, rate, supervisor)
            /// </para>
            /// </summary>
            public string rate {
                get {
                    XElement x = this.GetElement(XName.Get("rate", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("rate", "http://bus.gov.ru/types/1"), value, "rate", rateLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Орган исполнительной власти, осуществляющий контроль за оказанием услуги
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (form, rate, supervisor)
            /// </para>
            /// </summary>
            public refNsiOgsSoftType1 supervisor {
                get {
                    XElement x = this.GetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"));
                    return ((refNsiOgsSoftType1)(x));
                }
                set {
                    this.SetElement(XName.Get("supervisor", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("supervisionProcedure", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<supervisionProcedureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("form", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("rate", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("supervisor", "http://bus.gov.ru/types/1"), typeof(refNsiOgsSoftType1));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class formLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private formLocalType() {
                }
            }
            
            private class rateLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 4000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private rateLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (reportGUID, periodInfo, head, date)
        /// </para>
        /// </summary>
        public partial class reportsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator reportsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<reportsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static reportsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportGUID", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("periodInfo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("head", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("date", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (reportGUID, periodInfo, head, date)
            /// </para>
            /// </summary>
            public reportsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, periodInfo, head, date)
            /// </para>
            /// </summary>
            public reportGUID reportGUID {
                get {
                    XElement x = this.GetElement(XName.Get("reportGUID", "http://bus.gov.ru/types/1"));
                    return ((reportGUID)(x));
                }
                set {
                    this.SetElement(XName.Get("reportGUID", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Сведения об отчетном периоде, за который представлен отчет о выполнении государственного задания
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, periodInfo, head, date)
            /// </para>
            /// </summary>
            public string periodInfo {
                get {
                    XElement x = this.GetElement(XName.Get("periodInfo", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("periodInfo", "http://bus.gov.ru/types/1"), value, "periodInfo", periodInfoLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Руководитель (уполномоченное лицо)
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, periodInfo, head, date)
            /// </para>
            /// </summary>
            public headLocalType head {
                get {
                    XElement x = this.GetElement(XName.Get("head", "http://bus.gov.ru/types/1"));
                    return ((headLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("head", "http://bus.gov.ru/types/1"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Дата отчета
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportGUID, periodInfo, head, date)
            /// </para>
            /// </summary>
            public System.DateTime date {
                get {
                    XElement x = this.GetElement(XName.Get("date", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElement(XName.Get("date", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("reports", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<reportsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("reportGUID", "http://bus.gov.ru/types/1"), typeof(reportGUID));
                localElementDictionary.Add(XName.Get("periodInfo", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("head", "http://bus.gov.ru/types/1"), typeof(headLocalType));
                localElementDictionary.Add(XName.Get("date", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class periodInfoLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private periodInfoLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (name, position)
            /// </para>
            /// </summary>
            public partial class headLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator headLocalType(XElement xe) { return XTypedServices.ToXTypedElement<headLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static headLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("position", "http://bus.gov.ru/types/1")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (name, position)
                /// </para>
                /// </summary>
                public headLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// ФИО
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (name, position)
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Должность
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (name, position)
                /// </para>
                /// </summary>
                public string position {
                    get {
                        XElement x = this.GetElement(XName.Get("position", "http://bus.gov.ru/types/1"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(XName.Get("position", "http://bus.gov.ru/types/1"), value, "position", positionLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("head", "http://bus.gov.ru/types/1");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<headLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
                    localElementDictionary.Add(XName.Get("position", "http://bus.gov.ru/types/1"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class nameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2000, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private nameLocalType() {
                    }
                }
                
                private class positionLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 200, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private positionLocalType() {
                    }
                }
            }
        }
        
        private class numberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 15, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private numberLocalType() {
            }
        }
        
        private class approverFirstNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private approverFirstNameLocalType() {
            }
        }
        
        private class approverLastNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private approverLastNameLocalType() {
            }
        }
        
        private class approverMiddleNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private approverMiddleNameLocalType() {
            }
        }
        
        private class approverPositionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private approverPositionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Перечень организаций, в которых открыты счета
    /// </para>
    /// <para>
    /// Regular expression: (orgName, orgAddress)
    /// </para>
    /// </summary>
    public partial class orgListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator orgListType(XElement xe) { return XTypedServices.ToXTypedElement<orgListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orgListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("orgName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("orgAddress", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Перечень организаций, в которых открыты счета
        /// </para>
        /// <para>
        /// Regular expression: (orgName, orgAddress)
        /// </para>
        /// </summary>
        public orgListType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование организации, в которой обслуживается лицевой счет
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orgName, orgAddress)
        /// </para>
        /// </summary>
        public string orgName {
            get {
                XElement x = this.GetElement(XName.Get("orgName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("orgName", "http://bus.gov.ru/types/1"), value, "orgName", orgNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Адрес организации, в которой обслуживается лицевой счет
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orgName, orgAddress)
        /// </para>
        /// </summary>
        public string orgAddress {
            get {
                XElement x = this.GetElement(XName.Get("orgAddress", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("orgAddress", "http://bus.gov.ru/types/1"), value, "orgAddress", orgAddressLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("orgListType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orgListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("orgName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("orgAddress", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class orgNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private orgNameLocalType() {
            }
        }
        
        private class orgAddressLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private orgAddressLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Версионность пакета данных 
    /// </para>
    /// <para>
    /// Regular expression: (header)
    /// </para>
    /// </summary>
    public abstract partial class versionedPacketType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string versionFixedValue = "1.7.8";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator versionedPacketType(XElement xe) {  return (versionedPacketType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static versionedPacketType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("header", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Версионность пакета данных 
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public versionedPacketType() {
        }
        
        /// <summary>
        /// <para>
        /// Заголовок информационного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public headerType header {
            get {
                XElement x = this.GetElement(XName.Get("header", "http://bus.gov.ru/types/1"));
                return ((headerType)(x));
            }
            set {
                this.SetElement(XName.Get("header", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string version {
            get {
                return versionFixedValue;
            }
            set {
                if (value.Equals(versionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, versionFixedValue);
                }
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("versionedPacketType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("header", "http://bus.gov.ru/types/1"), typeof(headerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Версионность пакета данных ПГМУ
    /// </para>
    /// <para>
    /// Regular expression: (header)
    /// </para>
    /// </summary>
    public abstract partial class versionedPacketType_ogs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string versionFixedValue = "1.7.8";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator versionedPacketType_ogs(XElement xe) {  return (versionedPacketType_ogs)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static versionedPacketType_ogs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("header", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Версионность пакета данных ПГМУ
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public versionedPacketType_ogs() {
        }
        
        /// <summary>
        /// <para>
        /// Заголовок информационного пакета
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header)
        /// </para>
        /// </summary>
        public headerType header {
            get {
                XElement x = this.GetElement(XName.Get("header", "http://bus.gov.ru/types/1"));
                return ((headerType)(x));
            }
            set {
                this.SetElement(XName.Get("header", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                return versionFixedValue;
            }
            set {
                if (value.Equals(versionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, versionFixedValue);
                }
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("versionedPacketType_ogs", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("header", "http://bus.gov.ru/types/1"), typeof(headerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Нарушение
    /// </para>
    /// <para>
    /// Regular expression: (code, level, name, description?)
    /// </para>
    /// </summary>
    public partial class violationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator violationType(XElement xe) { return XTypedServices.ToXTypedElement<violationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static violationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("level", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("description", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Нарушение
        /// </para>
        /// <para>
        /// Regular expression: (code, level, name, description?)
        /// </para>
        /// </summary>
        public violationType() {
        }
        
        /// <summary>
        /// <para>
        /// Код ошибки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, level, name, description?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", "http://bus.gov.ru/types/1"), value, "code", codeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Тип
        ///
        ///Допустимые значения:
        /// error – ошибка;
        /// warning – предупреждение.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, level, name, description?)
        /// </para>
        /// </summary>
        public string level {
            get {
                XElement x = this.GetElement(XName.Get("level", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("level", "http://bus.gov.ru/types/1"), value, "level", global::bus.gov.ru.types.Item1.violationLevelType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Название
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, level, name, description?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Описание
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, level, name, description?)
        /// </para>
        /// </summary>
        public string description {
            get {
                XElement x = this.GetElement(XName.Get("description", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("description", "http://bus.gov.ru/types/1"), value, "description", descriptionLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("violationType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<violationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("level", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("description", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class codeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private codeLocalType() {
            }
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class descriptionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private descriptionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Организация включенная в сеть учреждения
    /// </para>
    /// <para>
    /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
    /// </para>
    /// </summary>
    public partial class founderLinkTypeItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<founderNetPrivilegePeriodType> privItemsperiodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> privItemsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<authoritiesConsRegLocalType> authoritiesConsRegField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator founderLinkTypeItem(XElement xe) { return XTypedServices.ToXTypedElement<founderLinkTypeItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static founderLinkTypeItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("orgType", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ogrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ppo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("maxPrivilegesCount", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("privItemsperiod", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("privItems", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Организация включенная в сеть учреждения
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public founderLinkTypeItem() {
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                        Тип организации
        ///                        Допустимые значения:
        ///                         01 - федеральный орган государственной власти, федеральный государственный орган, орган государственной власти субъекта Российской Федерации, государственный орган субъекта Российской Федерации, орган местного самоуправления, в том числе его территориальные органы;
        ///                         02 - орган управления государственным внебюджетным фондом;
        ///                         03 - бюджетное учреждение;
        ///                         04 - организация с долей государственного участия;
        ///                         05 - унитарное предприятие;
        ///                         06 - субъект естественных монополий;
        ///                         07 - иная организация (Используется для учета негосударственных организаций);
        ///                         08 -  казенное учреждение;
        ///                         09 - государственная корпорация, государственная компания;
        ///                         10 - автономное учреждение;
        ///                         11 - организация, осуществляющая регулируемые виды деятельности;
        ///                         12 - хозяйственное общество, в уставном капитале которого доля участия Российской Федерации, субъекта Российской Федерации, муниципального образования в совокупности превышает 50 процентов;
        ///                         13 - дочернее хозяйственное общество;
        ///                         14 - специализированная организация;
        ///                         15 - оператор официального сайта;
        ///                         16 - оператор электронной площадки.
        ///                         17 - орган аудита.
        ///                         18 - банк.
        ///                         19 - орган контроля.
        ///                         20 - иное юридическое лицо.
        ///                    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public string orgType {
            get {
                XElement x = this.GetElement(XName.Get("orgType", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("orgType", "http://bus.gov.ru/types/1"), value, "orgType", global::bus.gov.ru.types.Item1.ogsOrgTypeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public string kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОГРН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public string ogrn {
            get {
                XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Публично-правовое образование
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public refNsiPpoType ppo {
            get {
                XElement x = this.GetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"));
                return ((refNsiPpoType)(x));
            }
            set {
                this.SetElement(XName.Get("ppo", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Максимальное количество привелегий
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public System.Nullable<int> maxPrivilegesCount {
            get {
                XElement x = this.GetElement(XName.Get("maxPrivilegesCount", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetElement(XName.Get("maxPrivilegesCount", "http://bus.gov.ru/types/1"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Привелегии организаций включенных в сеть за период
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public IList<founderNetPrivilegePeriodType> privItemsperiod {
            get {
                if ((this.privItemsperiodField == null)) {
                    this.privItemsperiodField = new XTypedList<founderNetPrivilegePeriodType>(this, LinqToXsdTypeManager.Instance, XName.Get("privItemsperiod", "http://bus.gov.ru/types/1"));
                }
                return this.privItemsperiodField;
            }
            set {
                if ((value == null)) {
                    this.privItemsperiodField = null;
                }
                else {
                    if ((this.privItemsperiodField == null)) {
                        this.privItemsperiodField = XTypedList<founderNetPrivilegePeriodType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("privItemsperiod", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<founderNetPrivilegePeriodType>(this.privItemsperiodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Привелегии организаций включенных в сеть
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public IList<string> privItems {
            get {
                if ((this.privItemsField == null)) {
                    this.privItemsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("privItems", "http://bus.gov.ru/types/1"));
                }
                return this.privItemsField;
            }
            set {
                if ((value == null)) {
                    this.privItemsField = null;
                }
                else {
                    if ((this.privItemsField == null)) {
                        this.privItemsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("privItems", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.privItemsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Полномочия учредителя по данным Сводного реестра
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (fullName, orgType, inn, kpp, ogrn, ppo, maxPrivilegesCount?, privItemsperiod*, privItems*, authoritiesConsReg+)
        /// </para>
        /// </summary>
        public IList<bus.gov.ru.types.Item1.founderLinkTypeItem.authoritiesConsRegLocalType> authoritiesConsReg {
            get {
                if ((this.authoritiesConsRegField == null)) {
                    this.authoritiesConsRegField = new XTypedList<authoritiesConsRegLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"));
                }
                return this.authoritiesConsRegField;
            }
            set {
                if ((value == null)) {
                    this.authoritiesConsRegField = null;
                }
                else {
                    if ((this.authoritiesConsRegField == null)) {
                        this.authoritiesConsRegField = XTypedList<authoritiesConsRegLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<authoritiesConsRegLocalType>(this.authoritiesConsRegField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("founderLinkTypeItem", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<founderLinkTypeItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("orgType", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("ppo", "http://bus.gov.ru/types/1"), typeof(refNsiPpoType));
            localElementDictionary.Add(XName.Get("maxPrivilegesCount", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("privItemsperiod", "http://bus.gov.ru/types/1"), typeof(founderNetPrivilegePeriodType));
            localElementDictionary.Add(XName.Get("privItems", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1"), typeof(authoritiesConsRegLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (authName, authCode)
        /// </para>
        /// </summary>
        public partial class authoritiesConsRegLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator authoritiesConsRegLocalType(XElement xe) { return XTypedServices.ToXTypedElement<authoritiesConsRegLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static authoritiesConsRegLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("authName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("authCode", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public authoritiesConsRegLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Наименование полномочия
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public string authName {
                get {
                    XElement x = this.GetElement(XName.Get("authName", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("authName", "http://bus.gov.ru/types/1"), value, "authName", authNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Код полномочия по справочнику "Полномочие организации"
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (authName, authCode)
            /// </para>
            /// </summary>
            public string authCode {
                get {
                    XElement x = this.GetElement(XName.Get("authCode", "http://bus.gov.ru/types/1"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("authCode", "http://bus.gov.ru/types/1"), value, "authCode", authCodeLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("authoritiesConsReg", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<authoritiesConsRegLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("authName", "http://bus.gov.ru/types/1"), typeof(string));
                localElementDictionary.Add(XName.Get("authCode", "http://bus.gov.ru/types/1"), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class authNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private authNameLocalType() {
                }
            }
            
            private class authCodeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
                
                private authCodeLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Подведомственная сеть учреждения
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, links)
    /// </para>
    /// </summary>
    public partial class founderNetType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator founderNetType(XElement xe) { return XTypedServices.ToXTypedElement<founderNetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static founderNetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placerOgrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("links", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Подведомственная сеть учреждения
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, links)
        /// </para>
        /// </summary>
        public founderNetType() {
        }
        
        /// <summary>
        /// <para>
        /// ОГРН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, links)
        /// </para>
        /// </summary>
        public string placerOgrn {
            get {
                XElement x = this.GetElement(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"), value, "placerOgrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Организации включенные в сеть
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, links)
        /// </para>
        /// </summary>
        public linksLocalType links {
            get {
                XElement x = this.GetElement(XName.Get("links", "http://bus.gov.ru/types/1"));
                return ((linksLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("links", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("founderNetType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<founderNetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("links", "http://bus.gov.ru/types/1"), typeof(linksLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (linkItems*)
        /// </para>
        /// </summary>
        public partial class linksLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<founderLinkTypeItem> linkItemsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator linksLocalType(XElement xe) { return XTypedServices.ToXTypedElement<linksLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static linksLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("linkItems", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (linkItems*)
            /// </para>
            /// </summary>
            public linksLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Организация включенная в сеть
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (linkItems*)
            /// </para>
            /// </summary>
            public IList<founderLinkTypeItem> linkItems {
                get {
                    if ((this.linkItemsField == null)) {
                        this.linkItemsField = new XTypedList<founderLinkTypeItem>(this, LinqToXsdTypeManager.Instance, XName.Get("linkItems", "http://bus.gov.ru/types/1"));
                    }
                    return this.linkItemsField;
                }
                set {
                    if ((value == null)) {
                        this.linkItemsField = null;
                    }
                    else {
                        if ((this.linkItemsField == null)) {
                            this.linkItemsField = XTypedList<founderLinkTypeItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("linkItems", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<founderLinkTypeItem>(this.linkItemsField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("links", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<linksLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("linkItems", "http://bus.gov.ru/types/1"), typeof(founderLinkTypeItem));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Привелегии организаций в подведомственной сети за период
    /// </para>
    /// <para>
    /// Regular expression: (privileage+, period+)
    /// </para>
    /// </summary>
    public partial class founderNetPrivilegePeriodType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> privileageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> periodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator founderNetPrivilegePeriodType(XElement xe) { return XTypedServices.ToXTypedElement<founderNetPrivilegePeriodType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static founderNetPrivilegePeriodType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("privileage", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("period", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Привелегии организаций в подведомственной сети за период
        /// </para>
        /// <para>
        /// Regular expression: (privileage+, period+)
        /// </para>
        /// </summary>
        public founderNetPrivilegePeriodType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (privileage+, period+)
        /// </para>
        /// </summary>
        public IList<string> privileage {
            get {
                if ((this.privileageField == null)) {
                    this.privileageField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("privileage", "http://bus.gov.ru/types/1"));
                }
                return this.privileageField;
            }
            set {
                if ((value == null)) {
                    this.privileageField = null;
                }
                else {
                    if ((this.privileageField == null)) {
                        this.privileageField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("privileage", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.privileageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (privileage+, period+)
        /// </para>
        /// </summary>
        public IList<string> period {
            get {
                if ((this.periodField == null)) {
                    this.periodField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("period", "http://bus.gov.ru/types/1"));
                }
                return this.periodField;
            }
            set {
                if ((value == null)) {
                    this.periodField = null;
                }
                else {
                    if ((this.periodField == null)) {
                        this.periodField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("period", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.periodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("founderNetPrivilegePeriodType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<founderNetPrivilegePeriodType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("privileage", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("period", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class periodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{4}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private periodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Проверка сведений учреждений
    /// </para>
    /// <para>
    /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, checkedOrgs)
    /// </para>
    /// </summary>
    public partial class checkInfoReportType : global::bus.gov.ru.types.Item1.institutionPositionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator checkInfoReportType(XElement xe) { return XTypedServices.ToXTypedElement<checkInfoReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static checkInfoReportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("positionId", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("changeDate", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placer", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("initiator", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("versionNumber", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("placerOgrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("checkedOrgs", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Проверка сведений учреждений
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, checkedOrgs)
        /// </para>
        /// </summary>
        public checkInfoReportType() {
        }
        
        /// <summary>
        /// <para>
        /// ОГРН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, checkedOrgs)
        /// </para>
        /// </summary>
        public string placerOgrn {
            get {
                XElement x = this.GetElement(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"), value, "placerOgrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Проверенные организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (positionId, changeDate, placer?, initiator?, versionNumber?, placerOgrn, checkedOrgs)
        /// </para>
        /// </summary>
        public checkedOrgsLocalType checkedOrgs {
            get {
                XElement x = this.GetElement(XName.Get("checkedOrgs", "http://bus.gov.ru/types/1"));
                return ((checkedOrgsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("checkedOrgs", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("checkInfoReportType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<checkInfoReportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("positionId", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("changeDate", "http://bus.gov.ru/types/1"), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("placer", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("initiator", "http://bus.gov.ru/types/1"), typeof(refNsiConsRegExtendedStrongType));
            localElementDictionary.Add(XName.Get("versionNumber", "http://bus.gov.ru/types/1"), typeof(int));
            localElementDictionary.Add(XName.Get("placerOgrn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("checkedOrgs", "http://bus.gov.ru/types/1"), typeof(checkedOrgsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (checkedOrg*)
        /// </para>
        /// </summary>
        public partial class checkedOrgsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<checkedOrgItem> checkedOrgField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator checkedOrgsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<checkedOrgsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static checkedOrgsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("checkedOrg", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (checkedOrg*)
            /// </para>
            /// </summary>
            public checkedOrgsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Результат проверки сведений об организации
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (checkedOrg*)
            /// </para>
            /// </summary>
            public IList<checkedOrgItem> checkedOrg {
                get {
                    if ((this.checkedOrgField == null)) {
                        this.checkedOrgField = new XTypedList<checkedOrgItem>(this, LinqToXsdTypeManager.Instance, XName.Get("checkedOrg", "http://bus.gov.ru/types/1"));
                    }
                    return this.checkedOrgField;
                }
                set {
                    if ((value == null)) {
                        this.checkedOrgField = null;
                    }
                    else {
                        if ((this.checkedOrgField == null)) {
                            this.checkedOrgField = XTypedList<checkedOrgItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("checkedOrg", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<checkedOrgItem>(this.checkedOrgField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("checkedOrgs", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<checkedOrgsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("checkedOrg", "http://bus.gov.ru/types/1"), typeof(checkedOrgItem));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Результат проверки сведений об организации
    /// </para>
    /// <para>
    /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
    /// </para>
    /// </summary>
    public partial class checkedOrgItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator checkedOrgItem(XElement xe) { return XTypedServices.ToXTypedElement<checkedOrgItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static checkedOrgItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("fullName", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("inn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kpp", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("ogrn", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("period", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("infoByPeriodsCheckResults", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Результат проверки сведений об организации
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public checkedOrgItem() {
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public string fullName {
            get {
                XElement x = this.GetElement(XName.Get("fullName", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("fullName", "http://bus.gov.ru/types/1"), value, "fullName", fullNameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", "http://bus.gov.ru/types/1"), value, "inn", global::bus.gov.ru.types.Item1.innUlType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public string kpp {
            get {
                XElement x = this.GetElement(XName.Get("kpp", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kpp", "http://bus.gov.ru/types/1"), value, "kpp", global::bus.gov.ru.types.Item1.kppType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// ОГРН
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public string ogrn {
            get {
                XElement x = this.GetElement(XName.Get("ogrn", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ogrn", "http://bus.gov.ru/types/1"), value, "ogrn", global::bus.gov.ru.types.Item1.ogrnCodeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Период формирования данных
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> period {
            get {
                XElement x = this.GetElement(XName.Get("period", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("period", "http://bus.gov.ru/types/1"), value, "period", global::bus.gov.ru.types.Item1.yearType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Результат проверки по периодам
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fullName, inn, kpp, ogrn, period?, infoByPeriodsCheckResults)
        /// </para>
        /// </summary>
        public infoByPeriodsCheckResultsLocalType infoByPeriodsCheckResults {
            get {
                XElement x = this.GetElement(XName.Get("infoByPeriodsCheckResults", "http://bus.gov.ru/types/1"));
                return ((infoByPeriodsCheckResultsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("infoByPeriodsCheckResults", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("checkedOrgItem", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<checkedOrgItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("fullName", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("inn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kpp", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("ogrn", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("period", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("infoByPeriodsCheckResults", "http://bus.gov.ru/types/1"), typeof(infoByPeriodsCheckResultsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fullNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private fullNameLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (infoByPeriodsCheckResult*)
        /// </para>
        /// </summary>
        public partial class infoByPeriodsCheckResultsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<infoByPeriodsCheckResultType> infoByPeriodsCheckResultField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator infoByPeriodsCheckResultsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<infoByPeriodsCheckResultsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static infoByPeriodsCheckResultsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("infoByPeriodsCheckResult", "http://bus.gov.ru/types/1")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (infoByPeriodsCheckResult*)
            /// </para>
            /// </summary>
            public infoByPeriodsCheckResultsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Результат проверки по периодам
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (infoByPeriodsCheckResult*)
            /// </para>
            /// </summary>
            public IList<infoByPeriodsCheckResultType> infoByPeriodsCheckResult {
                get {
                    if ((this.infoByPeriodsCheckResultField == null)) {
                        this.infoByPeriodsCheckResultField = new XTypedList<infoByPeriodsCheckResultType>(this, LinqToXsdTypeManager.Instance, XName.Get("infoByPeriodsCheckResult", "http://bus.gov.ru/types/1"));
                    }
                    return this.infoByPeriodsCheckResultField;
                }
                set {
                    if ((value == null)) {
                        this.infoByPeriodsCheckResultField = null;
                    }
                    else {
                        if ((this.infoByPeriodsCheckResultField == null)) {
                            this.infoByPeriodsCheckResultField = XTypedList<infoByPeriodsCheckResultType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("infoByPeriodsCheckResult", "http://bus.gov.ru/types/1"));
                        }
                        else {
                            XTypedServices.SetList<infoByPeriodsCheckResultType>(this.infoByPeriodsCheckResultField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("infoByPeriodsCheckResults", "http://bus.gov.ru/types/1");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<infoByPeriodsCheckResultsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("infoByPeriodsCheckResult", "http://bus.gov.ru/types/1"), typeof(infoByPeriodsCheckResultType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Результат проверки по периодам
    /// </para>
    /// <para>
    /// Regular expression: (approvedInfo*, rejectedInfo*)
    /// </para>
    /// </summary>
    public partial class infoByPeriodsCheckResultType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> approvedInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> rejectedInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator infoByPeriodsCheckResultType(XElement xe) { return XTypedServices.ToXTypedElement<infoByPeriodsCheckResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static infoByPeriodsCheckResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("approvedInfo", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("rejectedInfo", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Результат проверки по периодам
        /// </para>
        /// <para>
        /// Regular expression: (approvedInfo*, rejectedInfo*)
        /// </para>
        /// </summary>
        public infoByPeriodsCheckResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Подтвержденные сведения
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (approvedInfo*, rejectedInfo*)
        /// </para>
        /// </summary>
        public IList<string> approvedInfo {
            get {
                if ((this.approvedInfoField == null)) {
                    this.approvedInfoField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("approvedInfo", "http://bus.gov.ru/types/1"));
                }
                return this.approvedInfoField;
            }
            set {
                if ((value == null)) {
                    this.approvedInfoField = null;
                }
                else {
                    if ((this.approvedInfoField == null)) {
                        this.approvedInfoField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("approvedInfo", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.approvedInfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Отклоненные сведения
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (approvedInfo*, rejectedInfo*)
        /// </para>
        /// </summary>
        public IList<string> rejectedInfo {
            get {
                if ((this.rejectedInfoField == null)) {
                    this.rejectedInfoField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("rejectedInfo", "http://bus.gov.ru/types/1"));
                }
                return this.rejectedInfoField;
            }
            set {
                if ((value == null)) {
                    this.rejectedInfoField = null;
                }
                else {
                    if ((this.rejectedInfoField == null)) {
                        this.rejectedInfoField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("rejectedInfo", "http://bus.gov.ru/types/1"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.rejectedInfoField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("infoByPeriodsCheckResultType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<infoByPeriodsCheckResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("approvedInfo", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("rejectedInfo", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class approvedInfoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private approvedInfoLocalType() {
            }
        }
        
        private class rejectedInfoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 200, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private rejectedInfoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Даннные ППО ПГМУ
    /// </para>
    /// <para>
    /// Regular expression: (name)
    /// </para>
    /// </summary>
    public partial class PPO_OGSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PPO_OGSType(XElement xe) { return XTypedServices.ToXTypedElement<PPO_OGSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PPO_OGSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Даннные ППО ПГМУ
        /// </para>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public PPO_OGSType() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование публично-правового образования
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PPO_OGSType", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PPO_OGSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип вида деятельности
    /// </para>
    /// </summary>
    public sealed class activityTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "C",
                        "O"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private activityTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип филиала
    /// </para>
    /// </summary>
    public sealed class branchTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private branchTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код бюджета
    /// </para>
    /// </summary>
    public sealed class budgetCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{8}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private budgetCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код уровня бюджета
    /// </para>
    /// </summary>
    public sealed class budgetLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private budgetLevelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип бюджета
    /// </para>
    /// </summary>
    public sealed class budgetTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private budgetTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Статус записи
    /// </para>
    /// </summary>
    public sealed class businessStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "801",
                        "866"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private businessStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип организации
    /// </para>
    /// </summary>
    public sealed class changeRequestOrgTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "03",
                        "08",
                        "10"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private changeRequestOrgTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Специальные указания заявки на изменение
    /// </para>
    /// </summary>
    public sealed class changeRequestSpecialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private changeRequestSpecialType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код категории потребителей
    /// </para>
    /// </summary>
    public sealed class customerCategoryCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 12, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private customerCategoryCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Десятичное число
    /// </para>
    /// </summary>
    public sealed class decimalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3712)), null, 2, 0, 1000000000000000000m, null, 0, -1000000000000000000m, null, 0, null, 20, XmlSchemaWhiteSpace.Collapse));
        
        private decimalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реквизит расхождения
    /// </para>
    /// </summary>
    public sealed class differenceDetailType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20",
                        "21",
                        "22",
                        "23",
                        "24",
                        "25",
                        "26"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private differenceDetailType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип различия между исходными данными и ЕГРЮЛ
    /// </para>
    /// </summary>
    public sealed class differenceTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private differenceTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Адрес электронной почты
    /// </para>
    /// </summary>
    public sealed class eMailType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 200, null, null, 1, new string[] {
                        ".+@.+\\..+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eMailType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Направление расходов
    /// </para>
    /// </summary>
    public sealed class expenseWayType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private expenseWayType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код сферы деятельности
    /// </para>
    /// </summary>
    public sealed class fieldCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private fieldCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип регистрации учреждения на ГМУ
    /// </para>
    /// </summary>
    public sealed class gmuRegistrationTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "S",
                        "F"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private gmuRegistrationTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Глобальный идентификатор
    /// </para>
    /// </summary>
    public sealed class guidType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(33)), null, 0, 36, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private guidType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// ИНН (физическое лицо)
    /// </para>
    /// </summary>
    public sealed class innFlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{12}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private innFlType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// ИНН (юридическое лицо)
    /// </para>
    /// </summary>
    public sealed class innUlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{10}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private innUlType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип документа общей информации
    /// </para>
    /// </summary>
    public sealed class institutionInfoDocumentTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "F",
                        "E",
                        "C",
                        "S",
                        "L",
                        "I",
                        "O"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private institutionInfoDocumentTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код вида учреждения
    /// </para>
    /// </summary>
    public sealed class institutionTypeCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 7, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private institutionTypeCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код КБК
    /// </para>
    /// </summary>
    public sealed class kbkCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private kbkCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код по КЛАДР (субъект РФ, район, город, населенный пункт)
    /// </para>
    /// </summary>
    public sealed class kladrCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kladrCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Уровень КЛАДР
    /// </para>
    /// </summary>
    public sealed class kladrLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "R",
                        "D",
                        "A",
                        "C",
                        "S",
                        "L"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kladrLevelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Смешанный код по КЛАДР
    /// </para>
    /// </summary>
    public sealed class kladrMixCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}|\\d{15}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kladrMixCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код по КЛАДР (улица)
    /// </para>
    /// </summary>
    public sealed class kladrStreetCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{15}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kladrStreetCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код КОСГУ
    /// </para>
    /// </summary>
    public sealed class kosguCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kosguCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// КПП
    /// </para>
    /// </summary>
    public sealed class kppType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{9}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private kppType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Неотрицательное десятичное число
    /// </para>
    /// </summary>
    public sealed class nonNegativeDecimalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3968)), null, 2, 0, 1000000000000000000m, null, 0, -1000000000000000000m, 0m, 0, null, 20, XmlSchemaWhiteSpace.Collapse));
        
        private nonNegativeDecimalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОГРН
    /// </para>
    /// </summary>
    public sealed class ogrnCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{13}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ogrnCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Статус записи ПГМУ
    /// </para>
    /// </summary>
    public sealed class ogsBusinessStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "800",
                        "801",
                        "865",
                        "888"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ogsBusinessStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестровый номер организации в перечне ГМУ
    /// </para>
    /// </summary>
    public sealed class ogsCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{13}|\\d{3}([A-Za-zА-Яа-я0-9]){5}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ogsCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип организации
    /// </para>
    /// </summary>
    public sealed class ogsOrgTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ogsOrgTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Специальные указания перечня ГМУ
    /// </para>
    /// </summary>
    public sealed class ogsSpecialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "04",
                        "05"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ogsSpecialType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКАТО
    /// </para>
    /// </summary>
    public sealed class okatoCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okatoCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКЕИ
    /// </para>
    /// </summary>
    public sealed class okeiCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}|\\d{4}|\\d{7}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okeiCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКЭР
    /// </para>
    /// </summary>
    public sealed class okerCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{2}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okerCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКФС
    /// </para>
    /// </summary>
    public sealed class okfsCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{2}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okfsCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКОГУ
    /// </para>
    /// </summary>
    public sealed class okoguCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{7}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okoguCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Смешанный код ОКОПФ
    /// </para>
    /// </summary>
    public sealed class okopfMixCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{2}|\\d{5}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okopfMixCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Новый код ОКОПФ
    /// </para>
    /// </summary>
    public sealed class okopfNewCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{5}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okopfNewCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКПО
    /// </para>
    /// </summary>
    public sealed class okpoCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{10}|\\d{8}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okpoCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКТМО
    /// </para>
    /// </summary>
    public sealed class oktmoCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{8}|\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private oktmoCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ОКВЭД
    /// </para>
    /// </summary>
    public sealed class okvedCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{2}((\\.\\d{1,2})|(\\.\\d{2}\\.\\d{1,2}))?"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private okvedCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип информации о платежных реквизитах
    /// </para>
    /// </summary>
    public sealed class paymentDetailsTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "01",
                        "02",
                        "03"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private paymentDetailsTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Процент
    /// </para>
    /// </summary>
    public sealed class percentType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3968)), null, 2, 0, 1000000000000000000m, null, 0, -1000000000000000000m, 0m, 0, null, 20, XmlSchemaWhiteSpace.Collapse));
        
        private percentType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Телефон (мягкое ограничение)
    /// </para>
    /// </summary>
    public sealed class phoneSoftType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 204, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private phoneSoftType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Телефон (строгое ограничение)
    /// </para>
    /// </summary>
    public sealed class phoneStrongType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,10}-\\d{1,10}-\\d{1,170}(-\\d{1,10})?"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private phoneStrongType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код ППО
    /// </para>
    /// </summary>
    public sealed class ppoCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ppoCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестровый номер в ПГМУ/Сводном реестре
    /// </para>
    /// </summary>
    public sealed class regNumConsRegType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{13}|\\d{3}([A-Za-zА-Яа-я0-9]){5}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private regNumConsRegType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестровый номер в Сводном реестре
    /// </para>
    /// </summary>
    public sealed class regNumConsRegOgsType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}([A-Za-zА-Яа-я0-9]){5}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private regNumConsRegOgsType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип организации в реестре опубликованных сведений
    /// </para>
    /// </summary>
    public sealed class regPublishedOrgType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "03",
                        "10"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private regPublishedOrgType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Результат обработки данных
    /// </para>
    /// </summary>
    public sealed class resultType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "success",
                        "failure"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private resultType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код главы ГРБС (Первые три символа КБК)
    /// </para>
    /// </summary>
    public sealed class sectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private sectionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код услуги (работы)
    /// </para>
    /// </summary>
    public sealed class serviceCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 50, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private serviceCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип услуги/работы
    /// </para>
    /// </summary>
    public sealed class serviceTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "W",
                        "S"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private serviceTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Тип ЭЦП
    /// </para>
    /// </summary>
    public sealed class signatureType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CAdES-BES",
                        "CAdES-A"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private signatureType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестровый номер в СПЗ
    /// </para>
    /// </summary>
    public sealed class spzCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{11}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private spzCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Код органа ФК
    /// </para>
    /// </summary>
    public sealed class tofkCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{4}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private tofkCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Реестровый номер в УБП
    /// </para>
    /// </summary>
    public sealed class ubpCodeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ubpCodeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Гиперссылка
    /// </para>
    /// </summary>
    public sealed class urlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 1024, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private urlType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Версия формата обмена
    /// </para>
    /// </summary>
    public sealed class versionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d+(\\.\\d+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private versionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Уровень нарушения
    /// </para>
    /// </summary>
    public sealed class violationLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "error",
                        "warning"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private violationLevelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Год
    /// </para>
    /// </summary>
    public sealed class yearType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{4}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private yearType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Индекс
    /// </para>
    /// </summary>
    public sealed class zipType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{6}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zipType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Периодичность
    /// </para>
    /// </summary>
    public sealed class periodicityType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "quarter",
                        "annual"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private periodicityType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Привелегии организаций в подведомственной сети
    /// </para>
    /// </summary>
    public sealed class founderNetPrivilegeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "isCreation",
                        "isAppointment",
                        "isManageProperty",
                        "isApproval",
                        "isFinanceSupply"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private founderNetPrivilegeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Привелегии за период (перечисляемый)
    /// </para>
    /// </summary>
    public sealed class founderNetPrivilegePeriodTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "isApproval",
                        "isFinanceSupply"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private founderNetPrivilegePeriodTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатель по поступлениям и выплатам плана ФХД
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
    /// </para>
    /// </summary>
    public partial class planPaymentIndexItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator planPaymentIndexItem(XElement xe) { return XTypedServices.ToXTypedElement<planPaymentIndexItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static planPaymentIndexItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("kbk", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("financialProvision", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("item781", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("capitalInvestment", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("healthInsurance", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("serviceTotal", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("serviceGrant", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатель по поступлениям и выплатам плана ФХД
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public planPaymentIndexItem() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код по бюджетной классификации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public string kbk {
            get {
                XElement x = this.GetElement(XName.Get("kbk", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("kbk", "http://bus.gov.ru/types/1"), value, "kbk", kbkLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// всего
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public decimal total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Субсидия на финансовое обеспечение выполнения государственного (муниципального) задания
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> financialProvision {
            get {
                XElement x = this.GetElement(XName.Get("financialProvision", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("financialProvision", "http://bus.gov.ru/types/1"), value, "financialProvision", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Субсидии, предоставляемые в соответствии с абзацем вторым пункта 1 статьи 78.1 Бюджетного кодекса Российской Федерации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> item781 {
            get {
                XElement x = this.GetElement(XName.Get("item781", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("item781", "http://bus.gov.ru/types/1"), value, "item781", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Субсидии на осуществление капитальных вложений
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> capitalInvestment {
            get {
                XElement x = this.GetElement(XName.Get("capitalInvestment", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("capitalInvestment", "http://bus.gov.ru/types/1"), value, "capitalInvestment", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Средства обязательного медицинского страхования
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> healthInsurance {
            get {
                XElement x = this.GetElement(XName.Get("healthInsurance", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("healthInsurance", "http://bus.gov.ru/types/1"), value, "healthInsurance", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Поступления от оказания услуг (выполнения работ) на платной основе и от иной приносящей доход деятельности, всего
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> serviceTotal {
            get {
                XElement x = this.GetElement(XName.Get("serviceTotal", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("serviceTotal", "http://bus.gov.ru/types/1"), value, "serviceTotal", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Поступления от оказания услуг (выполнения работ) на платной основе и от иной приносящей доход деятельности, из них гранты
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, kbk?, total, financialProvision?, item781?, capitalInvestment?, healthInsurance?, serviceTotal?, serviceGrant?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> serviceGrant {
            get {
                XElement x = this.GetElement(XName.Get("serviceGrant", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("serviceGrant", "http://bus.gov.ru/types/1"), value, "serviceGrant", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("planPaymentIndexItem", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<planPaymentIndexItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("kbk", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("financialProvision", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("item781", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("capitalInvestment", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("healthInsurance", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("serviceTotal", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("serviceGrant", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class kbkLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private kbkLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатель выплат по расходам на закупку товаров, работ, услуг учреждения плана ФХД
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
    /// </para>
    /// </summary>
    public partial class expensePaymentIndexItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator expensePaymentIndexItem(XElement xe) { return XTypedServices.ToXTypedElement<expensePaymentIndexItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static expensePaymentIndexItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("year", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("totalSum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fz44Sum", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("fz223Sum", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатель выплат по расходам на закупку товаров, работ, услуг учреждения плана ФХД
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public expensePaymentIndexItem() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Год начала закупки
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> year {
            get {
                XElement x = this.GetElement(XName.Get("year", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("year", "http://bus.gov.ru/types/1"), value, "year", yearLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма выплат по расходам на закупку товаров, работ и услуг. Всего на закупки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public expenseSum totalSum {
            get {
                XElement x = this.GetElement(XName.Get("totalSum", "http://bus.gov.ru/types/1"));
                return ((expenseSum)(x));
            }
            set {
                this.SetElement(XName.Get("totalSum", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма выплат по расходам на закупку товаров, работ и услуг в соответствии с Федеральным законом № 44-ФЗ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public expenseSum fz44Sum {
            get {
                XElement x = this.GetElement(XName.Get("fz44Sum", "http://bus.gov.ru/types/1"));
                return ((expenseSum)(x));
            }
            set {
                this.SetElement(XName.Get("fz44Sum", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма выплат по расходам на закупку товаров, работ и услуг в соответствии с Федеральным законом №223-ФЗ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode?, year?, totalSum, fz44Sum, fz223Sum)
        /// </para>
        /// </summary>
        public expenseSum fz223Sum {
            get {
                XElement x = this.GetElement(XName.Get("fz223Sum", "http://bus.gov.ru/types/1"));
                return ((expenseSum)(x));
            }
            set {
                this.SetElement(XName.Get("fz223Sum", "http://bus.gov.ru/types/1"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("expensePaymentIndexItem", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<expensePaymentIndexItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("year", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("totalSum", "http://bus.gov.ru/types/1"), typeof(expenseSum));
            localElementDictionary.Add(XName.Get("fz44Sum", "http://bus.gov.ru/types/1"), typeof(expenseSum));
            localElementDictionary.Add(XName.Get("fz223Sum", "http://bus.gov.ru/types/1"), typeof(expenseSum));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{4}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
        
        private class yearLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private yearLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Сумма выплат по расходам на закупку товаров, работ и услуг
    /// </para>
    /// <para>
    /// Regular expression: (nextYear, firstPlanYear, secondPlanYear)
    /// </para>
    /// </summary>
    public partial class expenseSum : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator expenseSum(XElement xe) { return XTypedServices.ToXTypedElement<expenseSum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static expenseSum() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("nextYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("firstPlanYear", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("secondPlanYear", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Сумма выплат по расходам на закупку товаров, работ и услуг
        /// </para>
        /// <para>
        /// Regular expression: (nextYear, firstPlanYear, secondPlanYear)
        /// </para>
        /// </summary>
        public expenseSum() {
        }
        
        /// <summary>
        /// <para>
        /// на очередной финансовый год
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nextYear, firstPlanYear, secondPlanYear)
        /// </para>
        /// </summary>
        public decimal nextYear {
            get {
                XElement x = this.GetElement(XName.Get("nextYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("nextYear", "http://bus.gov.ru/types/1"), value, "nextYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// на первый год планового периода
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nextYear, firstPlanYear, secondPlanYear)
        /// </para>
        /// </summary>
        public decimal firstPlanYear {
            get {
                XElement x = this.GetElement(XName.Get("firstPlanYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("firstPlanYear", "http://bus.gov.ru/types/1"), value, "firstPlanYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// на второй год планового периода
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nextYear, firstPlanYear, secondPlanYear)
        /// </para>
        /// </summary>
        public decimal secondPlanYear {
            get {
                XElement x = this.GetElement(XName.Get("secondPlanYear", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("secondPlanYear", "http://bus.gov.ru/types/1"), value, "secondPlanYear", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("expenseSum", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<expenseSum>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("nextYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("firstPlanYear", "http://bus.gov.ru/types/1"), typeof(decimal));
            localElementDictionary.Add(XName.Get("secondPlanYear", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Показатель с суммой
    /// </para>
    /// <para>
    /// Regular expression: (name, lineCode, total?)
    /// </para>
    /// </summary>
    public partial class indexSum : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator indexSum(XElement xe) { return XTypedServices.ToXTypedElement<indexSum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static indexSum() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("name", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("lineCode", "http://bus.gov.ru/types/1")), new NamedContentModelEntity(XName.Get("total", "http://bus.gov.ru/types/1")));
        }
        
        /// <summary>
        /// <para>
        /// Показатель с суммой
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, total?)
        /// </para>
        /// </summary>
        public indexSum() {
        }
        
        /// <summary>
        /// <para>
        /// Наименование показателя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, total?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", "http://bus.gov.ru/types/1"), value, "name", nameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Код строки
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, total?)
        /// </para>
        /// </summary>
        public string lineCode {
            get {
                XElement x = this.GetElement(XName.Get("lineCode", "http://bus.gov.ru/types/1"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("lineCode", "http://bus.gov.ru/types/1"), value, "lineCode", lineCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сумма
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, lineCode, total?)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total {
            get {
                XElement x = this.GetElement(XName.Get("total", "http://bus.gov.ru/types/1"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("total", "http://bus.gov.ru/types/1"), value, "total", global::bus.gov.ru.types.Item1.decimalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("indexSum", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<indexSum>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("name", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("lineCode", "http://bus.gov.ru/types/1"), typeof(string));
            localElementDictionary.Add(XName.Get("total", "http://bus.gov.ru/types/1"), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class nameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 300, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private nameLocalType() {
            }
        }
        
        private class lineCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "\\d{3}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private lineCodeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Глобальный идентификатор
    /// </para>
    /// </summary>
    public partial class reportGUID : XTypedElement, IXMetaData {
        
         public static explicit operator reportGUID(XElement xe) { return XTypedServices.ToXTypedElement<reportGUID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Глобальный идентификатор
        /// </para>
        /// </summary>
        public reportGUID() {
        }
        
        /// <summary>
        /// <para>
        /// Глобальный идентификатор
        /// </para>
        /// </summary>
        public reportGUID(string content) {
            this.TypedValue = content;
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::bus.gov.ru.types.Item1.guidType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("reportGUID", "http://bus.gov.ru/types/1");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static reportGUID Load(string xmlFile) {
            return XTypedServices.Load<reportGUID>(xmlFile);
        }
        
        public static reportGUID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<reportGUID>(xmlFile);
        }
        
        public static reportGUID Parse(string xml) {
            return XTypedServices.Parse<reportGUID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reportGUID>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("actionGrantType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.actionGrantType));
            typeDictionary.Add(XName.Get("activityResultType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.activityResultType));
            typeDictionary.Add(XName.Get("addressSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.addressSoftType));
            typeDictionary.Add(XName.Get("addressStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.addressStrongType));
            typeDictionary.Add(XName.Get("annualBalanceF0503121Type_2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503121Type_2014));
            typeDictionary.Add(XName.Get("annualBalanceF0503121Type_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503121Type_2013));
            typeDictionary.Add(XName.Get("annualBalanceF0503127Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503127Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503127Type_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503127Type_2015));
            typeDictionary.Add(XName.Get("annualBalanceF0503130Type_2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503130Type_2014));
            typeDictionary.Add(XName.Get("annualBalanceF0503130Type_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503130Type_2013));
            typeDictionary.Add(XName.Get("annualBalanceF0503130Type_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503130Type_2015));
            typeDictionary.Add(XName.Get("annualBalanceF0503130Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503130Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503137Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503137Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503721Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503721Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503721Type_2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503721Type_2014));
            typeDictionary.Add(XName.Get("annualBalanceF0503721Type_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503721Type_2015));
            typeDictionary.Add(XName.Get("annualBalanceF0503730Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503730Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503730Type_2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503730Type_2014));
            typeDictionary.Add(XName.Get("annualBalanceF0503730Type_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503730Type_2015));
            typeDictionary.Add(XName.Get("annualBalanceF0503737Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503737Type));
            typeDictionary.Add(XName.Get("annualBalanceF0503737Type_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503737Type_2015));
            typeDictionary.Add(XName.Get("annualBalanceBudgetGeneralDataType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceBudgetGeneralDataType));
            typeDictionary.Add(XName.Get("annualBalanceBudgetGeneralDataType2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceBudgetGeneralDataType2014));
            typeDictionary.Add(XName.Get("annualBalanceBudgetGeneralDataTypeCommon2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceBudgetGeneralDataTypeCommon2014));
            typeDictionary.Add(XName.Get("annualBalanceFounderDataType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceFounderDataType));
            typeDictionary.Add(XName.Get("annualBalanceFounderDataType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceFounderDataType_2015));
            typeDictionary.Add(XName.Get("annualBalanceFounderDataType_2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceFounderDataType_2014));
            typeDictionary.Add(XName.Get("annualBalanceFounderFinSupportDataType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceFounderFinSupportDataType));
            typeDictionary.Add(XName.Get("annualBalanceFounderFinSupportDataType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceFounderFinSupportDataType_2015));
            typeDictionary.Add(XName.Get("annualBalanceGeneralDataType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType));
            typeDictionary.Add(XName.Get("annualBalanceGeneralDataType2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceGeneralDataType2014));
            typeDictionary.Add(XName.Get("annualBalanceGeneralDataTypeCommon2014", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceGeneralDataTypeCommon2014));
            typeDictionary.Add(XName.Get("branchChildType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.branchChildType));
            typeDictionary.Add(XName.Get("branchChildVSRIType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.branchChildVSRIType));
            typeDictionary.Add(XName.Get("branchParentType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.branchParentType));
            typeDictionary.Add(XName.Get("branchParentVSRIType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.branchParentVSRIType));
            typeDictionary.Add(XName.Get("budgetaryCircumstancesType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.budgetaryCircumstancesType));
            typeDictionary.Add(XName.Get("changablePositionType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.changablePositionType));
            typeDictionary.Add(XName.Get("changeIndexType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.changeIndexType));
            typeDictionary.Add(XName.Get("changeRangeType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.changeRangeType));
            typeDictionary.Add(XName.Get("changeRequestClassifierType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.changeRequestClassifierType));
            typeDictionary.Add(XName.Get("changeRequestType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.changeRequestType));
            typeDictionary.Add(XName.Get("classifierType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.classifierType));
            typeDictionary.Add(XName.Get("consRegStatType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.consRegStatType));
            typeDictionary.Add(XName.Get("credentialsFkType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.credentialsFkType));
            typeDictionary.Add(XName.Get("credentialsGmuType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.credentialsGmuType));
            typeDictionary.Add(XName.Get("credentialsOosType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.credentialsOosType));
            typeDictionary.Add(XName.Get("diverseInfoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.diverseInfoType));
            typeDictionary.Add(XName.Get("documentType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.documentType));
            typeDictionary.Add(XName.Get("paymentDetailsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.paymentDetailsType));
            typeDictionary.Add(XName.Get("paymentDetailsTargetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.paymentDetailsTargetType));
            typeDictionary.Add(XName.Get("egrulDifferenceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.egrulDifferenceType));
            typeDictionary.Add(XName.Get("employeeType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.employeeType));
            typeDictionary.Add(XName.Get("fieldType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.fieldType));
            typeDictionary.Add(XName.Get("financialActivityPlanType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.financialActivityPlanType));
            typeDictionary.Add(XName.Get("financialActivityPlan2017Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.financialActivityPlan2017Type));
            typeDictionary.Add(XName.Get("founderAuthoritiesType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.founderAuthoritiesType));
            typeDictionary.Add(XName.Get("founderAuthoritiesVSRIType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.founderAuthoritiesVSRIType));
            typeDictionary.Add(XName.Get("fundsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.fundsType));
            typeDictionary.Add(XName.Get("headerType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.headerType));
            typeDictionary.Add(XName.Get("inspectionActivityType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.inspectionActivityType));
            typeDictionary.Add(XName.Get("institutionActivityType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionActivityType));
            typeDictionary.Add(XName.Get("institutionBudgetSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionBudgetSoftType));
            typeDictionary.Add(XName.Get("institutionBudgetStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionBudgetStrongType));
            typeDictionary.Add(XName.Get("institutionCashPaymentType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionCashPaymentType));
            typeDictionary.Add(XName.Get("institutionClassifierType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionClassifierType));
            typeDictionary.Add(XName.Get("institutionEnactmentType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionEnactmentType));
            typeDictionary.Add(XName.Get("institutionEnactmentVSRIType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionEnactmentVSRIType));
            typeDictionary.Add(XName.Get("institutionInfoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionInfoType));
            typeDictionary.Add(XName.Get("institutionPositionType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.institutionPositionType));
            typeDictionary.Add(XName.Get("nsiBudgetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiBudgetType));
            typeDictionary.Add(XName.Get("nsiCustomerCategoryType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiCustomerCategoryType));
            typeDictionary.Add(XName.Get("nsiDepartments", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiDepartments));
            typeDictionary.Add(XName.Get("nsiFederalServiceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiFederalServiceType));
            typeDictionary.Add(XName.Get("nsiInstitutionTypeType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiInstitutionTypeType));
            typeDictionary.Add(XName.Get("nsiKbkBudgetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiKbkBudgetType));
            typeDictionary.Add(XName.Get("nsiKladrType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiKladrType));
            typeDictionary.Add(XName.Get("nsiKosguType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiKosguType));
            typeDictionary.Add(XName.Get("nsiOgsPositionType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOgsPositionType));
            typeDictionary.Add(XName.Get("nsiOgsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOgsType));
            typeDictionary.Add(XName.Get("nsiOkatoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkatoType));
            typeDictionary.Add(XName.Get("nsiOkeiType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkeiType));
            typeDictionary.Add(XName.Get("nsiOkerType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkerType));
            typeDictionary.Add(XName.Get("nsiOkfsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkfsType));
            typeDictionary.Add(XName.Get("nsiOkoguType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkoguType));
            typeDictionary.Add(XName.Get("nsiOkopfType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkopfType));
            typeDictionary.Add(XName.Get("nsiOkpoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkpoType));
            typeDictionary.Add(XName.Get("nsiOktmoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOktmoType));
            typeDictionary.Add(XName.Get("nsiOkvedType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiOkvedType));
            typeDictionary.Add(XName.Get("nsiPositionType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiPositionType));
            typeDictionary.Add(XName.Get("nsiPpoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiPpoType));
            typeDictionary.Add(XName.Get("nsiServiceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiServiceType));
            typeDictionary.Add(XName.Get("nsiSubjectServiceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiSubjectServiceType));
            typeDictionary.Add(XName.Get("nsiTOFK", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.nsiTOFK));
            typeDictionary.Add(XName.Get("packetResultType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.packetResultType));
            typeDictionary.Add(XName.Get("annualBalanceF0503121Type", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.annualBalanceF0503121Type));
            typeDictionary.Add(XName.Get("packetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.packetType));
            typeDictionary.Add(XName.Get("personType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.personType));
            typeDictionary.Add(XName.Get("positionResultType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.positionResultType));
            typeDictionary.Add(XName.Get("positionType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.positionType));
            typeDictionary.Add(XName.Get("ofcRegistrationInfoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.ofcRegistrationInfoType));
            typeDictionary.Add(XName.Get("ofcUserType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.ofcUserType));
            typeDictionary.Add(XName.Get("ofcOgsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.ofcOgsType));
            typeDictionary.Add(XName.Get("reportItemF0503121BaseType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503121BaseType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503121BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503121BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503121TopLevelType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503121TopLevelType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503121TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503121TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503127BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503127BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503127TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503127TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503130BaseType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130BaseType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503130BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503130BaseReferenceType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130BaseReferenceType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503130TopLevelReferenceType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130TopLevelReferenceType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503130TopLevelReferenceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130TopLevelReferenceType));
            typeDictionary.Add(XName.Get("reportItemF0503130TopLevelType_2013", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130TopLevelType_2013));
            typeDictionary.Add(XName.Get("reportItemF0503130TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503130TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503137BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503137BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503137TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503137TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503721BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503721BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503721BaseType2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503721BaseType2015));
            typeDictionary.Add(XName.Get("reportItemF0503721TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503721TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503721TopLevelType2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503721TopLevelType2015));
            typeDictionary.Add(XName.Get("reportItemF0503730BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503730BaseType2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730BaseType2015));
            typeDictionary.Add(XName.Get("reportItemF0503730TopLevelReferenceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelReferenceType));
            typeDictionary.Add(XName.Get("reportItemF0503730TopLevelReferenceType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelReferenceType_2015));
            typeDictionary.Add(XName.Get("reportItemF0503730TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503730TopLevelType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503730TopLevelType_2015));
            typeDictionary.Add(XName.Get("reportItemF0503737BaseType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503737BaseType));
            typeDictionary.Add(XName.Get("reportItemF0503737BaseReturnExpenseType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503737BaseReturnExpenseType_2015));
            typeDictionary.Add(XName.Get("reportItemF0503737TopLevelType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503737TopLevelType));
            typeDictionary.Add(XName.Get("reportItemF0503737TopLevelReturnExpenseType_2015", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportItemF0503737TopLevelReturnExpenseType_2015));
            typeDictionary.Add(XName.Get("regPublishedInfoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.regPublishedInfoType));
            typeDictionary.Add(XName.Get("refNsiBudgetSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiBudgetSoftType));
            typeDictionary.Add(XName.Get("refNsiBudgetStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiBudgetStrongType));
            typeDictionary.Add(XName.Get("refNsiCustomerCategoryType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiCustomerCategoryType));
            typeDictionary.Add(XName.Get("refNsiInstitutionTypeType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiInstitutionTypeType));
            typeDictionary.Add(XName.Get("refNsiKbkBudgetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKbkBudgetType));
            typeDictionary.Add(XName.Get("refNsiKbkType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKbkType));
            typeDictionary.Add(XName.Get("refNsiKladrSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKladrSoftType));
            typeDictionary.Add(XName.Get("refNsiKladrStreetSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKladrStreetSoftType));
            typeDictionary.Add(XName.Get("refNsiKladrStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKladrStrongType));
            typeDictionary.Add(XName.Get("refNsiKosguType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiKosguType));
            typeDictionary.Add(XName.Get("refNsiOgsExtendedSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOgsExtendedSoftType));
            typeDictionary.Add(XName.Get("refNsiConsRegExtendedSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiConsRegExtendedSoftType));
            typeDictionary.Add(XName.Get("refNsiOgsExtendedStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOgsExtendedStrongType));
            typeDictionary.Add(XName.Get("refNsiConsRegExtendedStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiConsRegExtendedStrongType));
            typeDictionary.Add(XName.Get("refNsiOgsSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOgsSoftType));
            typeDictionary.Add(XName.Get("refNsiOgsSoftType1", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOgsSoftType1));
            typeDictionary.Add(XName.Get("refNsiConsRegSoftType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiConsRegSoftType));
            typeDictionary.Add(XName.Get("refNsiOgsStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOgsStrongType));
            typeDictionary.Add(XName.Get("refNsiConsRegStrongType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiConsRegStrongType));
            typeDictionary.Add(XName.Get("refNsiOkatoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkatoType));
            typeDictionary.Add(XName.Get("refNsiOkeiType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkeiType));
            typeDictionary.Add(XName.Get("refNsiOkfsType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkfsType));
            typeDictionary.Add(XName.Get("refNsiOkoguType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkoguType));
            typeDictionary.Add(XName.Get("refNsiOkopfType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkopfType));
            typeDictionary.Add(XName.Get("refNsiOkpoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkpoType));
            typeDictionary.Add(XName.Get("refNsiOktmoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOktmoType));
            typeDictionary.Add(XName.Get("refNsiOkvedType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiOkvedType));
            typeDictionary.Add(XName.Get("refNsiPpoType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiPpoType));
            typeDictionary.Add(XName.Get("refNsiServiceType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiServiceType));
            typeDictionary.Add(XName.Get("refNsiService640rType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiService640rType));
            typeDictionary.Add(XName.Get("refNsiTofkType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.refNsiTofkType));
            typeDictionary.Add(XName.Get("requisiteType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.requisiteType));
            typeDictionary.Add(XName.Get("serviceIndexType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.serviceIndexType));
            typeDictionary.Add(XName.Get("serviceIndex640rType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.serviceIndex640rType));
            typeDictionary.Add(XName.Get("stateTaskType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.stateTaskType));
            typeDictionary.Add(XName.Get("stateTask640rType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.stateTask640rType));
            typeDictionary.Add(XName.Get("orgListType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.orgListType));
            typeDictionary.Add(XName.Get("versionedPacketType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.versionedPacketType));
            typeDictionary.Add(XName.Get("versionedPacketType_ogs", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.versionedPacketType_ogs));
            typeDictionary.Add(XName.Get("violationType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.violationType));
            typeDictionary.Add(XName.Get("founderLinkTypeItem", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.founderLinkTypeItem));
            typeDictionary.Add(XName.Get("founderNetType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.founderNetType));
            typeDictionary.Add(XName.Get("founderNetPrivilegePeriodType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.founderNetPrivilegePeriodType));
            typeDictionary.Add(XName.Get("checkInfoReportType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.checkInfoReportType));
            typeDictionary.Add(XName.Get("checkedOrgItem", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.checkedOrgItem));
            typeDictionary.Add(XName.Get("infoByPeriodsCheckResultType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.infoByPeriodsCheckResultType));
            typeDictionary.Add(XName.Get("PPO_OGSType", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.PPO_OGSType));
            typeDictionary.Add(XName.Get("planPaymentIndexItem", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.planPaymentIndexItem));
            typeDictionary.Add(XName.Get("expensePaymentIndexItem", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.expensePaymentIndexItem));
            typeDictionary.Add(XName.Get("expenseSum", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.expenseSum));
            typeDictionary.Add(XName.Get("indexSum", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.indexSum));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("reportGUID", "http://bus.gov.ru/types/1"), typeof(global::bus.gov.ru.types.Item1.reportGUID));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("reportGUID", "http://bus.gov.ru/types/1")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public reportGUID reportGUID {  get {return rootObject as reportGUID; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(reportGUID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::bus.gov.ru.types.Item1.reportGUID reportGUID {  get {return rootObject as global::bus.gov.ru.types.Item1.reportGUID; } }
        
        private XRoot() {
        }
        
        public XRoot(global::bus.gov.ru.types.Item1.reportGUID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
