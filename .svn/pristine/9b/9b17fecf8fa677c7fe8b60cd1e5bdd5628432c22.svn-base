//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5420
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace planning
{
    /// <summary>
    /// <para>
    /// Regular expression: (Объект)
    /// </para>
    /// </summary>
    public partial class ХарактеристикаГРБС : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ХарактеристикаГРБС(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ХарактеристикаГРБС>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ХарактеристикаГРБС()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект)
        /// </para>
        /// </summary>
        public ХарактеристикаГРБС()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Объект)
        /// </para>
        /// </summary>
        public Объект Объект
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Объект", ""));
                return ((Объект)(x));
            }
            set { this.SetElement(XName.Get("Объект", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ХарактеристикаГРБС", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ХарактеристикаГРБС Load(string xmlFile)
        {
            return XTypedServices.Load<ХарактеристикаГРБС>(xmlFile);
        }

        public static ХарактеристикаГРБС Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ХарактеристикаГРБС>(xmlFile);
        }

        public static ХарактеристикаГРБС Parse(string xml)
        {
            return XTypedServices.Parse<ХарактеристикаГРБС>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ХарактеристикаГРБС>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект)
    /// </para>
    /// </summary>
    public partial class СодержанияИУсловия : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator СодержанияИУсловия(XElement xe)
        {
            return XTypedServices.ToXTypedElement<СодержанияИУсловия>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static СодержанияИУсловия()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект)
        /// </para>
        /// </summary>
        public СодержанияИУсловия()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Объект)
        /// </para>
        /// </summary>
        public Объект Объект
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Объект", ""));
                return ((Объект)(x));
            }
            set { this.SetElement(XName.Get("Объект", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("СодержанияИУсловия", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static СодержанияИУсловия Load(string xmlFile)
        {
            return XTypedServices.Load<СодержанияИУсловия>(xmlFile);
        }

        public static СодержанияИУсловия Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<СодержанияИУсловия>(xmlFile);
        }

        public static СодержанияИУсловия Parse(string xml)
        {
            return XTypedServices.Parse<СодержанияИУсловия>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<СодержанияИУсловия>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class РеестровыеЗаписи : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator РеестровыеЗаписи(XElement xe)
        {
            return XTypedServices.ToXTypedElement<РеестровыеЗаписи>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static РеестровыеЗаписи()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public РеестровыеЗаписи()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("РеестровыеЗаписи", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static РеестровыеЗаписи Load(string xmlFile)
        {
            return XTypedServices.Load<РеестровыеЗаписи>(xmlFile);
        }

        public static РеестровыеЗаписи Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<РеестровыеЗаписи>(xmlFile);
        }

        public static РеестровыеЗаписи Parse(string xml)
        {
            return XTypedServices.Parse<РеестровыеЗаписи>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<РеестровыеЗаписи>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class Поставщики : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator Поставщики(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Поставщики>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Поставщики()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public Поставщики()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("Поставщики", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Поставщики Load(string xmlFile)
        {
            return XTypedServices.Load<Поставщики>(xmlFile);
        }

        public static Поставщики Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Поставщики>(xmlFile);
        }

        public static Поставщики Parse(string xml)
        {
            return XTypedServices.Parse<Поставщики>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Поставщики>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class ПоказателиОбъема : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ПоказателиОбъема(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ПоказателиОбъема>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ПоказателиОбъема()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public ПоказателиОбъема()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ПоказателиОбъема", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ПоказателиОбъема Load(string xmlFile)
        {
            return XTypedServices.Load<ПоказателиОбъема>(xmlFile);
        }

        public static ПоказателиОбъема Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ПоказателиОбъема>(xmlFile);
        }

        public static ПоказателиОбъема Parse(string xml)
        {
            return XTypedServices.Parse<ПоказателиОбъема>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ПоказателиОбъема>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class ПоказателиКачества : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ПоказателиКачества(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ПоказателиКачества>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ПоказателиКачества()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public ПоказателиКачества()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ПоказателиКачества", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ПоказателиКачества Load(string xmlFile)
        {
            return XTypedServices.Load<ПоказателиКачества>(xmlFile);
        }

        public static ПоказателиКачества Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ПоказателиКачества>(xmlFile);
        }

        public static ПоказателиКачества Parse(string xml)
        {
            return XTypedServices.Parse<ПоказателиКачества>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ПоказателиКачества>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
    /// </para>
    /// </summary>
    public partial class Объект : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<ОКВЭД> ОКВЭДField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        public static explicit operator Объект(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Объект>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Объект()
        {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public Объект()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public IList<ОКВЭД> ОКВЭД
        {
            get
            {
                if ((this.ОКВЭДField == null))
                {
                    this.ОКВЭДField = new XTypedList<ОКВЭД>(this, LinqToXsdTypeManager.Instance, XName.Get("ОКВЭД", ""));
                }
                return this.ОКВЭДField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОКВЭДField = null;
                }
                else
                {
                    if ((this.ОКВЭДField == null))
                    {
                        this.ОКВЭДField = XTypedList<ОКВЭД>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ОКВЭД", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<ОКВЭД>(this.ОКВЭДField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public РеестровыеЗаписи РеестровыеЗаписи
        {
            get
            {
                XElement x = this.GetElement(XName.Get("РеестровыеЗаписи", ""));
                return ((РеестровыеЗаписи)(x));
            }
            set { this.SetElement(XName.Get("РеестровыеЗаписи", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public ХарактеристикаГРБС ХарактеристикаГРБС
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ХарактеристикаГРБС", ""));
                return ((ХарактеристикаГРБС)(x));
            }
            set { this.SetElement(XName.Get("ХарактеристикаГРБС", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public ВидыУчреждений ВидыУчреждений
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ВидыУчреждений", ""));
                return ((ВидыУчреждений)(x));
            }
            set { this.SetElement(XName.Get("ВидыУчреждений", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public КатегорииПотребителей КатегорииПотребителей
        {
            get
            {
                XElement x = this.GetElement(XName.Get("КатегорииПотребителей", ""));
                return ((КатегорииПотребителей)(x));
            }
            set { this.SetElement(XName.Get("КатегорииПотребителей", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public СодержанияИУсловия СодержанияИУсловия
        {
            get
            {
                XElement x = this.GetElement(XName.Get("СодержанияИУсловия", ""));
                return ((СодержанияИУсловия)(x));
            }
            set { this.SetElement(XName.Get("СодержанияИУсловия", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public Поставщики Поставщики
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Поставщики", ""));
                return ((Поставщики)(x));
            }
            set { this.SetElement(XName.Get("Поставщики", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public ОКПД ОКПД
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ОКПД", ""));
                return ((ОКПД)(x));
            }
            set { this.SetElement(XName.Get("ОКПД", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public ПоказателиОбъема ПоказателиОбъема
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ПоказателиОбъема", ""));
                return ((ПоказателиОбъема)(x));
            }
            set { this.SetElement(XName.Get("ПоказателиОбъема", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public ПоказателиКачества ПоказателиКачества
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ПоказателиКачества", ""));
                return ((ПоказателиКачества)(x));
            }
            set { this.SetElement(XName.Get("ПоказателиКачества", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ОКВЭД | (РеестровыеЗаписи, ХарактеристикаГРБС, ВидыУчреждений, КатегорииПотребителей, СодержанияИУсловия)|(Поставщики, ОКВЭД, ОКПД, ПоказателиОбъема, ПоказателиКачества, НПА))?
        /// </para>
        /// </summary>
        public НПА НПА
        {
            get
            {
                XElement x = this.GetElement(XName.Get("НПА", ""));
                return ((НПА)(x));
            }
            set { this.SetElement(XName.Get("НПА", ""), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ФЗ_210_обяз
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ФЗ_210_обяз", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ФЗ_210_обяз", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ФЗ_210
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ФЗ_210", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ФЗ_210", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Условие1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Условие1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Условие1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ТипУслуг
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ТипУслуг", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ТипУслуг", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Срок_С
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Срок_С", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Срок_С", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Срок_По
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Срок_По", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Срок_По", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Содержание3
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Содержание3", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Содержание3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Содержание2
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Содержание2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Содержание2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Содержание1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Содержание1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Содержание1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Платность
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Платность", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Платность", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Орган_ПринНПА
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Орган_ПринНПА", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Орган_ПринНПА", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ОКВЭД1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ОКВЭД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ОКВЭД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Номер_НПА
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Номер_НПА", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Номер_НПА", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ЛС_слой
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ЛС_слой", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ЛС_слой", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодУсловия1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодУсловия1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("КодУсловия1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодСодержания3
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодСодержания3", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("КодСодержания3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодСодержания2
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодСодержания2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("КодСодержания2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодСодержания1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодСодержания1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("КодСодержания1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string КодОКЕИ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("КодОКЕИ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("КодОКЕИ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_РеестрЗапись
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_РеестрЗапись", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_РеестрЗапись", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_Причины
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_Причины", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_Причины", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ПостНаУчет
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ПостНаУчет", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ПостНаУчет", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_Показатель
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_Показатель", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_Показатель", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_Платность
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_Платность", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_Платность", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ОКПД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ОКПД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ОКПД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ОКОПФ
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ОКОПФ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ОКОПФ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_Категория
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_Категория", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_Категория", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ГосУслуг
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ГосУслуг", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ГосУслуг", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ВидУчр
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ВидУчр", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ВидУчр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Код_ВидДеятельности
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Код_ВидДеятельности", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Код_ВидДеятельности", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИмяУсловия1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИмяУсловия1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИмяУсловия1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИмяСодержания3
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИмяСодержания3", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИмяСодержания3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИмяСодержания2
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИмяСодержания2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИмяСодержания2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИмяСодержания1
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИмяСодержания1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИмяСодержания1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_УчредительКраткое
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_УчредительКраткое", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_УчредительКраткое", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_Учредитель
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_Учредитель", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_Учредитель", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ПоставщикКраткое
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ПоставщикКраткое", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ПоставщикКраткое", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_Поставщик
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_Поставщик", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_Поставщик", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_Показатель
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_Показатель", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_Показатель", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ППО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ППО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ППО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ОКПД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ОКПД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ОКПД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_НПА
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_НПА", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_НПА", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_Категория
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_Категория", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_Категория", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ГосУслуг
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ГосУслуг", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ГосУслуг", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ВидУчр
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ВидУчр", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ВидУчр", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Имя_ВидДеятельности
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Имя_ВидДеятельности", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Имя_ВидДеятельности", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИНН
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИНН", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИНН", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ИД
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ИД", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ИД", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ЕдИзм
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ЕдИзм", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ЕдИзм", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ДинамикаПоказателя
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ДинамикаПоказателя", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ДинамикаПоказателя", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Дата_ПринНПА
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дата_ПринНПА", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Дата_ПринНПА", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Дата_ПостНаУчет
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дата_ПостНаУчет", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Дата_ПостНаУчет", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Дата_ВступлВСилу
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Дата_ВступлВСилу", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Дата_ВступлВСилу", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ГРБС
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ГРБС", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ГРБС", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Вид_ППО
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Вид_ППО", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Вид_ППО", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Вид_НПА
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Вид_НПА", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Вид_НПА", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Internal_NullFields
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Internal_NullFields", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Internal_NullFields", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("Объект", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Объект Load(string xmlFile)
        {
            return XTypedServices.Load<Объект>(xmlFile);
        }

        public static Объект Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Объект>(xmlFile);
        }

        public static Объект Parse(string xml)
        {
            return XTypedServices.Parse<Объект>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Объект>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ОКВЭД", ""), typeof(ОКВЭД));
            localElementDictionary.Add(XName.Get("РеестровыеЗаписи", ""), typeof(РеестровыеЗаписи));
            localElementDictionary.Add(XName.Get("ХарактеристикаГРБС", ""), typeof(ХарактеристикаГРБС));
            localElementDictionary.Add(XName.Get("ВидыУчреждений", ""), typeof(ВидыУчреждений));
            localElementDictionary.Add(XName.Get("КатегорииПотребителей", ""), typeof(КатегорииПотребителей));
            localElementDictionary.Add(XName.Get("СодержанияИУсловия", ""), typeof(СодержанияИУсловия));
            localElementDictionary.Add(XName.Get("Поставщики", ""), typeof(Поставщики));
            localElementDictionary.Add(XName.Get("ОКПД", ""), typeof(ОКПД));
            localElementDictionary.Add(XName.Get("ПоказателиОбъема", ""), typeof(ПоказателиОбъема));
            localElementDictionary.Add(XName.Get("ПоказателиКачества", ""), typeof(ПоказателиКачества));
            localElementDictionary.Add(XName.Get("НПА", ""), typeof(НПА));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class ОКПД : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ОКПД(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ОКПД>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ОКПД()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public ОКПД()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ОКПД", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ОКПД Load(string xmlFile)
        {
            return XTypedServices.Load<ОКПД>(xmlFile);
        }

        public static ОКПД Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ОКПД>(xmlFile);
        }

        public static ОКПД Parse(string xml)
        {
            return XTypedServices.Parse<ОКПД>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ОКПД>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class ОКВЭД : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ОКВЭД(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ОКВЭД>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ОКВЭД()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public ОКВЭД()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ОКВЭД", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ОКВЭД Load(string xmlFile)
        {
            return XTypedServices.Load<ОКВЭД>(xmlFile);
        }

        public static ОКВЭД Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ОКВЭД>(xmlFile);
        }

        public static ОКВЭД Parse(string xml)
        {
            return XTypedServices.Parse<ОКВЭД>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ОКВЭД>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class НПА : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator НПА(XElement xe)
        {
            return XTypedServices.ToXTypedElement<НПА>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static НПА()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public НПА()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("НПА", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static НПА Load(string xmlFile)
        {
            return XTypedServices.Load<НПА>(xmlFile);
        }

        public static НПА Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<НПА>(xmlFile);
        }

        public static НПА Parse(string xml)
        {
            return XTypedServices.Parse<НПА>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<НПА>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class Коллекция : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator Коллекция(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Коллекция>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Коллекция()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public Коллекция()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ВерсияСинхронизатора
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("ВерсияСинхронизатора", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("ВерсияСинхронизатора", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("Коллекция", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Коллекция Load(string xmlFile)
        {
            return XTypedServices.Load<Коллекция>(xmlFile);
        }

        public static Коллекция Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Коллекция>(xmlFile);
        }

        public static Коллекция Parse(string xml)
        {
            return XTypedServices.Parse<Коллекция>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Коллекция>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class КатегорииПотребителей : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator КатегорииПотребителей(XElement xe)
        {
            return XTypedServices.ToXTypedElement<КатегорииПотребителей>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static КатегорииПотребителей()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public КатегорииПотребителей()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("КатегорииПотребителей", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static КатегорииПотребителей Load(string xmlFile)
        {
            return XTypedServices.Load<КатегорииПотребителей>(xmlFile);
        }

        public static КатегорииПотребителей Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<КатегорииПотребителей>(xmlFile);
        }

        public static КатегорииПотребителей Parse(string xml)
        {
            return XTypedServices.Parse<КатегорииПотребителей>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<КатегорииПотребителей>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Коллекция)
    /// </para>
    /// </summary>
    public partial class Документы : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator Документы(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Документы>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Документы()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Коллекция", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Коллекция)
        /// </para>
        /// </summary>
        public Документы()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Коллекция)
        /// </para>
        /// </summary>
        public Коллекция Коллекция
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Коллекция", ""));
                return ((Коллекция)(x));
            }
            set { this.SetElement(XName.Get("Коллекция", ""), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("Документы", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Документы Load(string xmlFile)
        {
            return XTypedServices.Load<Документы>(xmlFile);
        }

        public static Документы Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Документы>(xmlFile);
        }

        public static Документы Parse(string xml)
        {
            return XTypedServices.Parse<Документы>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Документы>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Коллекция", ""), typeof(Коллекция));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Объект+)
    /// </para>
    /// </summary>
    public partial class ВидыУчреждений : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<Объект> ОбъектField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ВидыУчреждений(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ВидыУчреждений>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ВидыУчреждений()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Объект", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public ВидыУчреждений()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Объект+)
        /// </para>
        /// </summary>
        public IList<Объект> Объект
        {
            get
            {
                if ((this.ОбъектField == null))
                {
                    this.ОбъектField = new XTypedList<Объект>(this, LinqToXsdTypeManager.Instance, XName.Get("Объект", ""));
                }
                return this.ОбъектField;
            }
            set
            {
                if ((value == null))
                {
                    this.ОбъектField = null;
                }
                else
                {
                    if ((this.ОбъектField == null))
                    {
                        this.ОбъектField = XTypedList<Объект>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Объект", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Объект>(this.ОбъектField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Класс
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Класс", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set { this.SetAttribute(XName.Get("Класс", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ВидыУчреждений", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ВидыУчреждений Load(string xmlFile)
        {
            return XTypedServices.Load<ВидыУчреждений>(xmlFile);
        }

        public static ВидыУчреждений Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ВидыУчреждений>(xmlFile);
        }

        public static ВидыУчреждений Parse(string xml)
        {
            return XTypedServices.Parse<ВидыУчреждений>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ВидыУчреждений>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set { schemaSet = value; }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get { return XTypedServices.EmptyDictionary; }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get { return elementDictionary; }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get { return XTypedServices.EmptyTypeMappingDictionary; }
        }

        public static LinqToXsdTypeManager Instance
        {
            get { return typeManagerSingleton; }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("ХарактеристикаГРБС", ""), typeof(ХарактеристикаГРБС));
            elementDictionary.Add(XName.Get("СодержанияИУсловия", ""), typeof(СодержанияИУсловия));
            elementDictionary.Add(XName.Get("РеестровыеЗаписи", ""), typeof(РеестровыеЗаписи));
            elementDictionary.Add(XName.Get("Поставщики", ""), typeof(Поставщики));
            elementDictionary.Add(XName.Get("ПоказателиОбъема", ""), typeof(ПоказателиОбъема));
            elementDictionary.Add(XName.Get("ПоказателиКачества", ""), typeof(ПоказателиКачества));
            elementDictionary.Add(XName.Get("Объект", ""), typeof(Объект));
            elementDictionary.Add(XName.Get("ОКПД", ""), typeof(ОКПД));
            elementDictionary.Add(XName.Get("ОКВЭД", ""), typeof(ОКВЭД));
            elementDictionary.Add(XName.Get("НПА", ""), typeof(НПА));
            elementDictionary.Add(XName.Get("Коллекция", ""), typeof(Коллекция));
            elementDictionary.Add(XName.Get("КатегорииПотребителей", ""), typeof(КатегорииПотребителей));
            elementDictionary.Add(XName.Get("Документы", ""), typeof(Документы));
            elementDictionary.Add(XName.Get("ВидыУчреждений", ""), typeof(ВидыУчреждений));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("ХарактеристикаГРБС", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


        public ХарактеристикаГРБС ХарактеристикаГРБС
        {
            get { return rootObject as ХарактеристикаГРБС; }
        }

        public СодержанияИУсловия СодержанияИУсловия
        {
            get { return rootObject as СодержанияИУсловия; }
        }

        public РеестровыеЗаписи РеестровыеЗаписи
        {
            get { return rootObject as РеестровыеЗаписи; }
        }

        public Поставщики Поставщики
        {
            get { return rootObject as Поставщики; }
        }

        public ПоказателиОбъема ПоказателиОбъема
        {
            get { return rootObject as ПоказателиОбъема; }
        }

        public ПоказателиКачества ПоказателиКачества
        {
            get { return rootObject as ПоказателиКачества; }
        }

        public Объект Объект
        {
            get { return rootObject as Объект; }
        }

        public ОКПД ОКПД
        {
            get { return rootObject as ОКПД; }
        }

        public ОКВЭД ОКВЭД
        {
            get { return rootObject as ОКВЭД; }
        }

        public НПА НПА
        {
            get { return rootObject as НПА; }
        }

        public Коллекция Коллекция
        {
            get { return rootObject as Коллекция; }
        }

        public КатегорииПотребителей КатегорииПотребителей
        {
            get { return rootObject as КатегорииПотребителей; }
        }

        public Документы Документы
        {
            get { return rootObject as Документы; }
        }

        public ВидыУчреждений ВидыУчреждений
        {
            get { return rootObject as ВидыУчреждений; }
        }

        private XRootNamespace()
        {
        }

        public XRootNamespace(ХарактеристикаГРБС root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(СодержанияИУсловия root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(РеестровыеЗаписи root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Поставщики root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ПоказателиОбъема root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ПоказателиКачества root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Объект root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ОКПД root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ОКВЭД root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(НПА root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Коллекция root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(КатегорииПотребителей root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Документы root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ВидыУчреждений root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get { return doc; }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


        public ХарактеристикаГРБС ХарактеристикаГРБС
        {
            get { return rootObject as ХарактеристикаГРБС; }
        }

        public СодержанияИУсловия СодержанияИУсловия
        {
            get { return rootObject as СодержанияИУсловия; }
        }

        public РеестровыеЗаписи РеестровыеЗаписи
        {
            get { return rootObject as РеестровыеЗаписи; }
        }

        public Поставщики Поставщики
        {
            get { return rootObject as Поставщики; }
        }

        public ПоказателиОбъема ПоказателиОбъема
        {
            get { return rootObject as ПоказателиОбъема; }
        }

        public ПоказателиКачества ПоказателиКачества
        {
            get { return rootObject as ПоказателиКачества; }
        }

        public Объект Объект
        {
            get { return rootObject as Объект; }
        }

        public ОКПД ОКПД
        {
            get { return rootObject as ОКПД; }
        }

        public ОКВЭД ОКВЭД
        {
            get { return rootObject as ОКВЭД; }
        }

        public НПА НПА
        {
            get { return rootObject as НПА; }
        }

        public Коллекция Коллекция
        {
            get { return rootObject as Коллекция; }
        }

        public КатегорииПотребителей КатегорииПотребителей
        {
            get { return rootObject as КатегорииПотребителей; }
        }

        public Документы Документы
        {
            get { return rootObject as Документы; }
        }

        public ВидыУчреждений ВидыУчреждений
        {
            get { return rootObject as ВидыУчреждений; }
        }

        private XRoot()
        {
        }

        public XRoot(ХарактеристикаГРБС root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(СодержанияИУсловия root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(РеестровыеЗаписи root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Поставщики root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ПоказателиОбъема root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ПоказателиКачества root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Объект root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ОКПД root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ОКВЭД root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(НПА root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Коллекция root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(КатегорииПотребителей root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Документы root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ВидыУчреждений root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get { return doc; }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}