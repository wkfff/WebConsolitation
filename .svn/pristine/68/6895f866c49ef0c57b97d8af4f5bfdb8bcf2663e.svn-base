using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text.RegularExpressions;
using Krista.FM.Server.DataPumps.Common;
using Krista.FM.Server.DataPumps.DataAccess;
using Krista.FM.ServerLibrary;

namespace Krista.FM.Server.DataPumps.Form1NMPump
{

    // ФНС - 0003 - Форма 1-НМ
    public partial class Form1NMPumpModule : TextRepPumpModuleBase
    {

        #region Поля

        #region Классификаторы

        // Районы.ФНС (d_Regions_FNS)
        private IDbDataAdapter daRegions;
        private DataSet dsRegions;
        private IClassifier clsRegions;
        private int nullRegions;
        // КД.ФНС_1НМ (d_KD_FNS3)
        private IDbDataAdapter daKd;
        private DataSet dsKd;
        private IClassifier clsKd;
        private Dictionary<string, int> kdCache = null;
        private int nullKD;

        #endregion Классификаторы

        #region Факты

        // Доходы.ФНС_1НМ_Сводный (f_D_FNS3Cons)
        private IDbDataAdapter daIncomesTotal;
        private DataSet dsIncomesTotal;
        private IFactTable fctIncomesTotal;
        // Доходы.ФНС_1НМ_Районы (f_D_FNS3Regions)
        private IDbDataAdapter daIncomesRegions;
        private DataSet dsIncomesRegions;
        private IFactTable fctIncomesRegions;

        #endregion Факты

        private ReportType reportType;
        private string regionName = string.Empty;
        private string regionCode = string.Empty;
        private List<string> strCodeList;
        private decimal[] totalSums = new decimal[8];
        private string strCode = string.Empty;

        #endregion Поля

        #region Константы

        private const decimal SUM_MULTIPLIER = 1000;

        private const string SVOD_DIR_NAME = "Сводный";
        private const string STR_DIR_NAME = "Строки";
        private const string REG_DIR_NAME = "Районы";

        private enum ReportType
        {
            Svod,
            Str,
            Region
        }

        #endregion Константы

        #region Инициализация

        public Form1NMPumpModule() : base()
		{

        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        #endregion Инициализация

        #region Закачка данных

        #region Работа с базой и кэшами

        protected override void QueryData()
        {
            InitClsDataSet(ref daKd, ref dsKd, clsKd);
            InitClsDataSet(ref daRegions, ref dsRegions, clsRegions);
            InitFactDataSet(ref daIncomesTotal, ref dsIncomesTotal, fctIncomesTotal);
            InitFactDataSet(ref daIncomesRegions, ref dsIncomesRegions, fctIncomesRegions);
            FillRowsCache(ref kdCache, dsKd.Tables[0], "RowCode");
            nullRegions = clsRegions.UpdateFixedRows(this.DB, this.SourceID);
            nullKD = clsKd.UpdateFixedRows(this.DB, this.SourceID);
        }

        protected override void UpdateData()
        {
            UpdateDataSet(daRegions, dsRegions, clsRegions);
            UpdateDataSet(daKd, dsKd, clsKd);
            UpdateDataSet(daIncomesTotal, dsIncomesTotal, fctIncomesTotal);
            UpdateDataSet(daIncomesRegions, dsIncomesRegions, fctIncomesRegions);
        }

        private const string D_KD_FNS3_GUID = "1caf981c-9032-4934-abf9-09a0e7294ac8";
        private const string D_REGIONS_FNS_GUID = "cf3202f9-e897-43ce-a158-5c617bedff55";
        private const string F_D_FNS3_CONS_GUID = "a89bbc2e-55af-41bd-b40d-206de7309ec7";
        private const string F_D_FNS3_REGIONS_GUID = "bda34101-969c-424a-8501-1e6bbca3394a";
        protected override void InitDBObjects()
        {
            this.UsedClassifiers = new IClassifier[] {
                clsKd = this.Scheme.Classifiers[D_KD_FNS3_GUID],
                clsRegions = this.Scheme.Classifiers[D_REGIONS_FNS_GUID] };
            this.UsedFacts = new IFactTable[] {
                fctIncomesTotal = this.Scheme.FactTables[F_D_FNS3_CONS_GUID],
                fctIncomesRegions = this.Scheme.FactTables[F_D_FNS3_REGIONS_GUID] };
        }

        protected override void PumpFinalizing()
        {
            ClearDataSet(ref dsIncomesTotal);
            ClearDataSet(ref dsIncomesRegions);
            ClearDataSet(ref dsKd);
            ClearDataSet(ref dsRegions);
        }

        #endregion Работа с базой и кэшами

        #region Общие функции

        private decimal CleanFactValue(string factValue)
        {
            factValue = CommonRoutines.TrimLetters(factValue.Trim().Replace('.', ',')).Trim();
            return Convert.ToDecimal(factValue.PadLeft(1, '0'));
        }

        // если оставшиеся коды в списке отсутствовали в файлах, предупреждаем
        private void ShowAbsentCode()
        {
            if (strCodeList.Count != 0)
            {
                WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning, string.Format(
                    "Отсутствуют данные по кодам строк ({0}), поэтому возможна неверная коррекция сумм.",
                    string.Join(", ", strCodeList.ToArray())));
            }
        }

        private void CheckKd()
        {
            // для отчетов в разрезе районов и строк классификатор ОКВЭД.фнс должен быть заполнен
            if ((reportType != ReportType.Svod) && (kdCache.Count <= 0))
                throw new Exception("Не заполнен классификатор КД.ФНС_1НМ - закачайте сводные отчеты");
        }

        private void CheckDirectories(DirectoryInfo dir)
        {
            DirectoryInfo[] svod = dir.GetDirectories(SVOD_DIR_NAME, SearchOption.TopDirectoryOnly);
            DirectoryInfo[] str = dir.GetDirectories(STR_DIR_NAME, SearchOption.TopDirectoryOnly);
            DirectoryInfo[] reg = dir.GetDirectories(REG_DIR_NAME, SearchOption.TopDirectoryOnly);
            // Каталог "Сводный" должен присутствовать
            if (svod.GetLength(0) == 0)
            {
                dir.CreateSubdirectory(SVOD_DIR_NAME);
                throw new Exception(string.Format("Отсутствует каталог \"{0}\"", SVOD_DIR_NAME));
            }
            if (str.GetLength(0) == 0)
                dir.CreateSubdirectory(STR_DIR_NAME);
            if (reg.GetLength(0) == 0)
                dir.CreateSubdirectory(REG_DIR_NAME);
            // Каталоги Строки и Районы для одного месяца не могут быть заполнены одновременно
            if ((str.GetLength(0) > 0 && str[0].GetFiles().GetLength(0) > 0) &&
                (reg.GetLength(0) > 0 && reg[0].GetFiles().GetLength(0) > 0))
                throw new Exception("Каталоги \"Строки\" и \"Районы\" для одного месяца не могут быть заполнены одновременно");
        }

        // Установка индивидуальной иерархии классификаторов
        private void SetClsHierarchy()
        {
            FormStandardHierarchy(ref dsKd, clsKd, ClsHierarchyMode.Standard);
            string d_KD_FNS3_HierarchyFileName = string.Empty;
            if (this.DataSource.Year >= 2012)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2012;
            else if (this.DataSource.Year >= 2011)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2011;
            else if (this.DataSource.Year >= 2010)
            {
                if (this.DataSource.Month >= 7)
                    d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile201007;
                else
                    d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2010;
            }
            else if (this.DataSource.Year >= 2009)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2009;
            else if (this.DataSource.Year >= 2008)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2008;
            else if (this.DataSource.Year >= 2007)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2007;
            else if (this.DataSource.Year >= 2006)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2006;
            else if (this.DataSource.Year >= 2005)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2005;
            else if (this.DataSource.Year >= 2004)
                d_KD_FNS3_HierarchyFileName = const_d_KD_FNS3_HierarchyFile2004;
            SetClsHierarchy(clsKd, ref dsKd, "ROWCODE", d_KD_FNS3_HierarchyFileName, ClsHierarchyMode.Special);
            SetClsHierarchy(ref dsRegions, clsRegions, null, string.Empty, ClsHierarchyMode.Standard);
        }

        // получить список кодов строк
        private void SetStrCodeList()
        {
            strCodeList = new List<string>();
            string[] strCodes = null;
            if (this.DataSource.Year >= 2012)
                strCodes = new string[] { 
                    "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090", "1100", "1110", "1120",
                    "1130", "1140", "1145", "1150", "1170", "1180", "1200", "1210", "1220", "1230", "1235", "1240", "1241", "1250", "1260",
                    "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370", "1380", "1390", "1400", "1410",
                    "1420", "1425", "1430", "1440", "1443", "1445", "1448", "1450", "1455", "1460", "1465", "1470", "1475", "1480", "1485",
                    "1490", "1500", "1505", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590", "1595", "1600",
                    "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690", "1720", "1730",
                    "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1788", "1790", "1795", "1800", "1805", "1810", "1820",
                    "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940", "1950",
                    "1951", "1952", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2030", "2035", "2037",
                    "2038", "2039", "2040", "2045", "2050", "2055", "2070", "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130",
                    "2135", "2140", "2145", "2146", "2147", "2148", "2150", "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185",
                    "2187", "2200", "2210", "2220", "2230", "2240", "2250", "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314",
                    "2316", "2320", "2322", "2325", "2330", "2332", "2334", "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354",
                    "2356", "2360", "2370", "2380", "2390", "2400", "2410", "2415", "2420", "2430", "2435", "2440", "2450", "2460", "2465",
                    "2470", "2480", "2485", "2490", "2495", "2510", "2525", "2528", "2529", "2530", "2532", "2535", "2536", "2537", "2538",
                    "2539", "2540", "2545",
                    "2600", "2605", "2610", "2615", "2620", "2630", "2640",
                    "3000", "3010", "3020", "3030", "3060", "3070", "3080", "3090", "3100", "3120", "3170", "3180", "3190", "3200",
                    "3300", "3310", "3312", "3314", "3320", "3322", "3324", "3330", "3340", "3342", "3344", "3350", "3400", "3410", "3420", "3500", "3510", "3520"};
            else
            if (this.DataSource.Year >= 2011)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090",
                    "1100", "1110", "1120", "1130", "1140", "1145", "1150", "1155", "1160", "1170", "1180", "1190", "1195", "1197", "1200",
                    "1210", "1220", "1230", "1235", "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340",
                    "1350", "1360", "1370", "1380", "1390", "1400", "1410", "1420", "1425", "1430", "1440", "1445", "1450", "1455", "1460", "1465",
                    "1470", "1475", "1480", "1485", "1490", "1495", "1500", "1505", "1510", "1520", "1530", "1540", "1550", "1560", "1570",
                    "1575", "1580", "1590", "1595", "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670",
                    "1675", "1680", "1690", "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795",
                    "1800", "1805", "1810", "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910",
                    "1920", "1930", "1940", "1950", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020",
                    "2022", "2024", "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064",
                    "2066", "2070", "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147",
                    "2148", "2150", "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230",
                    "2240", "2250", "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330",
                    "2332", "2334", "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390",
                    "2400", "2410", "2415", "2420", "2435", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2525",
                    "2528", "2530", "2545", "3000", "3010", "3020", "3030", "3060", "3070", "3080", "3090", "3100", "3120", "3170", "3180",
                    "3190", "3200", "3300", "3310", "3312", "3314", "3320", "3322", "3324", "3330", "3340", "3342", "3344", "3350", "3400",
                    "3410", "3420", "3500", "3510", "3520" };
            else if (this.DataSource.Year >= 2010)
            {
                if (this.DataSource.Month >= 7)
                {
                    strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1195", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1425", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1505", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590",
                    "1595", "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690",
                    "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020", "2022", "2024",
                    "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064", "2066", "2070",
                    "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147", "2148", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230", "2240", "2250",
                    "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330", "2332", "2334",
                    "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390", "2400", "2410",
                    "2415", "2420", "2435", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2525", "2530",
                    "2545", "3000", "3010", "3020", "3030", "3060", "3070", "3080", "3090", "3100", "3120", "3170",
                    "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3340", "3400", "3500" };
                }
                else
                {
                    strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1195", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1505", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590",
                    "1595", "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690",
                    "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020", "2022", "2024",
                    "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064", "2066", "2070",
                    "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147", "2148", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230", "2240", "2250",
                    "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330", "2332", "2334",
                    "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390", "2400", "2410",
                    "2415", "2420", "2430", "2435", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2520", "2525", "2530",
                    "2545", "3000", "3010", "3020", "3030", "3060", "3070", "3080", "3090", "3100", "3120", "3170",
                    "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3340", "3400", "3500" };
                }
            }else if (this.DataSource.Year >= 2009)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1195", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1505", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590",
                    "1595", "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690",
                    "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020", "2022", "2024",
                    "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064", "2066", "2070",
                    "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147", "2148", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230", "2240", "2250",
                    "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330", "2332", "2334",
                    "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390", "2400", "2410",
                    "2415", "2420", "2430", "2435", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2520", "2525", "2530",
                    "2540", "2545", "3000", "3010", "3020", "3030", "3050", "3060", "3070", "3080", "3090", "3100", "3110", "3120", "3170",
                    "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3340", "3400", "3500" };
            else if (this.DataSource.Year >= 2008)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1063", "1066", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590", "1595",
                    "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690",
                    "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1960", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020", "2022", "2024",
                    "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064", "2066", "2070",
                    "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147", "2148", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230", "2240", "2250",
                    "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330", "2332", "2334",
                    "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390", "2400", "2410",
                    "2415", "2420", "2430", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2520", "2525", "2530",
                    "2540", "2545", "3000", "3010", "3020", "3030", "3050", "3060", "3070", "3080", "3090", "3100", "3110", "3120", "3170",
                    "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3340", "3400", "3500" };
            else if (this.DataSource.Year >= 2007)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590", "1595",
                    "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690",
                    "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1785", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1960", "1970", "1980", "1982", "1984", "1986", "1990", "1995", "2000", "2005", "2010", "2020", "2022", "2024",
                    "2026", "2030", "2035", "2037", "2038", "2039", "2040", "2045", "2050", "2055", "2060", "2062", "2064", "2066", "2070",
                    "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2146", "2147", "2148", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2180", "2183", "2185", "2187", "2200", "2210", "2220", "2230", "2240", "2250",
                    "2260", "2270", "2280", "2290", "2300", "2310", "2312", "2314", "2316", "2320", "2322", "2325", "2330", "2332", "2334",
                    "2336", "2340", "2342", "2344", "2346", "2350", "2352", "2354", "2356", "2360", "2370", "2380", "2390", "2400", "2410",
                    "2415", "2420", "2430", "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2510", "2520", "2525", "2530",
                    "2540", "2545", "3000", "3010", "3020", "3030", "3050", "3060", "3070", "3080", "3090", "3100", "3110", "3120", "3170",
                    "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3340", "3400", "3500" };
            else if (this.DataSource.Year >= 2006)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1055", "1060", "1070", "1080", "1090", "1100",
                    "1110", "1120", "1130", "1140", "1150", "1155", "1160", "1170", "1180", "1190", "1200", "1210", "1220", "1230", "1235",
                    "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1330", "1340", "1350", "1360", "1370",
                    "1380", "1390", "1400", "1410", "1420", "1430", "1440", "1445", "1450", "1455", "1460", "1465", "1470", "1475", "1480",
                    "1485", "1490", "1495", "1500", "1510", "1520", "1530", "1540", "1550", "1560", "1570", "1575", "1580", "1590", "1595",
                    "1600", "1610", "1630", "1635", "1640", "1645", "1650", "1655", "1660", "1665", "1670", "1675", "1680", "1690", "1700",
                    "1710", "1720", "1730", "1740", "1745", "1750", "1755", "1760", "1770", "1780", "1790", "1795", "1800", "1805", "1810",
                    "1820", "1825", "1830", "1835", "1840", "1850", "1860", "1870", "1880", "1890", "1900", "1910", "1920", "1930", "1940",
                    "1950", "1960", "1970", "1980", "1990", "1995", "2000", "2005", "2010", "2020", "2030", "2035", "2040", "2045", "2050",
                    "2055", "2060", "2070", "2080", "2090", "2095", "2100", "2110", "2115", "2120", "2130", "2135", "2140", "2145", "2150",
                    "2155", "2160", "2165", "2170", "2175", "2200", "2210", "2220", "2230", "2240", "2250", "2260", "2270", "2280", "2290",
                    "2300", "2310", "2320", "2330", "2340", "2350", "2360", "2370", "2380", "2390", "2400", "2410", "2415", "2420", "2430",
                    "2440", "2450", "2460", "2470", "2480", "2485", "2490", "2495", "2500", "2510", "2520", "2530", "2540", "3000", "3010",
                    "3020", "3030", "3050", "3060", "3070", "3080", "3090", "3100", "3110", "3120", "3170", "3180", "3190", "3200", "3300",
                    "3310", "3320", "3330", "3340", "3400", "3500" };
            else if (this.DataSource.Year >= 2005)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1050", "1051", "1052", "1060", "1070", "1080", "1090",
                    "1100", "1110", "1120", "1130", "1140", "1141", "1142", "1150", "1160", "1170", "1190", "1200", "1210", "1220", "1221",
                    "1222", "1230", "1240", "1250", "1260", "1270", "1280", "1290", "1300", "1310", "1320", "1321", "1322", "1323", "1330",
                    "1331", "1332", "1333", "1340", "1350", "1351", "1352", "1353", "1360", "1365", "1370", "1372", "1375", "1377",
                    "1380", "1382", "1385", "1387", "1390", "1395", "1400", "1405", "1410", "1420", "1430", "1431", "1432", "1440", "1450",
                    "1451", "1452", "1460", "1461", "1462", "1470", "1480", "1490", "1500", "1510", "1511", "1512", "1513", "1520", "1530",
                    "1540", "1550", "1560", "1570", "1580", "1590", "1600", "1610", "1620", "1630", "1640", "1760", "1780", "1970", "1980",
                    "1990", "1991", "1992", "1993", "2000", "2010", "2020", "2021", "2022", "2023", "2024", "2025", "2030", "2040", "2050",
                    "2060", "2061", "2062", "2070", "2071", "2072", "2080", "2081", "2082", "2083", "2090", "2100", "2110", "2120", "2130",
                    "2140", "2150", "2160", "2170", "2180", "2190", "2200", "2210", "2220", "2230", "2240", "2250", "2260", "2270", "2280",
                    "2290", "2300", "2310", "2320", "2330", "2350", "2360", "2370", "2381", "2382", "2383", "2390", "2400", "2401", "2402",
                    "2403", "2405", "2410", "2420", "2425", "3000", "3010", "3020", "3030", "3050", "3060", "3070", "3080", "3090", "3100",
                    "3110", "3120", "3170", "3180", "3190", "3200", "3300", "3310", "3320", "3330", "3400", "3500", "3510", "3520" };
            else if (this.DataSource.Year >= 2004)
                strCodes = new string[] { "1010", "1020", "1030", "1040", "1041", "1042", "1043", "1044", "1045", "1046", "1060",
                    "1061", "1062", "1063", "1064", "1065", "1070", "1080", "1090", "1100", "1110", "1120", "1130", "1140", "1150", "1160",
                    "1170", "1180", "1190", "1200", "1210", "1230", "1250", "1270", "1280", "1281", "1282", "1283", "1290", "1291", "1292",
                    "1293", "1300", "1310", "1311", "1312", "1313", "1320", "1400", "1410", "1420", "1430", "1440", "1450", "1530", "1540",
                    "1550", "1560", "1570", "1571", "1572", "1580", "1590", "1600", "1610", "1620", "1630", "1640", "1650", "1660", "1670",
                    "1680", "1690", "1700", "1710", "1720", "1740", "1750", "1760", "1770", "1780", "1781", "1782", "1783", "1800",
                    "1801", "1810", "1811", "1820", "1821", "1822", "1850", "1860", "1870", "1880", "1890", "1900", "1901", "1902", "1903",
                    "1910", "1960", "1970", "1980", "1990", "2000", "2010", "2020", "2030", "2040", "2050", "2060", "2070", "2080", "2081",
                    "2082", "2090", "2100", "2110", "2120", "2130", "2140", "2150", "2160", "2170", "2180", "2190", "2200", "2210", "2220",
                    "2221", "2230", "2240", "2250", "2260", "2270", "2290", "3000", "3010", "3020", "3030", "3050", "3060", "3070", "3080",
                    "3090", "3100", "3110", "3120", "3170", "3180", "3190", "3200", "3300", "3400", "3500", "3600", "3610", "3620" };
            strCodeList.AddRange(strCodes);
        }

        #endregion Общие функции

        #region Работа с Txt

        // Возвращает индексы первого и последнего столбцов в зависимости от типа и формата отчета
        private void GetSumColumnsMargins(int sectionIndex, ref int firstColumn, ref int lastColumn)
        {
            firstColumn = 2;
            if (sectionIndex == 0)
                lastColumn = 5;
            else if (sectionIndex == 2)
                lastColumn = 10;
        }

        // Возврашает коэффициент коррекции индекса столбца в зависимости от даты отчета
        private bool GetColumnIndexCorrector(ref int correctedIndex, int columnIndex)
        {
            // Начиная с 2006 года нет столбца "Поступило в фед. бюджет в разделе 3"
            if ((this.DataSource.Year >= 2006) && (columnIndex >= 4))
            {
                correctedIndex = 1;
                return false;
            }
            return true;
        }

        // Определяет имя поля признака раздела отчета
        private string GetSectionFieldName()
        {
            switch (reportType)
            {
                case ReportType.Region:
                    return string.Empty;
                case ReportType.Str:
                    return this.FileIndexFieldName;
                case ReportType.Svod:
                    return this.TableIndexFieldName;
            }
            return string.Empty;
        }

        // Определяет номер раздела по имени файла
        private int GetSectionIndexByFileName(string fileName)
        {
            string str = fileName.ToUpper();
            if (reportType == ReportType.Str)
            {
                if (this.Region == RegionName.Karelya)
                {
                    if (str.StartsWith("S1") || str.StartsWith("S2"))
                        return 0;
                    else if (str.StartsWith("S30") || str.StartsWith("S31") || str.StartsWith("S32"))
                        return 1;
                    else if (str.StartsWith("S33") || str.StartsWith("S34") || str.StartsWith("S35") || str.StartsWith("S36"))
                        return 2;
                }
                else if (this.Region == RegionName.Saratov)
                {
                    if (str.StartsWith("D1") || str.StartsWith("D2"))
                        return 0;
                    else if (str.StartsWith("D30") || str.StartsWith("D31") || str.StartsWith("D32"))
                        return 1;
                    else if (str.StartsWith("D33") || str.StartsWith("D34") || str.StartsWith("D35") || str.StartsWith("D36"))
                        return 2;
                }
            }
            if (str.StartsWith("R1"))
                return 0;
            else if (str.StartsWith("R2"))
                return 1;
            else if (str.StartsWith("R3"))
                return 2;
            return -1;
        }

        // получить индекс секции по коду строки
        private int GetSectionIndexByStrCode(string strCode)
        {
            if (strCode.StartsWith("1") || strCode.StartsWith("2"))
                return 0;
            else if (strCode.StartsWith("30") || strCode.StartsWith("31") || strCode.StartsWith("32"))
                return 1;
            else if (strCode.StartsWith("33") || strCode.StartsWith("34") || strCode.StartsWith("35") || strCode.StartsWith("36"))
                return 2;
            return -1;
        }

        // Закачивает строку отчета
        private void PumpReportRow(DataTable factTable, DataRow row, int date, int kdID, int regionID, string totalSumName,
            ref double[] total, int sectionIndex, int firstColumn, int lastColumn)
        {
            switch (sectionIndex)
            {
                case 0:
                    #region Формирование фактов из раздела I
                    // Контрольную сумму не закачиваем. Но используем как контрольную. Если не сходится сумма по кодам и
                    // контрольная сумма, выводить сообщение в протокол как предупреждение.
                    if (GetStringCellValue(row, 0, string.Empty).ToUpper().StartsWith(totalSumName))
                    {
                        for (int j = firstColumn; j <= lastColumn; j++)
                        {
                            double sum = CommonRoutines.ReduceDouble(CommonRoutines.TrimLetters(GetStringCellValue(row, j, 0))) * 1000;
                            if (sum != total[j])
                                WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning, string.Format(
                                    "В столбце {0} раздела I сумма строк {1} не совпадает с контрольной {2}.", j + 1, total[j], sum));
                        }
                        return;
                    }
                    for (int j = firstColumn; j <= lastColumn; j++)
                    {
                        double sum = CommonRoutines.ReduceDouble(CommonRoutines.TrimLetters(GetStringCellValue(row, j, 0).Replace(" ", string.Empty))) * 1000;
                        if (sum == 0)
                            continue;
                        total[j] += sum;
                        switch (j - firstColumn)
                        {
                            // Столбец 1 в «Начислено» по уровню 00 – Все уровни
                            case 0: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", sum, "INPAYMENTSREPORT", 0, "RefYearDayUNV", date, "REFBUDGETLEVELS", 0,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 2 в «Поступило» по уровню 01 - Фед.Бюджет
                            case 1: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 1,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 3 в «Поступило» по уровню 02 – Конс.бюджет субъекта
                            case 2: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 2,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 4 в «Поступило» по уровню 14 – Конс.бюджет МО
                            case 3: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 14,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                        }
                    }
                    break;
                    #endregion Формирование фактов из раздела I
                case 2:
                    #region Формирование фактов из раздела III
                    int correctedIndex = 0;
                    // Контрольную сумму не закачиваем. Но используем как контрольную. Если не сходится сумма по кодам и контрольная сумма,
                    // выводить сообщение в протокол как предупреждение.
                    if (String.Compare(GetStringCellValue(row, 0, string.Empty), totalSumName, true) == 0)
                    {
                        for (int j = firstColumn; j <= lastColumn; j++)
                        {
                            double sum = CommonRoutines.ReduceDouble(CommonRoutines.TrimLetters(GetStringCellValue(row, j, 0).Replace(" ", string.Empty))) * 1000;
                            if (sum != total[j])
                                WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning, string.Format(
                                    "В столбце {0} раздела III сумма строк {1} не совпадает с контрольной {2}.", j + 1, total[j], sum));
                        }
                        return;
                    }
                    for (int j = firstColumn; j <= lastColumn; j++)
                    {
                        GetColumnIndexCorrector(ref correctedIndex, j);
                        double sum = CommonRoutines.ReduceDouble(CommonRoutines.TrimLetters(GetStringCellValue(row, j, 0))) * 1000;
                        if (sum == 0)
                            continue;
                        total[j] += sum;
                        int index = j - firstColumn + correctedIndex;
                        switch (index)
                        {
                            // Столбец 1 в «Начислено» по уровню 00 – Все уровни
                            case 0: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", sum, "INPAYMENTSREPORT", 0, "RefYearDayUNV", date, "REFBUDGETLEVELS", 0,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 2 в «Поступило» по уровню 00 – Все уровни
                            // Не качаем, потому что КД 3 раздела подчиняются КД 1 раздела, в котором нет значений по
                            // этому показателю и получается неправильная корректировка сумм.
                            /*case 1: PumpRow(factTable, new object[] {
                                "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 0,
                                "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;*/
                            // Столбец 3 в «Поступило» по уровню 01 - Фед.Бюджет
                            case 2: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 1,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 4 в «Поступило» по уровню 02 – Конс.бюджет субъекта
                            case 3: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 2,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 5 в «Поступило» по уровню 14 – Конс.бюджет МО
                            case 4: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 14,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 6 в «Поступило» по уровню 10 – Фед.фонд ОМС
                            case 5: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 10,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 7 в «Поступило» по уровню 11 – Территор.фонды ОМС
                            case 6: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 11,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 8 в «Поступило» по уровню 09 – фонд соц.страхования
                            case 7: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 9,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                            // Столбец 9 в «Поступило» по уровню 08 – Пенсионный фонд
                            case 8: PumpRow(factTable, new object[] {
                                    "EARNEDREPORT", 0, "INPAYMENTSREPORT", sum, "RefYearDayUNV", date, "REFBUDGETLEVELS", 8,
                                    "REFKD", kdID, "REFREGIONS", regionID, "EARNED", 0, "INPAYMENTS", 0 });
                                break;
                        }
                    }
                    break;
                    #endregion Формирование фактов из раздела III
                default:
                    break;
            }
        }

        // Закачивает датасет секции в базу
        private int PumpReportRows(DataTable reportTable, int date, int sectionIndex, string strCode)
        {
            double[] total = new double[15];
            int firstColumn = 0;
            int lastColumn = 0;
            GetSumColumnsMargins(sectionIndex, ref firstColumn, ref lastColumn);
            // Для отчетов в разрезе строк КД получаем сразу
            int kdID = nullKD;
            if (reportType == ReportType.Str)
                kdID = FindCachedRow(kdCache, strCode, nullKD);
            int rowsCount = 0;
            for (int i = 0; i < reportTable.Rows.Count; i++)
            {
                DataRow row = reportTable.Rows[i];
                int regionID = nullRegions;
                switch (reportType)
                {
                    case ReportType.Region:
                        if (string.Compare(GetStringCellValue(row, 0, string.Empty), "Контрольная сумма", true) != 0)
                        {
                            string rowCode = GetStringCellValue(row, "STRCODE", 0);
                            kdID = FindCachedRow(kdCache, rowCode, nullKD);
                            regionID = PumpOriginalRow(dsRegions, clsRegions, new object[] { "CODE", regionCode, "NAME", regionName });
                        }
                        PumpReportRow(dsIncomesRegions.Tables[0], row, date, kdID, regionID, "КОНТРОЛЬНАЯ СУММА", ref total,
                            sectionIndex, firstColumn, lastColumn);
                        break;
                    case ReportType.Str:
                        if (!GetStringCellValue(row, 0, string.Empty).ToUpper().StartsWith("ВСЕГО"))
                        {
                            regionID = PumpOriginalRow(dsRegions, clsRegions, new object[] {
                                "CODE", CommonRoutines.TrimLetters(GetStringCellValue(row, "STRCODE", 0)).PadLeft(1, '0'),
                                "NAME", GetStringCellValue(row, "NAME", constDefaultClsName) });
                        }
                        PumpReportRow(dsIncomesRegions.Tables[0], row, date, kdID, regionID, "ВСЕГО", ref total,
                            sectionIndex, firstColumn, lastColumn);
                        break;
                    case ReportType.Svod:
                        if (string.Compare(GetStringCellValue(row, 0, string.Empty), "Контрольная сумма", true) != 0)
                        {
                            string rowCode = GetStringCellValue(row, "STRCODE", 0);
                            strCodeList.Remove(rowCode);
                            kdID = PumpCachedRow(kdCache, dsKd.Tables[0], clsKd, rowCode, new object[] {
                                "CODESTR", CommonRoutines.TrimLetters(GetStringCellValue(row, "KD", 0)).PadLeft(1, '0'),
                                "NAME", GetStringCellValue(row, "NAME", constDefaultClsName),
                                "ROWCODE", rowCode });
                        }
                        PumpReportRow(dsIncomesTotal.Tables[0], row, date, kdID, regionID, "КОНТРОЛЬНАЯ СУММА", ref total,
                            sectionIndex, firstColumn, lastColumn);
                        break;
                }
                rowsCount++;
            }
            return rowsCount;
        }

        // Закачивает текстовые файлы
        private void PumpTxtFiles(DirectoryInfo dir, string xmlSettingsFile)
        {
            int rowsCount = 0;
            int processedReports = 0;
            int date = 0;
            string processedFiles = "<Нет данных>";
            try
            {
                try
                {
                    this.CallTXTSorcerer(xmlSettingsFile, dir.FullName);
                }
                catch (FilesNotFoundException)
                {
                    return;
                }
                catch (Exception ex)
                {
                    WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning, "Закачка данных отчета закончена", ex);
                    return;
                }
                // Определяем имя поля признака раздела отчета
                string sectionFieldName = GetSectionFieldName();
                if (sectionFieldName == string.Empty) return;
                if (GetTotalRecs() == 0)
                {
                    WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning,
                        "В результате разбора файлов текстовых отчетов не получено данных.");
                    return;
                }
                int filesCount = dir.GetDirectories(STR_DIR_NAME)[0].GetFiles("*.*", SearchOption.AllDirectories).GetLength(0);
                // Закачиваем полученные данные
                // Первая таблица датасета - служебная, ее не берем
                int tablesCount = this.ResultDataSet.Tables.Count;
                int index = 0;
                for (int i = 1; i < tablesCount; i++)
                {
                    // получаем таблицу
                    DataTable dt = this.ResultDataSet.Tables[i];
                    if (dt.Rows.Count == 0)
                        continue;
                    // получаем код строки
                    string strCode = string.Empty;
                    if (reportType == ReportType.Str && dt.Rows.Count > 0)
                        strCode = GetStringCellValue(dt.Rows[0], "FIXEDSTRCODE", 0).Split('-')[0].Trim();
                    // получаем индекс строки первой служебной таблицы, где находится имя текущего обрабатываемого файла
                    if (reportType == ReportType.Svod)
                        index = 0;
                    else if (filesCount > 3)
                        // файл = одна таблица
                        index = i - 1;
                    else
                    {
                        // файле = таблицы по всему разделу (получаем нужный файл по разделу, а раздел по коду строки)
                        index = GetSectionIndexByStrCode(strCode);
                        if (index == -1)
                            continue;
                    }
                    // получаем имя файла
                    processedFiles = GetStringCellValue(this.ResultDataSet.Tables[0].Rows[index], "FILES", "<Нет данных>");
                    SetProgress(tablesCount - 1, i, string.Format("Обработка файлов {0}", processedFiles), string.Format("Таблица {0} из {1}", i, tablesCount - 1));
                    // проверяем дату отчета
                    string str = this.FixedParameters[index]["ReportDate"].Value;
                    if (str != string.Empty)
                        date = CommonRoutines.DecrementDate(Convert.ToInt32(str));
                    else
                        throw new Exception(string.Format("В файле(ах) отчета {0} отсутствует дата.", processedFiles));
                    CheckDataSourceByDate(date, true);
                    // Номер раздела отчета
                    int sectionIndex = Convert.ToInt32(dt.Rows[0][sectionFieldName]);
                    if (reportType == ReportType.Str)
                        sectionIndex = GetSectionIndexByFileName(processedFiles);
                    // Раздел 2 не закачиваем
                    if (sectionIndex == 1)
                        continue;
                    if (reportType == ReportType.Str)
                        strCodeList.Remove(strCode);
                    rowsCount += PumpReportRows(dt, date, sectionIndex, strCode);
                    processedReports++;
                }
                WriteEventIntoDataPumpProtocol(
                    DataPumpEventKind.dpeSuccessfullFinishFilePump, string.Format(
                        "Закачка данных текстовых отчетов закончена. Обработано отчетов: {0} ({1} строк).",
                        processedReports, rowsCount));
            }
            catch (Exception ex)
            {
                WriteEventIntoDataPumpProtocol(
                    DataPumpEventKind.dpeFinishFilePumpWithError, string.Format(
                        "Закачка данных текстовых отчетов закончена с ошибками. \n" +
                        "На момент возникновения ошибки достигнуты следующие результаты. " +
                        "Обработано отчетов: {0} ({1} строк). Ошибка возникла при обработке файлов {2}.",
                        processedReports, rowsCount, processedFiles), ex);
                throw;
            }
        }

        // Закачивает текстовые файлы
        private void ProcessTxtFiles(DirectoryInfo dir)
        {
            // должны быть представлены все коды по строкам разделов 1 и 3, заполняем список кодов и проверяем на их присутствие в файлах
            SetStrCodeList();
            try
            {
                if (dir.GetDirectories(STR_DIR_NAME)[0].GetFiles("*.*", SearchOption.AllDirectories).GetLength(0) == 0)
                    strCodeList.Clear();
                switch (this.Region)
                {
                    case RegionName.Karelya:
                        reportType = ReportType.Svod;
                        PumpTxtFiles(dir, xmlSettingsForm1NMSvod2005Karelya);
                        reportType = ReportType.Str;
                        PumpTxtFiles(dir, xmlSettingsForm1NMStr2005Karelya);
                        break;
                    case RegionName.Saratov:
                        reportType = ReportType.Svod;
                        PumpTxtFiles(dir, xmlSettingsForm1NMSvod2005Saratov);
                        reportType = ReportType.Str;
                        PumpTxtFiles(dir, xmlSettingsForm1NMStr2005Saratov);
                        break;
                    default:
                        reportType = ReportType.Svod;
                        if (this.DataSource.Year < 2006)
                            PumpTxtFiles(dir, xmlSettingsForm1NMSvod2005);
                        else
                            PumpTxtFiles(dir, xmlSettingsForm1NMSvod2006);
                        reportType = ReportType.Str;
                        if (this.DataSource.Year < 2006)
                            PumpTxtFiles(dir, xmlSettingsForm1NMStr2005);
                        else
                            PumpTxtFiles(dir, xmlSettingsForm1NMStr2006);
                        break;
                }
                ShowAbsentCode();
            }
            finally
            {
                strCodeList.Clear();
            }
        }

        #endregion Работа с Txt

        #region Работа с Xls

        // обнуление итоговой суммы
        private void SetNullTotalSum()
        {
            int sumsCount = totalSums.GetLength(0);
            for (int i = 0; i < sumsCount; i++)
            {
                totalSums[i] = 0;
            }
        }

        // проверка контрольной суммы
        private void CheckTotalSum(decimal totalSum, decimal controlSum, int column, string comment)
        {
            if (totalSum != controlSum)
            {
                WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning, string.Format(
                    "Контрольная сумма {0:F} не сходится с итоговой {1:F} по стобцу {2} {3}",
                    controlSum, totalSum, column, comment));
            }
        }

        private void CheckXlsTotalSum(Dictionary<string, string> dataRow, int sectionIndex)
        {
            string comment = string.Format("раздела {0}", sectionIndex + 1);
            if (reportType == ReportType.Str)
                comment = string.Format("в разрезе кода строки {0} {1}", dataRow["StrCode"], comment);
            if (sectionIndex == 0)
            {
                CheckTotalSum(totalSums[0], CleanFactValue(dataRow["Earned"]), 1, comment);
                CheckTotalSum(totalSums[1], CleanFactValue(dataRow["Inpayments1"]), 2, comment);
                CheckTotalSum(totalSums[2], CleanFactValue(dataRow["Inpayments2"]), 3, comment);
                CheckTotalSum(totalSums[3], CleanFactValue(dataRow["Inpayments14"]), 4, comment);
            }
            else if (sectionIndex == 1)
            {
                CheckTotalSum(totalSums[0], CleanFactValue(dataRow["Earned"]), 1, comment);
                CheckTotalSum(totalSums[1], CleanFactValue(dataRow["Inpayments"]), 2, comment);
            }
            else if (sectionIndex == 2)
            {
                CheckTotalSum(totalSums[0], CleanFactValue(dataRow["Earned"]), 1, comment);
                int offset = 0;
                if (this.DataSource.Year < 2006)
                {
                    CheckTotalSum(totalSums[7], CleanFactValue(dataRow["Inpayments1"]), 3, comment);
                    offset = 1;
                }
                CheckTotalSum(totalSums[1], CleanFactValue(dataRow["Inpayments2"]), 3 + offset, comment);
                CheckTotalSum(totalSums[2], CleanFactValue(dataRow["Inpayments14"]), 4 + offset, comment);
                CheckTotalSum(totalSums[3], CleanFactValue(dataRow["Inpayments10"]), 5 + offset, comment);
                CheckTotalSum(totalSums[4], CleanFactValue(dataRow["Inpayments11"]), 6 + offset, comment);
                CheckTotalSum(totalSums[5], CleanFactValue(dataRow["Inpayments9"]), 7 + offset, comment);
                CheckTotalSum(totalSums[6], CleanFactValue(dataRow["Inpayments8"]), 8 + offset, comment);
            }
        }

        private void PumpFactRow(string factField, decimal factValue, int refDate,
            int refKd, int refBudget, int refRegions, int sumIndex, int sectionIndex)
        {
            if (factValue == 0)
                return;

            totalSums[sumIndex] += factValue;
            factValue *= SUM_MULTIPLIER;

            // 1) для 2-го раздела не качаем данные на уровень 0 - "Все уровни"
            // это делается для того, чтобы избежать гемора при корректировке сумм на этапе обработки
            // т.к. для этого уровня всё равно должны получиться суммы = 0, то проще их вообще не качать
            // при корректировке будут добавляться суммы на уровни 0-"Все уровни", 3-"Бюджет субъекта" и 7-"Внебюджетные фонды"
            // и всё встанет на свои места
            // 2) делаем этот изврат здесь, чтобы не заморачиваться с контрольной суммой
            if ((sectionIndex == 1) && (refBudget == 0))
                return;

            if (reportType == ReportType.Svod)
            {
                object[] mapping = new object[] {
                    factField, factValue, "RefYearDayUNV", refDate,
                    "RefKD", refKd, "RefBudgetLevels", refBudget };
                PumpRow(dsIncomesTotal.Tables[0], mapping);
            }
            else
            {
                object[] mapping = new object[] {
                    factField, factValue, "RefYearDayUNV", refDate, "RefKD", refKd,
                    "RefBudgetLevels", refBudget, "RefRegions", refRegions };
                PumpRow(dsIncomesRegions.Tables[0], mapping);
                if (dsIncomesRegions.Tables[0].Rows.Count >= MAX_DS_RECORDS_AMOUNT)
                {
                    UpdateData();
                    ClearDataSet(daIncomesRegions, ref dsIncomesRegions);
                }
            }
        }

        private int GetRefBudgetByStrCode(string strCode)
        {
            strCode = strCode.Trim();
            if (this.DataSource.Year >= 2010)
            {
                switch (strCode)
                {
                    case "3010":
                    case "3020":
                    case "3030":
                    case "3170":
                        return 8;
                    case "3070":
                        return 1;
                    case "3080":
                    case "3180":
                        return 9;
                    case "3090":
                    case "3190":
                        return 10;
                    case "3100":
                    case "3200":
                        return 11;
                }
            }
            else
            {
                switch (strCode)
                {
                    case "3020":
                        return 1;
                    case "3030":
                    case "3180":
                        return 9;
                    case "3050":
                    case "3190":
                        return 10;
                    case "3060":
                    case "3200":
                        return 11;
                    case "3070":
                    case "3080":
                    case "3090":
                    case "3100":
                    case "3110":
                    case "3170":
                        return 8;
                }
            }
            return 0;
        }

        private Regex regExRemoveNoDigit = new Regex(@"\D", RegexOptions.IgnoreCase);
        private int PumpXlsKd(Dictionary<string, string> dataRow)
        {
            string strCode = dataRow["StrCode"].Trim();
            if (strCode == string.Empty)
                return -1;
            if (strCodeList.Contains(strCode))
                strCodeList.Remove(strCode);
            if (reportType != ReportType.Svod)
                return FindCachedRow(kdCache, strCode, nullKD);

            string name = dataRow["Name"].Trim();
            if (name == string.Empty)
                name = constDefaultClsName;
            string kdCode = regExRemoveNoDigit.Replace(dataRow["KD"], string.Empty).PadLeft(1, '0');
            object[] mapping = new object[] { "CodeStr", kdCode, "Name", name, "RowCode", strCode };
            return PumpCachedRow(kdCache, dsKd.Tables[0], clsKd, strCode, mapping);
        }

        private int PumpXlsRegions(Dictionary<string, string> dataRow)
        {
            string code = CommonRoutines.TrimLetters(dataRow["RegionCode"].Trim()).PadLeft(1, '0');
            string name = dataRow["Name"].Trim();
            if (name == string.Empty)
                name = constDefaultClsName;
            return PumpOriginalRow(dsRegions, clsRegions, new object[] { "Code", code, "Name", name });
        }

        private void PumpXlsRow(Dictionary<string, string> dataRow, int sectionIndex, int refDate)
        {
            int refKd = PumpXlsKd(dataRow);
            if (refKd == -1)
                return;
            int refRegions = nullRegions;
            if (reportType == ReportType.Str)
                refRegions = PumpXlsRegions(dataRow);

            #region Раздел I
            if (sectionIndex == 0)
            {
                // Столбец 1 в «Начислено» по уровню 00 – Все уровни
                decimal factValue = CleanFactValue(dataRow["Earned"]);
                PumpFactRow("EarnedReport", factValue, refDate, refKd, 0, refRegions, 0, sectionIndex);
                // Столбец 2 в «Поступило» по уровню 01 - Фед.Бюджет
                factValue = CleanFactValue(dataRow["Inpayments1"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 1, refRegions, 1, sectionIndex);
                // Столбец 3 в «Поступило» по уровню 02 – Конс.бюджет субъекта
                factValue = CleanFactValue(dataRow["Inpayments2"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 2, refRegions, 2, sectionIndex);
                // Столбец 4 в «Поступило» по уровню 14 – Конс.бюджет МО
                factValue = CleanFactValue(dataRow["Inpayments14"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 14, refRegions, 3, sectionIndex);
            }
            #endregion Раздел I
            #region Раздел II
            else if (sectionIndex == 1)
            {
                int refBudget = GetRefBudgetByStrCode(dataRow["StrCode"]);
                // Столбец 1 в «Начислено»
                decimal factValue = CleanFactValue(dataRow["Earned"]);
                PumpFactRow("EarnedReport", factValue, refDate, refKd, refBudget, refRegions, 0, sectionIndex);
                // Столбец 2 в «Поступило»
                factValue = CleanFactValue(dataRow["Inpayments"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, refBudget, refRegions, 1, sectionIndex);
            }
            #endregion Раздел II
            #region Раздел III
            else if (sectionIndex == 2)
            {
                // в «Начислено» по уровню 00 – Все уровни
                decimal factValue = CleanFactValue(dataRow["Earned"]);
                PumpFactRow("EarnedReport", factValue, refDate, refKd, 0, refRegions, 0, sectionIndex);
                // в «Поступило» по уровню 02 – Конс.бюджет субъекта
                factValue = CleanFactValue(dataRow["Inpayments2"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 2, refRegions, 1, sectionIndex);
                // в «Поступило» по уровню 14 – Конс.бюджет МО
                factValue = CleanFactValue(dataRow["Inpayments14"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 14, refRegions, 2, sectionIndex);
                // в «Поступило» по уровню 10 – Фед.фонд ОМС
                factValue = CleanFactValue(dataRow["Inpayments10"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 10, refRegions, 3, sectionIndex);
                // в «Поступило» по уровню 11 – Территор.фонды ОМС
                factValue = CleanFactValue(dataRow["Inpayments11"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 11, refRegions, 4, sectionIndex);
                // в «Поступило» по уровню 09 – фонд соц.страхования
                factValue = CleanFactValue(dataRow["Inpayments9"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 9, refRegions, 5, sectionIndex);
                // в «Поступило» по уровню 08 – Пенсионный фонд
                factValue = CleanFactValue(dataRow["Inpayments8"]);
                PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 8, refRegions, 6, sectionIndex);
                if (this.DataSource.Year < 2006)
                {
                    // в «Поступило» по уровню 01 – Фед.Бюджет
                    factValue = CleanFactValue(dataRow["Inpayments1"]);
                    PumpFactRow("InpaymentsReport", factValue, refDate, refKd, 1, refRegions, 7, sectionIndex);
                }
            }
            #endregion Раздел III
        }

        #region Отчеты в разрезе строк

        private int GetSectionIndexByStrCode(int strCode)
        {
            if (this.DataSource.Year >= 2011)
            {
                if ((strCode >= 1010) && (strCode <= 2545))
                    return 0;
                if ((strCode >= 3000) && (strCode <= 3200))
                    return 1;
                if ((strCode >= 3300) && (strCode <= 3520))
                    return 2;
            }
            else if (this.DataSource.Year >= 2007)
            {
                if ((strCode >= 1010) && (strCode <= 2545))
                    return 0;
                if ((strCode >= 3000) && (strCode <= 3200))
                    return 1;
                if ((strCode >= 3300) && (strCode <= 3500))
                    return 2;
            }
            else if (this.DataSource.Year >= 2006)
            {
                if ((strCode >= 1010) && (strCode <= 2540))
                    return 0;
                if ((strCode >= 3000) && (strCode <= 3200))
                    return 1;
                if ((strCode >= 3300) && (strCode <= 3500))
                    return 2;
            }
            else if (this.DataSource.Year >= 2005)
            {
                if ((strCode >= 1010) && (strCode <= 2425))
                    return 0;
                if ((strCode >= 3000) && (strCode <= 3200))
                    return 1;
                if ((strCode >= 3300) && (strCode <= 3520))
                    return 2;
            }
            else if (this.DataSource.Year >= 2004)
            {
                if ((strCode >= 1010) && (strCode <= 2290))
                    return 0;
                if ((strCode >= 3000) && (strCode <= 3200))
                    return 1;
                if ((strCode >= 3300) && (strCode <= 3620))
                    return 2;
            }
            return -1;
        }

        private string GetXlsStrCode(ExcelHelper excelDoc, int row)
        {
            if ((this.Region == RegionName.Saratov) || (this.Region == RegionName.Orenburg))
                return excelDoc.GetValue(row, 1).Split('-')[1].Trim();
            return excelDoc.GetValue(row + 1, 1).Split('-')[0].Trim();
        }

        private bool IsCutRow(string cellValue)
        {
            if (reportType != ReportType.Str)
                return false;
            return cellValue.Trim().ToUpper().StartsWith("РАЗРЕЗ ПО СТРОКЕ");
        }

        #endregion Отчеты в разрезе строк

        #region Массивы пар "поле-столбец"

        private object[] GetXlsMapping(int sectionIndex)
        {
            if (reportType != ReportType.Str)
            {
                if (sectionIndex == 0)
                {
                    return new object[] { "Name", 1, "KD", 2, "StrCode", 3, "Earned", 4,
                        "Inpayments1", 5, "Inpayments2", 6, "Inpayments14", 7 };
                }
                else if (sectionIndex == 1)
                {
                    return new object[] { "Name", 1, "KD", 2, "StrCode", 3,
                        "Earned", 4, "Inpayments", 5 };
                }
                else if (sectionIndex == 2)
                {
                    if (this.DataSource.Year >= 2006)
                    {
                        return new object[] { "Name", 1, "KD", 2, "StrCode", 3, "Earned", 4,
                            "Inpayments2", 6, "Inpayments14", 7, "Inpayments10", 8,
                            "Inpayments11", 9, "Inpayments9", 10, "Inpayments8", 11 };
                    }
                    else
                    {
                        return new object[] { "Name", 1, "KD", 2, "StrCode", 3, "Earned", 4,
                            "Inpayments1", 6, "Inpayments2", 7, "Inpayments14", 8, "Inpayments10", 9,
                            "Inpayments11", 10, "Inpayments9", 11, "Inpayments8", 12 };
                    }
                }
            }
            else
            {
                if (sectionIndex == 0)
                {
                    return new object[] { "Name", 1, "RegionCode", 2, "Earned", 3,
                        "Inpayments1", 4, "Inpayments2", 5, "Inpayments14", 6 };
                }
                else if (sectionIndex == 1)
                {
                    return new object[] { "Name", 1, "RegionCode", 2, "Earned", 3,
                        "Inpayments", 4 };
                }
                else if (sectionIndex == 2)
                {
                    if (this.DataSource.Year >= 2006)
                    {
                        return new object[] { "Name", 1, "RegionCode", 2, "Earned", 3,
                            "Inpayments2", 5, "Inpayments14", 6, "Inpayments10", 7,
                            "Inpayments11", 8, "Inpayments9", 9, "Inpayments8", 10 };
                    }
                    else
                    {
                        return new object[] { "Name", 1, "RegionCode", 2, "Earned", 3,
                            "Inpayments1", 5, "Inpayments2", 6, "Inpayments14", 7, "Inpayments10", 8,
                            "Inpayments11", 9, "Inpayments9", 10, "Inpayments8", 11 };
                    }
                }
            }
            return null;
        }

        private Dictionary<string, string> GetXlsDataRow(ExcelHelper excelDoc, int curRow, object[] mapping)
        {
            Dictionary<string, string> dataRow = new Dictionary<string, string>();
            int count = mapping.GetLength(0);
            for (int i = 0; i < count; i += 2)
            {
                dataRow.Add(mapping[i].ToString(), excelDoc.GetValue(curRow, Convert.ToInt32(mapping[i + 1])));
            }
            if (reportType == ReportType.Str)
                dataRow.Add("StrCode", strCode);
            return dataRow;
        }

        #endregion Массивы пар "поле-столбец"

        private bool IsSectionStart(string cellValue)
        {
            return (cellValue.Trim().ToUpper() == "А");
        }

        private bool IsSectionRow(ExcelHelper excelDoc, int curRow, ref string cellValue)
        {
            for (int curColumn = 1; curColumn <= 5; curColumn++)
            {
                cellValue = excelDoc.GetValue(curRow, curColumn).Trim().ToUpper();
                if (cellValue.StartsWith("РАЗДЕЛ") && (reportType != ReportType.Str))
                    return true;
            }
            cellValue = excelDoc.GetValue(curRow, 1).Trim();
            return false;
        }

        private int GetSectionIndex(string cellValue)
        {
            cellValue = cellValue.Trim().ToUpper();
            if (cellValue.StartsWith("РАЗДЕЛ III"))
                return 2;
            if (cellValue.StartsWith("РАЗДЕЛ II"))
                return 1;
            if (cellValue.StartsWith("РАЗДЕЛ I"))
                return 0;
            return -1;
        }

        private bool IsSectionEnd(string cellValue)
        {
            cellValue = cellValue.Trim().ToUpper();
            // отдельно обрабатываем калмыкский отчет - ибо они выебнулись пахитрому
            if ((this.Region == RegionName.Kalmykya) && (reportType == ReportType.Str) &&
                (this.DataSource.Year == 2006) && (this.DataSource.Month == 7))
                    return (cellValue.StartsWith("МРИ ПО КРУПНЕЙШИМ №2"));
            return (cellValue.StartsWith("КОНТРОЛЬНАЯ СУММА") || cellValue.StartsWith("ИТОГО") || (cellValue == "ВСЕГО"));
        }

        private void PumpXlsSheetData(string fileName, ExcelHelper excelDoc, int refDate)
        {
            object[] xlsMapping = null;
            strCode = string.Empty;
            int sectionIndex = -1;
            bool toPump = false;
            string dataSourcePath = GetShortSourcePathBySourceID(this.SourceID);
            int rowsCount = excelDoc.GetRowsCount();
            for (int curRow = 1; curRow <= rowsCount; curRow++)
                try
                {
                    SetProgress(rowsCount, curRow,
                        string.Format("Обработка файла {0}\\{1}...", dataSourcePath, fileName),
                        string.Format("Строка {0} из {1}", curRow, rowsCount));

                    string cellValue = excelDoc.GetValue(curRow, 1).Trim();

                    if (IsSectionRow(excelDoc, curRow, ref cellValue))
                    {
                        sectionIndex = GetSectionIndex(cellValue);
                        continue;
                    }

                    if (cellValue == string.Empty)
                        continue;

                    // конец раздела - контрольная сумма
                    if (IsSectionEnd(cellValue) && (sectionIndex != -1))
                    {
                        Dictionary<string, string> dataRow = GetXlsDataRow(excelDoc, curRow, xlsMapping);
                        CheckXlsTotalSum(dataRow, sectionIndex);
                        sectionIndex = -1;
                        toPump = false;
                        continue;
                    }

                    // разрез по строке
                    if (IsCutRow(cellValue))
                    {
                        strCode = GetXlsStrCode(excelDoc, curRow);
                        if (strCode == string.Empty)
                            continue;
                        sectionIndex = GetSectionIndexByStrCode(Convert.ToInt32(strCode));
                        continue;
                    }

                    // строка с данными для закачки
                    if (toPump)
                    {
                        Dictionary<string, string> dataRow = GetXlsDataRow(excelDoc, curRow, xlsMapping);
                        PumpXlsRow(dataRow, sectionIndex, refDate);
                        continue;
                    }

                    // начала раздела
                    if (IsSectionStart(cellValue) && (sectionIndex != -1))
                    {
                        SetNullTotalSum();
                        xlsMapping = GetXlsMapping(sectionIndex);
                        toPump = true;
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format(
                        "При обработке строки {0} листа '{1}' возникла ошибка ({2})",
                        curRow, excelDoc.GetWorksheetName(), ex.Message), ex);
                }
        }

        // получить лист экселевского отчета, на котором расположена дата отчета
        private string GetXlsDateSheetName()
        {
            if (this.Region == RegionName.Stavropol)
                return "1-2разделы";
            return TITLE_SHEET_NAME;
        }

        private const string DATE_CELL_TEXT = "ПО СОСТОЯНИЮ НА";
        private const string TITLE_SHEET_NAME = "ТИТУЛЬНЫЙ ЛИСТ";
        private int GetXlsReportDate(ExcelHelper excelDoc)
        {
            try
            {
                excelDoc.SetWorksheet(GetXlsDateSheetName());
            }
            catch
            {
                excelDoc.SetWorksheet(1);
            }
            int date = -1;
            int columnIndex = 1;
            // пытаемся найти дату в диапазоне ячеек A4..A14
            for (int rowIndex = 4; rowIndex <= 14; rowIndex++)
            {
                string cellText = excelDoc.GetValue(rowIndex, columnIndex).Trim();
                if (cellText.ToUpper().Contains(DATE_CELL_TEXT))
                {
                    switch (this.Region)
                    {
                        case RegionName.Kalmykya:
                        case RegionName.MoskvaObl:
                        case RegionName.Orenburg:
                        case RegionName.Samara:
                        case RegionName.Tyva:
                            //  дату отчета с титульного листа получаем иначе
                            if (excelDoc.GetWorksheetName().ToUpper() == TITLE_SHEET_NAME)
                            {
                                cellText = excelDoc.GetValue(rowIndex, columnIndex + 1).Trim() + " " +
                                    excelDoc.GetValue(rowIndex, columnIndex + 3).Trim() + " " +
                                    excelDoc.GetValue(rowIndex, columnIndex + 4).Trim();
                                date = Convert.ToInt32(CommonRoutines.LongDateToNewDate(cellText));
                            }
                            break;
                        case RegionName.Penza:
                            int month = this.DataSource.Year * 100 + this.DataSource.Month;
                            if ((month >= 200707) && (excelDoc.GetWorksheetName().ToUpper() == TITLE_SHEET_NAME))
                            {
                                cellText = excelDoc.GetValue(rowIndex, columnIndex + 1).Trim() + " " +
                                    excelDoc.GetValue(rowIndex, columnIndex + 3).Trim() + " " +
                                    excelDoc.GetValue(rowIndex, columnIndex + 4).Trim();
                                date = Convert.ToInt32(CommonRoutines.LongDateToNewDate(cellText));
                            }
                            break;
                    }
                    if (date == -1)
                        date = CommonRoutines.ShortDateToNewDate(CommonRoutines.TrimLetters(cellText));
                    date = CommonRoutines.DecrementDate(date);
                    break;
                }
            }
            if (date == -1)
            {
                WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning,
                    "Не удалось найти дату отчета или она не попадает в диапазон ячеек А4..А14, дата будет определена параметрами источника");
                date = this.DataSource.Year * 10000 + this.DataSource.Month * 100;
            }
            CheckDataSourceByDate(date, true);
            return date;
        }

        private int GetXlsReportDateSource(ExcelHelper excelDoc)
        {
            // string dateStr = string.Concat(excelDoc.GetValue("B5").Trim(), " ", excelDoc.GetValue("D5"));
            // return Convert.ToInt32(CommonRoutines.LongDateToNewDate(dateStr));
            return (this.DataSource.Year * 10000 + this.DataSource.Month * 100);
        }

        private void SetXlsRegion(ExcelHelper excelDoc)
        {
            switch (this.Region)
            {
                case RegionName.Kalmykya:
                case RegionName.MoskvaObl:
                case RegionName.Orenburg:
                case RegionName.Samara:
                case RegionName.Tyva:
                    regionCode = excelDoc.GetValue("B26").Trim();
                    regionName = excelDoc.GetValue("C26").Trim();
                    break;
                default:
                    regionCode = "0";
                    regionName = excelDoc.GetValue("A16").Trim();
                    break;
            }
        }

        private void ProcessXlsFile(FileInfo file)
        {
            WriteToTrace("Открытие документа: " + file.Name, TraceMessageKind.Information);
            ExcelHelper excelDoc = new ExcelHelper();
            try
            {
                excelDoc.AskToUpdateLinks = false;
                excelDoc.DisplayAlerts = false;
                excelDoc.EnableEvents = false;
                excelDoc.OpenDocument(file.FullName);
                int refDate = -1;
                if ((this.Region == RegionName.AltayKrai) || (this.Region == RegionName.SamaraGO))
                    refDate = GetXlsReportDateSource(excelDoc);
                else
                    refDate = GetXlsReportDate(excelDoc);
                int wsCount = excelDoc.GetWorksheetsCount();
                // для Алтая качаем только 1-ый лист
                if (this.Region == RegionName.AltayKrai)
                    wsCount = 1;
                for (int index = 1; index <= wsCount; index++)
                {
                    excelDoc.SetWorksheet(index);
                    // пропускаем титульный лист
                    switch (this.Region)
                    {
                        case RegionName.SamaraGO:
                        case RegionName.Kalmykya:
                        case RegionName.MoskvaObl:
                        case RegionName.Orenburg:
                        case RegionName.Samara:
                        case RegionName.Tyva:
                            if (excelDoc.GetWorksheetName().ToUpper() == TITLE_SHEET_NAME)
                                continue;
                            break;
                    }
                    // для отчетов в разрезе районов получаем район
                    if (reportType == ReportType.Region)
                    {
                        switch (this.Region)
                        {
                            case RegionName.Kalmykya:
                            case RegionName.MoskvaObl:
                            case RegionName.Samara:
                            case RegionName.Tyva:
                                excelDoc.SetWorksheet(TITLE_SHEET_NAME);
                                SetXlsRegion(excelDoc);
                                excelDoc.SetWorksheet(index);
                                break;
                            default:
                                SetXlsRegion(excelDoc);
                                break;
                        }
                    }
                    PumpXlsSheetData(file.Name, excelDoc, refDate);
                }
            }
            finally
            {
                if (excelDoc != null)
                    excelDoc.CloseDocument();
            }
        }

        private void ProcessReports(DirectoryInfo dir)
        {
            SetStrCodeList();
            int strCodeCount = strCodeList.Count;
            try
            {
                if (dir.GetFiles("*.xls", SearchOption.AllDirectories).GetLength(0) == 0)
                    strCodeList.Clear();
                ProcessFilesTemplate(dir, "*.xls", new ProcessFileDelegate(ProcessXlsFile), false);
                if (strCodeCount == strCodeList.Count)
                    WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeWarning,
                        string.Format("В каталоге '{0}' отсутствуют данные для закачки.", dir.FullName));
                else if (this.reportType != ReportType.Str)
                    ShowAbsentCode();
            }
            finally
            {
                strCodeList.Clear();
            }
        }

        private void ProcessXlsFiles(DirectoryInfo dir)
        {
            reportType = ReportType.Svod;
            WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeStartFilePumping, "Старт закачки данных сводных отчетов.");
            ProcessReports(dir.GetDirectories(SVOD_DIR_NAME)[0]);
            CheckKd();
            reportType = ReportType.Region;
            WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeStartFilePumping, "Старт закачки данных отчетов в разрезе районов.");
            ProcessReports(dir.GetDirectories(REG_DIR_NAME)[0]);
            reportType = ReportType.Str;
            WriteEventIntoDataPumpProtocol(DataPumpEventKind.dpeStartFilePumping, "Старт закачки данных отчетов в разрезе строк.");
            ProcessReports(dir.GetDirectories(STR_DIR_NAME)[0]);
        }

        #endregion Работа с Xls

        #region Перекрытые методы закачки

        protected override void ProcessFiles(DirectoryInfo dir)
        {
            CheckDirectories(dir);
            if (dir.GetFiles("*.xls", SearchOption.AllDirectories).GetLength(0) > 0)
                ProcessXlsFiles(dir);
            else if (dir.GetFiles("*.*", SearchOption.AllDirectories).GetLength(0) > 0)
                ProcessTxtFiles(dir);
            // !!! Йа креветко !!! - (Feanor: памятный комментарий Дениса Борисова, не мочить!!!!)
            UpdateData();
            SetClsHierarchy();
        }

        protected override void DirectPumpData()
        {
            PumpDataYMTemplate();
        }

        #endregion Перекрытые методы закачки

        #endregion Закачка данных

        #region Обработка данных

        protected override void DirectProcessData()
        {
            int year = -1;
            int month = -1;
            GetPumpParams(ref year, ref month);
            ProcessDataSourcesTemplate(year, month, "Коррекции сумм фактов по данным источника");
        }

        #endregion Обработка данных

    }
}
