using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Web.UI.WebControls;
using Infragistics.Documents.Reports.Report.Section;
using Infragistics.Documents.Reports.Report.Text;
using Infragistics.WebUI.UltraWebGrid;
using Krista.FM.Server.Dashboards.Common;
using Krista.FM.Server.Dashboards.Components;
using Krista.FM.Server.Dashboards.Core;
using Krista.FM.Server.Dashboards.Core.DataProviders;
using Infragistics.UltraChart.Resources.Appearance;
using Infragistics.UltraChart.Shared.Events;
using Infragistics.UltraChart.Shared.Styles;
using Infragistics.Documents.Excel;
using Infragistics.Documents.Reports.Report;
using Infragistics.Documents.Reports.Report.Table;
using Infragistics.Documents.Reports.Report.Text;
using Krista.FM.Server.Dashboards.Core;
using Infragistics.WebUI.UltraWebGrid.DocumentExport;
using Infragistics.WebUI.UltraWebGrid.ExcelExport;
using EndExportEventArgs = Infragistics.WebUI.UltraWebGrid.DocumentExport.EndExportEventArgs;
using Infragistics.UltraChart.Core.Primitives;


namespace Krista.FM.Server.Dashboards.reports.FO_0001_0003_XMAO
{
    public partial class Default: CustomReportPage
    {
        #region Поля

        private DataTable dtGrid;
        DataTable dtDate = new DataTable();
        private string query;
        private string quarter;
        private string halfYear;
        private int firstYear = 2007;
        private int endYear;
        private DateTime currentDate;
        private bool flag = true;
        private int count;

        private Collection<string> selectedValues;

        private CustomParam LastLastYear;
        private CustomParam Columns;
        private CustomParam lastYear;
        private CustomParam Measures;
        private CustomParam allYears;
        private GridHeaderLayout headerLayout;


      #endregion

     
        protected override void Page_PreLoad(object sender, EventArgs e)
        {
            base.Page_PreLoad(sender, e);

            UltraWebGrid1.Width = CRHelper.GetGridWidth(CustomReportConst.minScreenWidth);
            UltraWebGrid1.Height = CRHelper.GetGridHeight(CustomReportConst.minScreenHeight / 1.5);
            UltraWebGrid1.DisplayLayout.NoDataMessage = "Нет данных";
             
           /* CrossLink1.Visible = true;
            CrossLink1.Text = "Численность&nbsp;работников&nbsp;ОГВ&nbsp;и&nbsp;ОМСУ";
            CrossLink1.NavigateUrl = "~/reports/FO_0001_0003/Default.aspx";

            CrossLink2.Visible = true;
            CrossLink2.Text = "Фактические&nbsp;затраты&nbsp;на&nbsp;денежное&nbsp;содержание&nbsp;ОГВ&nbsp;и&nbsp;ОМСУ ";
            CrossLink2.NavigateUrl = "~/reports/FO_0001_0005_XMAO/Default.aspx";

            CrossLink3.Visible = true;
            CrossLink3.Text = "Штатная&nbsp;численность&nbsp;ОГВ&nbsp;и&nbsp;ОМСУ";
            CrossLink3.NavigateUrl = "~/reports/FO_0001_0006_XMAO/Default.aspx";
            
            CrossLink4.Visible = true;
            CrossLink4.Text = "Анализ&nbsp;среднемесячной&nbsp;зарплаты&nbsp;ОГВ&nbsp;и&nbsp;ОМСУ ";
            CrossLink4.NavigateUrl = "~/reports/FO_0001_0007_XMAO/Default.aspx";
            */
            #region инициализация параметров

            if (LastLastYear == null)
            {
                LastLastYear = UserParams.CustomParam("last_last_year");
            }

            if (Columns == null)
            {
                Columns = UserParams.CustomParam("columns");
            }

            if (lastYear == null)
            {
                lastYear = UserParams.CustomParam("lastYear");
            }

            if (Measures == null)
            {
                Measures = UserParams.CustomParam("measures");
            }

            if (allYears == null)
            {
                allYears = UserParams.CustomParam("all_year");
            }

            #endregion

            ReportExcelExporter1.ExcelExportButton.Click += new EventHandler(ExcelExportButton_Click);
            ReportExcelExporter1.ExcelExporter.BeginExport += new BeginExportEventHandler(ExcelExporter_BeginExport);
            ReportExcelExporter1.ExcelExporter.EndExport += new EndExportEventHandler(ExcelExporter_EndExport);
            ReportPDFExporter1.PdfExportButton.Click += new EventHandler(PdfExportButton_Click);
   
        }
      
       protected override void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);

            if (!Page.IsPostBack)
            {
                dtDate = new DataTable();
                query = DataProvider.GetQueryText("FO_0001_0003_XMAO_data");
                DataProvidersFactory.PrimaryMASDataProvider.GetDataTableForPivotTable(query, dtDate);
               
                if (dtDate.Rows.Count > 0)
                {
                  endYear = Convert.ToInt32(dtDate.Rows[0][0]);
                }

                ComboYear.Title = "Год";
                ComboYear.Visible = true;
                ComboYear.Width = 100;
                ComboYear.MultiSelect = true;
                ComboYear.FillDictionaryValues(CustomMultiComboDataHelper.FillYearValues(firstYear, endYear));
                ComboYear.SetСheckedState(endYear.ToString(),true);
                ComboYear.SetСheckedState((endYear-1).ToString(), true);
                ComboYear.SetСheckedState((endYear-2).ToString(), true);
            }
            
            Measures.Value = (useStack.Checked) ? "[Measures].[Утверждено за период]" : "[Measures].[Фактически за период]" ;
            selectedValues = ComboYear.SelectedValues;

            dtDate = new DataTable();
            query = DataProvider.GetQueryText("FO_0001_0003_XMAO_data");
            DataProvidersFactory.PrimaryMASDataProvider.GetDataTableForPivotTable(query, dtDate);
            if (dtDate.Rows.Count > 0)
            {
                endYear = Convert.ToInt32(dtDate.Rows[0][0]);

                if (selectedValues.Count >= 1)
                {
                    if (selectedValues[selectedValues.Count - 1] == endYear.ToString())
                    {
                        quarter = dtDate.Rows[0][2].ToString();
                        halfYear = dtDate.Rows[0][1].ToString();
                        flag = false;
                        currentDate = new DateTime(Convert.ToInt32(selectedValues[selectedValues.Count - 1]),
                                           quarter == "Квартал 2"
                                               ? 7
                                               : quarter == "Квартал 3" ? 10 : quarter == "Квартал 1" ? 4 : 1, 1);

                    }
                    else 
                    {
                        quarter = "Квартал 4";
                        halfYear = "Полугодие 2";
                        flag = true;
                        
                    }
                }
           }
             string columns = string.Empty;
             string colFirst = string.Empty;
             string colNext = string.Empty;
             string colNextUtv = string.Empty;
             string colLast = string.Empty;
             string years = string.Empty;
             
            if (selectedValues.Count > 0)
             {
                 if (selectedValues.Count == 1) // если выбран один год
                     {
                         if (DebtKindButtonList.SelectedIndex == 0) // органы гос власти
                         {
                             int lYear = Convert.ToInt32(selectedValues[0]) - 1;
                             if (RadioButtonList1.SelectedIndex == 0) // выводи только года
                             {
                                 if (useStack.Checked)
                                 {
                                     columns += string.Format(
                                     "{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0}  [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} ",
                                     "{", lYear, "}", selectedValues[0], halfYear, quarter);
                                 }
                                 else
                                 {
                                     columns += string.Format(
                                     "{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0}  [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} ",
                                     "{", lYear, "}", selectedValues[0], halfYear, quarter);
                                 }
                               
                             }
                             else // выводим года + кварталы
                             {
                                 columns +=
                                     string.Format(
                                         "{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} ",
                                         "{", lYear, "}", selectedValues[0]);
                             }
                             UserParams.PeriodYear.Value = selectedValues[0];
                             UserParams.PeriodLastYear.Value = (Convert.ToInt32(selectedValues[0]) - 1).ToString();
                             LastLastYear.Value = (Convert.ToInt32(selectedValues[0]) - 1).ToString();

                         }
                         else // МО
                         {
                             int lYear = Convert.ToInt32(selectedValues[0]) - 1;
                             if (RadioButtonList1.SelectedIndex == 0) // выводим только года
                             {
                                 if (useStack.Checked)
                                 {
                                     columns += string.Format("{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0}  [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} +  {0}[Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] ,[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} ",
                                                              "{", lYear, "}", selectedValues[0], halfYear, quarter);
                                 }
                                 else
                                 {
                                     columns +=
                                   string.Format(
                                       "{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0}  [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} +  {0}[Период__Период].[Период__Период].[Данные всех периодов].[{3}].[{4}].[{5}] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] ,[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} ",
                                       "{", lYear, "}", selectedValues[0], halfYear, quarter);
                                 }
                               

                             }
                             else // выводим год + квартал
                             {
                                 columns +=
                                    string.Format(
                                        "{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %] {2} {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_]   {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]    {2} {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_]  {2} + {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} {2} +{0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2] , [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} +  {0} [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 1].[Квартал 2], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{3}].[Полугодие 2].[Квартал 4] {2} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] ,[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} ",
                                        "{", lYear, "}", selectedValues[0]);
                             }
                             UserParams.PeriodYear.Value = selectedValues[0];
                             UserParams.PeriodLastYear.Value = (Convert.ToInt32(selectedValues[0]) - 1).ToString();
                             LastLastYear.Value = (Convert.ToInt32(selectedValues[0]) - 1).ToString();
                         }

                         years += string.Format("[Период__Год Квартал Месяц].[Период__Год Квартал Месяц].[Данные всех периодов].[{2}], [Период__Год Квартал Месяц].[Период__Год Квартал Месяц].[Данные всех периодов].[{0}] ,[Период__Год Квартал Месяц].[Период__Год Квартал Месяц].[Данные всех периодов].[{1}]", Convert.ToInt32(selectedValues[0]) - 1, selectedValues[0], Convert.ToInt32(selectedValues[0]) - 2);
                         allYears.Value = years;
                     }
                     else // если выбрано несколько лет
                     {
                         if (DebtKindButtonList.SelectedIndex == 0) // органы гос власти
                         {
                             for (int i = 0; i < selectedValues.Count; i++)
                             {
                                 if (i == 0)
                                 {
                                     colFirst = string.Format("{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4]{2}", "{", selectedValues[i], "}");
                                 }
                                 else
                                 {
                                     if (i == selectedValues.Count - 1)
                                     {
                                         if (RadioButtonList1.SelectedIndex == 0) // выводим только года
                                         {
                                            
                                             colNextUtv =
                                                      string.Format(
                                                          " {0}[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[{3}].[{4}] {2}",
                                                          "{", selectedValues[i], "}",halfYear, quarter);
                                             colLast =
                                                     string.Format(
                                                         " {0}[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[{3}].[{4}] {2}",
                                                         "{", selectedValues[i], "}",halfYear,quarter);
                                            
                                         }
                                         else // год + квартал
                                         {
                                             colLast =
                                                 string.Format(
                                                     " {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 1].[Квартал 2],[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] {2}",
                                                     "{", selectedValues[i], "}");
                                         }
                                     }
                                     else
                                     {
                                         
                                       colNext += string.Format("[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4],", "{", selectedValues[i], "}");    
                                                                                
                                     }
                                 }


                             }
                             if (useStack.Checked) // утвержденные данные
                             {
                                 if (RadioButtonList1.SelectedIndex == 0) // выводим только года
                                 {
                                     if (colNext != string.Empty)
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {5} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast, colNextUtv);
                                     }
                                     else
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {5} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast, colNextUtv);
                                     }
                                 }
                                 else
                                 {
                                     if (colNext != string.Empty)
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                     }
                                     else
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                     }
                                 }
                             }
                             else
                             {
                                 if (colNext != string.Empty)
                                 {
                                     columns =
                                         string.Format(
                                             "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                             "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                 }
                                 else
                                 {
                                     columns =
                                         string.Format(
                                             "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}",
                                             "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                 }
                             }

                             UserParams.PeriodYear.Value = selectedValues[selectedValues.Count - 1];
                             UserParams.PeriodLastYear.Value = (Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1).ToString();
                             LastLastYear.Value = (Convert.ToInt32(selectedValues[0])).ToString();

                         }
                         else // МО
                         {
                             for (int i = 0; i < selectedValues.Count; i++)
                             {
                                 if (i == 0)
                                 {
                                     colFirst = string.Format("{0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4]{2}", "{", selectedValues[i], "}");
                                 }
                                 else
                                 {
                                     if (i == selectedValues.Count - 1)
                                     {
                                         if (RadioButtonList1.SelectedIndex == 0) // выводим только года
                                         {
                                             
                                             colNextUtv =
                                                     string.Format(
                                                         " {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[{3}].[{4}] {2}",
                                                         "{", selectedValues[i], "}", halfYear, quarter);
                                             colLast =
                                                    string.Format(
                                                        " {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[{3}].[{4}] {2}",
                                                        "{", selectedValues[i], "}", halfYear, quarter);
                                             
                                         }
                                         else // год + квартал
                                         {
                                             colLast =
                                                string.Format(
                                                    " {0} [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 1].[Квартал 2],[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 3], [Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4] {2}",
                                                    "{", selectedValues[i], "}");
                                         }
                                     }
                                     else
                                     {
                                         colNext += string.Format("[Период__Период].[Период__Период].[Данные всех периодов].[{1}].[Полугодие 2].[Квартал 4],", "{", selectedValues[i], "}");
                                     }
                                 }

                             }

                             if (useStack.Checked) // утвержденные данные
                             {
                                 if (RadioButtonList1.SelectedIndex == 0) // выводим только года
                                 {
                                     if (colNext != string.Empty)
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {5} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}+ {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ]{2} + {0} {3} {2} * {0}[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast, colNextUtv);
                                     }
                                     else
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {5} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} + {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ], [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %]{2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast, colNextUtv);
                                     }
                                 }
                                 else
                                 {
                                     if (colNext != string.Empty)
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}+ {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ]{2} + {0} {3} {2} * {0}[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                     }
                                     else
                                     {
                                         columns =
                                             string.Format(
                                                 "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} + {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ], [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %]{2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                                 "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                     }
                                 }
                             }
                             else
                             {
                                 if (colNext != string.Empty)
                                 {
                                     columns =
                                         string.Format(
                                             "{1} * {0} [Measures].[Утверждено штатных единиц ] {2} + {0} {3} {2} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %] {2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ] {2} + {0} {3} {2} * {0} [Measures].[Фактические расходы ], [Measures].[Фактические расходы_Снижение в %]  {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ] {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ]  {2} + {0} {3} {2} * {0}[Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ]  {2} + {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2}+ {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ]{2} + {0} {3} {2} * {0}[Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                             "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                 }
                                 else
                                 {
                                     columns =
                                         string.Format(
                                             "{1} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %]{2} + {4} * {0} [Measures].[Утверждено штатных единиц ], [Measures].[Утверждено штатных единиц_Снижение в %_] {2} + {1} * {0} [Measures].[Фактические расходы ],[Measures].[Фактические расходы_Снижение в %] {2} + {4} * {0} [Measures].[Фактические расходы_квартал ], [Measures].[Фактические расходы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %] {2} + {4} * {0} [Measures].[Расходы на содержание 1 штатной единицы ], [Measures].[Расходы на содержание 1 штатной единицы_Снижение в %_] {2} + {1} * {0} [Measures].[Расходы на содержание 1 жителя ], [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} +  {4} * {0} [Measures].[Расходы на содержание 1 жителя ] , [Measures].[Расходы на содержание 1 жителя_Снижение в % ] {2} + {1} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ], [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %]{2} + {4} * {0} [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО ] , [Measures].[Численность работников ОМСУ МО в расчете 1 000 жителей МО_Снижение в %] {2}",
                                             "{", colFirst, "}", colNext.TrimEnd(','), colLast);
                                 }
                             }
                             UserParams.PeriodYear.Value = selectedValues[selectedValues.Count - 1];
                             UserParams.PeriodLastYear.Value = (Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1).ToString();
                             LastLastYear.Value = (Convert.ToInt32(selectedValues[0])).ToString();
                         }
                         
                        for (int i = 0; i < selectedValues.Count; i++)
                         {
                             years += string.Format("[Период__Год Квартал Месяц].[Период__Год Квартал Месяц].[Данные всех периодов].[{0}],", selectedValues[i]);
                         }
                       allYears.Value = string.Format("[Период__Год Квартал Месяц].[Период__Год Квартал Месяц].[Данные всех периодов].[{0}], {1}", Convert.ToInt32(selectedValues[0]) -1, years.TrimEnd(','));
                     }
              Columns.Value = columns;
             }
            else
            {
              Columns.Value = string.Empty;
              allYears.Value = string.Empty;
               
            }

           Page.Title = "Анализ расходов на содержание органов государственной власти, органов местного самоуправления и избирательных комиссий МО Ханты-Мансийского автономного округа-Югры";
           PageTitle.Text = Page.Title;
           PageSubTitle.Text = string.Format("Данные за {0} {1}", CRHelper.GetDigitIntervals(ComboYear.SelectedValuesString, ','), ComboYear.SelectedValues.Count == 1 ? "год" : "годы");
           
           headerLayout = new GridHeaderLayout(UltraWebGrid1);
           UltraWebGrid1.Bands.Clear();
           UltraWebGrid1.DataBind();
             

        }

        #region Обработчик грида



       protected void UltraWebGrid_DataBinding(Object sender, EventArgs e)
       {
           if (DebtKindButtonList.SelectedIndex == 0) // ОГВ
           {
               string query = DataProvider.GetQueryText("FO_0001_0003_XMAO_Grid");
               dtGrid = new DataTable();
               DataProvidersFactory.PrimaryMASDataProvider.GetDataTableForChart(query,
                                                                                "Наименование государственного органа",
                                                                                dtGrid);
               query = DataProvider.GetQueryText("FO_0001_0003_XMAO_CountMO");
               DataTable dtCount = new DataTable();
               DataProvidersFactory.SpareMASDataProvider.GetDataTableForChart(query, "Численность", dtCount);

               if (dtGrid.Rows.Count > 0)
               {
                   if (dtCount.Rows.Count > 0)
                   {
                       // расходы на содержание в расчете на 1 человека
                      
                       double sumBeforeLastYear = 0;
                       double sumLastYear = 0;
                       double sumSecQuartCurYear = 0;
                       double sumThirdQuartCurYear = 0;
                       double sumCurYear = 0;


                       if (selectedValues.Count == 1 || selectedValues.Count == 2) // если выбран только один год
                       {
                           int colCount = RadioButtonList1.SelectedIndex == 0 ? 13 : 25;
                           for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++) //не пропускаем строку итого
                           {
                               if (dtCount.Rows[dtCount.Rows.Count - 1][2] == DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2].ToString() == string.Empty) // если нет данных по численности, то выводим пусто
                               {
                                   dtGrid.Rows[rowNum][colCount] = DBNull.Value;
                               }
                               else if (dtGrid.Rows[rowNum][colCount] != DBNull.Value &&
                                   dtGrid.Rows[rowNum][colCount].ToString() != string.Empty &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2] != DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2].ToString() != string.Empty)
                               {
                                   
                                   dtGrid.Rows[rowNum][colCount] = Convert.ToDouble(dtGrid.Rows[rowNum][colCount])/
                                                                   Convert.ToDouble(
                                                                       dtCount.Rows[dtCount.Rows.Count - 1][2]);
                                   //sumBeforeLastYear = sumBeforeLastYear + Convert.ToDouble(dtGrid.Rows[rowNum][colCount]);
                               }


                               if (dtCount.Rows[dtCount.Rows.Count - 1][3] == DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() == string.Empty) // если нет данных по численности
                               {
                                   dtGrid.Rows[rowNum][colCount + 2] = DBNull.Value;
                               }
                               else 
                               if (dtGrid.Rows[rowNum][colCount + 2] != DBNull.Value &&
                                   dtGrid.Rows[rowNum][colCount + 2].ToString() != string.Empty &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][3] != DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() != string.Empty)
                               {
                                   dtGrid.Rows[rowNum][colCount + 2] =
                                       Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 2])/
                                       Convert.ToDouble(dtCount.Rows[dtCount.Rows.Count - 1][3]);

                                 //  sumLastYear = sumLastYear + Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 2]);
                               }
                               if (RadioButtonList1.SelectedIndex == 1) // если выводим год + квартал
                               {
                                   if (dtCount.Rows[dtCount.Rows.Count - 1][3] == DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() == string.Empty) // если нет данных по численности
                                   {
                                       dtGrid.Rows[rowNum][colCount + 4] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][colCount + 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][colCount + 4].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][colCount + 4] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 4])/
                                           Convert.ToDouble(dtCount.Rows[dtCount.Rows.Count - 1][3]);

                                       //sumSecQuartCurYear = sumSecQuartCurYear + Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 4]);
                                   }

                                   if (dtCount.Rows[dtCount.Rows.Count - 1][3] == DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() == string.Empty) // если нет данных по численности
                                   {
                                       dtGrid.Rows[rowNum][colCount + 6] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][colCount + 6] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][colCount + 6].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][3].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][colCount + 6] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 6])/
                                           Convert.ToDouble(dtCount.Rows[dtCount.Rows.Count - 1][3]);

                                       //sumThirdQuartCurYear = sumThirdQuartCurYear + Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 6]);
                                   }
                               }

                           }
                         /*  if (sumBeforeLastYear != 0)
                           {
                               dtGrid.Rows[0][colCount] = sumBeforeLastYear;
                           }
                           else
                           {
                               dtGrid.Rows[0][colCount] = DBNull.Value;
                           }
                           if (sumLastYear != 0)
                           {
                               dtGrid.Rows[0][colCount + 2] = sumLastYear;
                           }
                           else
                           {
                               dtGrid.Rows[0][colCount + 2] = DBNull.Value;
                           }
                           if (RadioButtonList1.SelectedIndex == 1)
                           {
                               if (sumSecQuartCurYear != 0)
                               {
                                   dtGrid.Rows[0][colCount + 4] = sumSecQuartCurYear;
                               }
                               else
                               {
                                   dtGrid.Rows[0][colCount + 4] = DBNull.Value;
                               }
                               if (sumThirdQuartCurYear != 0)
                               {
                                   dtGrid.Rows[0][colCount + 6] = sumThirdQuartCurYear;
                               }
                               else
                               {
                                   dtGrid.Rows[0][colCount + 6] = DBNull.Value;
                               }
                           }
                           */
                           // снижение/ прирост
                           for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                           {
                               if (dtGrid.Rows[rowNum][colCount + 2] != DBNull.Value && dtGrid.Rows[rowNum][colCount + 2].ToString() != string.Empty &&
                                   dtGrid.Rows[rowNum][colCount] != DBNull.Value && dtGrid.Rows[rowNum][colCount].ToString() != string.Empty)
                               {
                                   dtGrid.Rows[rowNum][colCount + 3] = ((Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 2]) /
                                                               Convert.ToDouble(dtGrid.Rows[rowNum][colCount])*100) - 100)/100;
                               }

                               if (RadioButtonList1.SelectedIndex == 1) // если выводим год + квартал
                               {
                                   if (dtGrid.Rows[rowNum][29] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][29].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][25] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][25].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][30] = ((Convert.ToDouble(dtGrid.Rows[rowNum][29])/
                                                                   Convert.ToDouble(dtGrid.Rows[rowNum][25])*100) - 100)/
                                                                 100;
                                   }


                                   if (dtGrid.Rows[rowNum][25] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][25].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][31] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][31].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][32] = ((Convert.ToDouble(dtGrid.Rows[rowNum][31])/
                                                                   Convert.ToDouble(dtGrid.Rows[rowNum][25])*100) - 100)/
                                                                 100;
                                   }
                               }

                           }
                           
                       }
                       else //выбрано несколько лет
                       {
                           int iEnd = RadioButtonList1.SelectedIndex == 1
                                            ? dtGrid.Columns.Count - 6
                                            : dtGrid.Columns.Count - 2;
                           int colCount = RadioButtonList1.SelectedIndex == 0 ? ((3 + (selectedValues.Count - 2) * 2) * 3 + 1) : ((7 + (selectedValues.Count - 2) * 2) * 3 + 1);
                          
                           for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++) //не пропускаем строку итого
                           {
                               int numCol = 2;

                               if (dtCount.Rows[dtCount.Rows.Count - 1][2] == DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2].ToString() == string.Empty) // нет данных по численности
                               {
                                   dtGrid.Rows[rowNum][colCount] = DBNull.Value;
                               }
                               if (dtGrid.Rows[rowNum][colCount] != DBNull.Value &&
                                   dtGrid.Rows[rowNum][colCount].ToString() != string.Empty &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2] != DBNull.Value &&
                                   dtCount.Rows[dtCount.Rows.Count - 1][2].ToString() != string.Empty)
                               {
                                   dtGrid.Rows[rowNum][colCount] = Convert.ToDouble(dtGrid.Rows[rowNum][colCount])/
                                                                   Convert.ToDouble(
                                                                       dtCount.Rows[dtCount.Rows.Count - 1][2]);

                                   sumBeforeLastYear = sumBeforeLastYear +
                                                       Convert.ToDouble(dtGrid.Rows[rowNum][colCount]);
                               }

                               numCol++;
                             
                               for (int i = colCount + 1; i < iEnd; i += 2)
                                   // все года, кроме первого и последнего выбранного
                               {
                                   if (dtCount.Rows[dtCount.Rows.Count - 1][numCol] == DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][numCol].ToString() == string.Empty)// если нет данных по численности
                                   {
                                       dtGrid.Rows[rowNum][i] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][i].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][numCol] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][numCol].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][i] = Convert.ToDouble(dtGrid.Rows[rowNum][i])/
                                                                Convert.ToDouble(
                                                                    dtCount.Rows[dtCount.Rows.Count - 1][numCol]);
                                       //
                                       if (i == colCount + 1)
                                       {
                                           if (dtGrid.Rows[rowNum][i-1] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i-1].ToString() != string.Empty &&
                                               dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                           {
                                               dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i])/
                                                                              Convert.ToDouble(
                                                                                  dtGrid.Rows[rowNum][i - 1])*100) -
                                                                             100)/100;
                                           }
                                       }
                                       else
                                       {
                                           if (dtGrid.Rows[rowNum][i-2] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i-2].ToString() != string.Empty &&
                                               dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                           {
                                               dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i])/
                                                                              Convert.ToDouble(
                                                                                  dtGrid.Rows[rowNum][i - 2])*100) -
                                                                             100)/100;
                                           }
                                       }
                                       sumLastYear = sumLastYear + Convert.ToDouble(dtGrid.Rows[rowNum][i]);
                                   }
                                   numCol++;
                               }

                               if (RadioButtonList1.SelectedIndex == 1)
                               {
                                   if (dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] == DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() ==
                                       string.Empty) // если нет данных по численности
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() !=
                                       string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6])/
                                           Convert.ToDouble(
                                               dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1]);
                                       sumThirdQuartCurYear = sumThirdQuartCurYear +
                                                              Convert.ToDouble(
                                                                  dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6]);
                                   }
                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6])/
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                           100;
                                   }

                                   if (dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] == DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() ==
                                       string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() !=
                                       string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4])/
                                           Convert.ToDouble(
                                               dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1]);

                                       sumThirdQuartCurYear = sumThirdQuartCurYear +
                                                              Convert.ToDouble(
                                                                  dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4]);
                                   }

                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4])/
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                           100;
                                   }

                                   if (dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] == DBNull.Value &&
                                        dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() ==string.Empty) // если нет данных по численности
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] = DBNull.Value;
                                   }

                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                 dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                 dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] != DBNull.Value &&
                                 dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() !=
                                 string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                           Convert.ToDouble(dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1]);
                                       sumThirdQuartCurYear = sumThirdQuartCurYear +
                                                              Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]);
                                   }
                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8]) * 100) - 100) / 100;
                                   }

                               }
                               else
                               {
                                   if (dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] == DBNull.Value &&
                                        dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() ==string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] = DBNull.Value;
                                   }
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                 dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                 dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1] != DBNull.Value &&
                                 dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1].ToString() !=
                                 string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] =
                                           Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                           Convert.ToDouble(dtCount.Rows[dtCount.Rows.Count - 1][dtCount.Columns.Count - 1]);
                                       sumThirdQuartCurYear = sumThirdQuartCurYear +
                                                              Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]);
                                   }
                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4]) * 100) - 100) / 100;
                                   }
                               }

                             

                           }
                           // итого
                        /*   double sumF = 0;
                           for (int i = colCount + 1; i < dtGrid.Columns.Count; i += 2)
                           {
                               double sum = 0;
                               for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                               {
                                   if (dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                   {
                                       sum += Convert.ToDouble(dtGrid.Rows[rowNum][i]);

                                   }
                               }
                               if (sum != 0)
                               {
                                   dtGrid.Rows[0][i] = sum;
                               }
                               else
                               {
                                   dtGrid.Rows[0][i] = DBNull.Value;
                               }
                           }

                           for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                           {
                               if (dtGrid.Rows[rowNum][colCount]!= DBNull.Value && dtGrid.Rows[rowNum][colCount].ToString()!= string.Empty)
                               {
                                 sumF += Convert.ToInt32(dtGrid.Rows[rowNum][colCount]);
                               }
                           }
                           if (sumF != 0)
                           {
                             dtGrid.Rows[0][colCount] = sumF;
                           }
                           else
                           {
                             dtGrid.Rows[0][colCount] = DBNull.Value;
                           }
                           */
                           // прирост
                          for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++) 
                           {
                               int numCol = 2;

                               numCol++;
                               for (int i = colCount + 1; i < iEnd; i += 2)
                                   // все года, кроме первого и последнего выбранного
                               {

                                   if (dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][i].ToString() != string.Empty &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][numCol] != DBNull.Value &&
                                       dtCount.Rows[dtCount.Rows.Count - 1][numCol].ToString() != string.Empty)
                                   {

                                       if (i == colCount + 1)
                                       {
                                           if (dtGrid.Rows[rowNum][i-1] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i-1].ToString() != string.Empty &&
                                               dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                           {
                                               dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i])/
                                                                              Convert.ToDouble(
                                                                                  dtGrid.Rows[rowNum][i - 1])*100) -
                                                                             100)/100;
                                           }
                                       }
                                       else
                                       {
                                           if (dtGrid.Rows[rowNum][i-2] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i-2].ToString() != string.Empty &&
                                               dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                               dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                           {
                                               dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i])/
                                                                              Convert.ToDouble(
                                                                                  dtGrid.Rows[rowNum][i - 2])*100) -
                                                                             100)/100;
                                           }
                                       }

                                   }
                                   numCol++;
                               }

                               if (RadioButtonList1.SelectedIndex == 1)
                               {
                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6])/
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                           100;
                                   }

                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4])/
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                           100;
                                   }

                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2])/
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                           100;
                                   }
                               }
                               else
                               {
                                   // прирост
                                   if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty)
                                   {
                                       dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                           ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                             Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4]) * 100) - 100) /
                                           100;
                                   }
                               }

                           }
                           
                       } 
                       dtGrid.AcceptChanges();
                       UltraWebGrid1.DataSource = dtGrid;
                   }
               }
           }
           else // ОМСУ
           {
               string query = DataProvider.GetQueryText("FO_0001_0003_XMAO_GridMO");
               dtGrid = new DataTable();
               DataProvidersFactory.PrimaryMASDataProvider.GetDataTableForChart(query,
                                                                                "Наименование муниципального образования",
                                                                                dtGrid);
               if (dtGrid.Rows.Count > 0)
               {

                   dtGrid.PrimaryKey = new DataColumn[] {dtGrid.Columns[0]};

                   query = DataProvider.GetQueryText("FO_0001_0003_XMAO_CountMO");
                   DataTable dtCount = new DataTable();
                   DataProvidersFactory.SpareMASDataProvider.GetDataTableForChart(query, "Численность", dtCount);

                   if (dtCount.Rows.Count > 0)
                   {   
                       if (selectedValues.Count == 1 || selectedValues.Count == 2)
                       {
                           double shValue;
                           int colCount =RadioButtonList1.SelectedIndex == 0 ? 13 : 25;

                           // расчет
                           for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                           {
                              if (double.TryParse(dtCount.Rows[rowNum][2].ToString(), out shValue) && shValue != 0) 
                               {
                                   string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()}; // наименование района
                                   DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                   if (rowSh != null)
                                   {
                                       if (rowSh[colCount] != DBNull.Value)
                                       {
                                           double value;
                                           if (double.TryParse(rowSh[colCount].ToString(), out value))
                                           {
                                               rowSh[colCount] = value / shValue;
                                           }
                                       }

                                       if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                                       {
                                           if (rowSh[colCount + 8] != DBNull.Value) // на 1000 чел 
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 8].ToString(), out value))
                                               {
                                                   rowSh[colCount + 8] = value/shValue;
                                               }
                                           }
                                       }
                                       else // год
                                       {
                                           if (rowSh[colCount + 4] != DBNull.Value) // на 1000 чел 
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 4].ToString(), out value))
                                               {
                                                   rowSh[colCount + 4] = value / shValue;
                                               }
                                           }
                                       }
                                   }
                               }
                              else // нет данных по численности
                              {
                                  string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() }; // наименование района
                                  DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                  if (rowSh != null)
                                  {
                                      if (rowSh[colCount] != DBNull.Value)
                                      {
                                          rowSh[colCount] = DBNull.Value;
                                      }

                                      if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                                      {
                                          if (rowSh[colCount + 8] != DBNull.Value) // на 1000 чел 
                                          {
                                              rowSh[colCount + 8] = DBNull.Value;
                                          }
                                      }
                                      else // год
                                      {
                                          if (rowSh[colCount + 4] != DBNull.Value) // на 1000 чел 
                                          {
                                              rowSh[colCount + 4] = DBNull.Value;
                                          }
                                      }
                                  }
                              }

                               if (double.TryParse(dtCount.Rows[rowNum][3].ToString(), out shValue) && shValue != 0)
                               {
                                   string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() }; // наименование района
                                   DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                   if (rowSh != null)
                                   {
                                       if (rowSh[colCount+2] != DBNull.Value)
                                       {
                                           double value;
                                           if (double.TryParse(rowSh[colCount+2].ToString(), out value))
                                           {
                                               rowSh[colCount+2] = value / shValue;
                                           }
                                       }
                                      if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                                       {
                                           if (rowSh[colCount + 4] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 4].ToString(), out value))
                                               {
                                                   rowSh[colCount + 4] = value/shValue;
                                               }
                                           }
                                           if (rowSh[colCount + 6] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 6].ToString(), out value))
                                               {
                                                   rowSh[colCount + 6] = value/shValue;
                                               }
                                           }

                                           // на 1000 чел
                                           if (rowSh[colCount + 10] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 10].ToString(), out value))
                                               {
                                                   rowSh[colCount + 10] = value/shValue;
                                               }
                                           }
                                           if (rowSh[colCount + 12] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 12].ToString(), out value))
                                               {
                                                   rowSh[colCount + 12] = value/shValue;
                                               }
                                           }
                                           if (rowSh[colCount + 14] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 14].ToString(), out value))
                                               {
                                                   rowSh[colCount + 14] = value/shValue;
                                               }
                                           }
                                       }
                                       else // год 
                                       {
                                          // на 1000 чел
                                           if (rowSh[colCount + 6] != DBNull.Value)
                                           {
                                               double value;
                                               if (double.TryParse(rowSh[colCount + 6].ToString(), out value))
                                               {
                                                   rowSh[colCount + 6] = value / shValue;
                                               }
                                           }
                                       }
                                   }
                             }
                            else
                               {
                                   string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() }; // наименование района
                                   DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                   if (rowSh != null)
                                   {
                                       if (rowSh[colCount + 2] != DBNull.Value)
                                       {
                                         rowSh[colCount + 2] = DBNull.Value;
                                       }
                                       if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                                       {
                                           if (rowSh[colCount + 4] != DBNull.Value)
                                           {
                                              rowSh[colCount + 4] = DBNull.Value;
                                           }
                                           if (rowSh[colCount + 6] != DBNull.Value)
                                           {
                                               rowSh[colCount + 6] = DBNull.Value;
                                           }

                                           // на 1000 чел
                                           if (rowSh[colCount + 10] != DBNull.Value)
                                           {
                                               rowSh[colCount + 10] = DBNull.Value;
                                           }
                                           if (rowSh[colCount + 12] != DBNull.Value)
                                           {
                                             rowSh[colCount + 12] = DBNull.Value;
                                           }
                                           if (rowSh[colCount + 14] != DBNull.Value)
                                           {
                                             rowSh[colCount + 14] = DBNull.Value;
                                           }
                                       }
                                       else // год 
                                       {
                                           // на 1000 чел
                                           if (rowSh[colCount + 6] != DBNull.Value)
                                           {
                                              rowSh[colCount + 6] = DBNull.Value;
                                              
                                           }
                                       }
                                   }
                               }

                           }
                        // итого
                           for (int i = colCount; i < dtGrid.Columns.Count; i += 2)
                           {  
                             /* double sum = 0;
                               for (int rowNum =1; rowNum<dtGrid.Rows.Count; rowNum++)
                               {
                                   if (dtGrid.Rows[rowNum][i]!= DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty )
                                   {
                                       sum += Convert.ToDouble(dtGrid.Rows[rowNum][i]);
                                   }
                                  
                               }

                               if (sum == 0)
                               {
                                   dtGrid.Rows[0][i] = DBNull.Value;
                               }
                               else
                               {
                                   dtGrid.Rows[0][i] = sum;
                               }
                              
                               if (dtGrid.Rows[0][i] != DBNull.Value && dtGrid.Rows[0][i].ToString() != string.Empty)
                               {
                                   dtGrid.Rows[0][i] = Convert.ToInt32(dtGrid.Rows[0][i]);
                              }
                              */ 
                           }

                           if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                           {
                               // прирост/ снижение
                               for (int i = colCount + 3; i < colCount + 8; i += 2)
                               {
                                   for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                                   {
                                       if (dtGrid.Rows[rowNum][i - 1] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][i - 1].ToString() != string.Empty &&
                                           dtGrid.Rows[rowNum][colCount] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][colCount].ToString() != string.Empty)
                                       {
                                           dtGrid.Rows[rowNum][i] = (((Convert.ToDouble(dtGrid.Rows[rowNum][i - 1])/
                                                                       Convert.ToDouble(dtGrid.Rows[rowNum][colCount]))*
                                                                      100) - 100)/100;
                                       }
                                   }
                               }

                               for (int i = colCount + 11; i < dtGrid.Columns.Count; i += 2)
                               {
                                   for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                                   {
                                       if (dtGrid.Rows[rowNum][i - 1] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][i - 1].ToString() != string.Empty &&
                                           dtGrid.Rows[rowNum][colCount + 8] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][colCount + 8].ToString() != string.Empty)
                                       {
                                           dtGrid.Rows[rowNum][i] = (((Convert.ToDouble(dtGrid.Rows[rowNum][i - 1])/
                                                                       Convert.ToDouble(
                                                                           dtGrid.Rows[rowNum][colCount + 8]))*100) -
                                                                     100)/100;
                                       }

                                   }
                               }
                           }
                           else
                           {
                               // прирост/ снижение
                               for (int i = colCount + 3; i < colCount + 4; i ++)
                               {
                                   for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                                   {
                                       if (dtGrid.Rows[rowNum][i - 1] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][i - 1].ToString() != string.Empty &&
                                           dtGrid.Rows[rowNum][colCount] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][colCount].ToString() != string.Empty)
                                       {
                                           dtGrid.Rows[rowNum][i] = (((Convert.ToDouble(dtGrid.Rows[rowNum][i - 1]) /
                                                                       Convert.ToDouble(dtGrid.Rows[rowNum][colCount])) *
                                                                      100) - 100) / 100;
                                       }
                                   }
                               }

                               for (int i = colCount + 7; i < dtGrid.Columns.Count; i ++)
                               {
                                   for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                                   {
                                       if (dtGrid.Rows[rowNum][i - 1] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][i - 1].ToString() != string.Empty &&
                                           dtGrid.Rows[rowNum][colCount + 4] != DBNull.Value &&
                                           dtGrid.Rows[rowNum][colCount + 4].ToString() != string.Empty)
                                       {
                                           dtGrid.Rows[rowNum][i] = (((Convert.ToDouble(dtGrid.Rows[rowNum][i - 1]) /
                                                                       Convert.ToDouble(
                                                                           dtGrid.Rows[rowNum][colCount + 4])) * 100) -
                                                                     100) / 100;
                                       }

                                   }
                               }
                           }


                       }
                     else // выбрано несколько лет
                     {
                        double shValue;
                        int colCount = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 3 + 1 : (7 + (selectedValues.Count - 2) * 2) * 3 + 1;
                        int numCol;
                        for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++) //  не пропускаем строку итого
                        {  
                            numCol = 2;

                        // на 1 жителя

                            colCount = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 3 + 1 : (7 + (selectedValues.Count - 2) * 2) * 3 + 1;

                            // первый год (без прироста)
                            if (double.TryParse(dtCount.Rows[rowNum][2].ToString(), out shValue) && shValue != 0)
                            {
                                string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                    if (rowSh[colCount] != DBNull.Value)
                                    {
                                        double value;
                                        if (double.TryParse(rowSh[colCount].ToString(), out value))
                                        {
                                            rowSh[colCount] = value / shValue;
                                        }
                                    }

                                }
                            }
                            else // нет данных по численности
                            {
                                string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                    rowSh[colCount] = DBNull.Value;
                                    
                                }
                            }

                            // все года (кроме первого и последнего), с приростом
                            numCol++;
                            int minus = (selectedValues.Count - 2)*2 + 1;
                            for (int i = colCount + 1; i < colCount + minus; i += 2)
                            {
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) && shValue != 0)
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[i] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[i].ToString(), out value))
                                            {
                                                rowSh[i] = value / shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                       rowSh[i] = DBNull.Value;
                                    }
                                }

                                numCol++;
                            }

                            // последний год, в разбивке по кварталам
                            numCol = dtCount.Columns.Count - 1;
                            if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) && shValue != 0)
                            {
                                string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                    if (rowSh[colCount+minus] != DBNull.Value)
                                    {
                                        double value;
                                        if (double.TryParse(rowSh[colCount+minus].ToString(), out value))
                                        {
                                            rowSh[colCount+minus] = value / shValue;
                                        }
                                    }

                                }
                            }
                            else // нет данных по численности
                            {
                                string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                  rowSh[colCount + minus] = DBNull.Value;
                                  
                                }
                            }

                            if (RadioButtonList1.SelectedIndex == 1) // выводим год + квартал
                            {
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount + minus + 2] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount + minus + 2].ToString(), out value))
                                            {
                                                rowSh[colCount + minus + 2] = value/shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                       rowSh[colCount + minus + 2] = DBNull.Value;
                                    }
                                }


                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount + minus + 4] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount + minus + 4].ToString(), out value))
                                            {
                                                rowSh[colCount + minus + 4] = value/shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                       rowSh[colCount + minus + 4] = DBNull.Value;
                                    }
                                }
                            }

                          // на 1000 чел
                            numCol = 2;
                            colCount = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 4 + 1 : (7 + (selectedValues.Count - 2) * 2) * 4 + 1 ;
                            // первый год (без прироста)
                            if (double.TryParse(dtCount.Rows[rowNum][2].ToString(), out shValue) && shValue != 0)
                            {
                                string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                    if (rowSh[colCount] != DBNull.Value)
                                    {
                                        double value;
                                        if (double.TryParse(rowSh[colCount].ToString(), out value))
                                        {
                                            rowSh[colCount] = value/shValue;
                                        }
                                    }
                                    
                                }
                            }
                            else // нет данных по численности
                            {
                                string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                // наименование района
                                DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                if (rowSh != null)
                                {
                                    rowSh[colCount] = DBNull.Value;
                                }
                            }

                            // прошлые года (с приростом)
                            numCol ++;
                            int iEnd = RadioButtonList1.SelectedIndex == 1
                                           ? dtGrid.Columns.Count - 6
                                           : dtGrid.Columns.Count - 2;

                            for (int i = colCount + 1; i < iEnd; i += 2)
                            {
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) && shValue != 0)
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[i].ToString(), out value))
                                            {
                                                rowSh[i] = value / shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                       rowSh[i] = DBNull.Value;
                                    }
                                }

                                numCol++;
                             }
                          
                              
                            // квартальные значения последнего года
                            if (RadioButtonList1.SelectedIndex == 1) // год + квартал
                            {
                                numCol = dtCount.Columns.Count - 1;
                                colCount = dtGrid.Columns.Count - 6;
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount].ToString(), out value))
                                            {
                                                rowSh[colCount] = value/shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        rowSh[colCount] = DBNull.Value;
                                    }
                                }

                                colCount = dtGrid.Columns.Count - 4;
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount].ToString(), out value))
                                            {
                                                rowSh[colCount] = value/shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                      rowSh[colCount] = DBNull.Value;
                                    }
                                }

                                colCount = dtGrid.Columns.Count - 2;
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] {dtCount.Rows[rowNum][0].ToString()};
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount].ToString(), out value))
                                            {
                                                rowSh[colCount] = value/shValue;
                                            }
                                        }

                                    }
                                }
                                else // нет данных по численности
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                       rowSh[colCount] = DBNull.Value;
                                    }
                                }
                            }
                            else // выводим год
                            {
                                numCol = dtCount.Columns.Count - 1;
                                colCount = dtGrid.Columns.Count - 2;
                                if (double.TryParse(dtCount.Rows[rowNum][numCol].ToString(), out shValue) &&
                                    shValue != 0)
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        if (rowSh[colCount] != DBNull.Value)
                                        {
                                            double value;
                                            if (double.TryParse(rowSh[colCount].ToString(), out value))
                                            {
                                                rowSh[colCount] = value / shValue;
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    string[] rowNameSh = new string[] { dtCount.Rows[rowNum][0].ToString() };
                                    // наименование района
                                    DataRow rowSh = dtGrid.Rows.Find(rowNameSh);
                                    if (rowSh != null)
                                    {
                                        rowSh[colCount] = DBNull.Value;
                                    }
                                }

                            }
                        }

                        // итого 1000 (чел)
                       colCount = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 4 + 1 : (7 + (selectedValues.Count - 2) * 2) * 4 + 1;
                       double sumF1 = 0;

                        for (int i = colCount + 1; i < dtGrid.Columns.Count; i += 2)
                        {
                           /* double sum = 0;
                            for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                            {
                                if (dtGrid.Rows[rowNum][i] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                {
                                    sum += Convert.ToDouble(dtGrid.Rows[rowNum][i]);

                                }
                            }
                            if (sum != 0)
                            {
                                dtGrid.Rows[0][i] = sum;
                            }
                            else
                            {
                                dtGrid.Rows[0][i] = DBNull.Value;
                            }
                           

                            if (dtGrid.Rows[0][i] != DBNull.Value && dtGrid.Rows[0][i].ToString() != string.Empty)
                            {
                              dtGrid.Rows[0][i] = Convert.ToInt32(dtGrid.Rows[0][i]);
                            }
                            */ 
                        }

                        for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                        {
                            if (dtGrid.Rows[rowNum][colCount] != DBNull.Value && dtGrid.Rows[rowNum][colCount].ToString() != string.Empty)
                            {
                                sumF1 += Convert.ToInt32(dtGrid.Rows[rowNum][colCount]);
                            }
                        }

                       /* if (sumF1 != 0)
                        {
                            dtGrid.Rows[0][colCount] = sumF1;
                        }
                        else
                        {
                            dtGrid.Rows[0][colCount] = DBNull.Value;
                        }
                           

                        if (dtGrid.Rows[0][colCount] != DBNull.Value && dtGrid.Rows[0][colCount].ToString() != string.Empty)
                        {
                            dtGrid.Rows[0][colCount] = dtGrid.Rows[0][colCount];
                        }
                           */
                         // прирост
                       for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++) 
                        {
                            numCol = 2;
                            numCol++;
                            int iEnd = RadioButtonList1.SelectedIndex == 1
                                          ? dtGrid.Columns.Count - 6
                                          : dtGrid.Columns.Count - 2; 

                            for (int i = colCount + 1; i < iEnd; i += 2)
                            // все года, кроме первого и последнего выбранного
                            {

                                if (dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty &&
                                    dtCount.Rows[dtCount.Rows.Count - 1][numCol] != DBNull.Value && dtCount.Rows[dtCount.Rows.Count - 1][numCol].ToString() != string.Empty)
                                {

                                    if (i == colCount + 1)
                                    {
                                        if (dtGrid.Rows[rowNum][i-1] != DBNull.Value && dtGrid.Rows[rowNum][i -1].ToString() != string.Empty &&
                                            dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                        {
                                            dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i]) /
                                                                           Convert.ToDouble(
                                                                               dtGrid.Rows[rowNum][i - 1]) * 100) -
                                                                          100) / 100;
                                        }
                                    }
                                    else
                                    {
                                        if (dtGrid.Rows[rowNum][i -2] != DBNull.Value && dtGrid.Rows[rowNum][i -2].ToString() != string.Empty &&
                                            dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                        {
                                            dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i]) /
                                                                           Convert.ToDouble(
                                                                               dtGrid.Rows[rowNum][i - 2]) * 100) -
                                                                          100) / 100;
                                        }
                                    }

                                }
                                numCol++;
                            }
                            if (RadioButtonList1.SelectedIndex == 1)
                            {
                                // прирост
                                if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6].ToString() != string.Empty &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6 + 1] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 6])/
                                          Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                        100;
                                }

                                // прирост
                                if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4 + 1] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4])/
                                          Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                        100;
                                }

                                // прирост
                                if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2])/
                                          Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 8])*100) - 100)/
                                        100;
                                }
                            }
                            else
                            {
                                if (dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2] != DBNull.Value &&
                                   dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2].ToString() != string.Empty &&
                                   dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4] != DBNull.Value &&
                                   dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2 + 1] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 2]) /
                                          Convert.ToDouble(dtGrid.Rows[rowNum][dtGrid.Columns.Count - 4]) * 100) - 100) /
                                        100;
                                }
                            }
                        }

                        // итого (на 1 жителя)
                       double sumF = 0;
                       colCount = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 3 + 1 : (7 + (selectedValues.Count - 2) * 2) * 3 + 1;
                       int end = RadioButtonList1.SelectedIndex == 0 ? (3 + (selectedValues.Count - 2) * 2) * 4 + 1 : (7 + (selectedValues.Count - 2) * 2) * 4 + 1;

                        for (int i = colCount + 1; i < end; i += 2)
                        {
                         /*   double sum = 0;
                            for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                            {
                                if (dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty)
                                {
                                    sum += Convert.ToDouble(dtGrid.Rows[rowNum][i]);

                                }
                            }
                            if (sum == 0)
                            {
                                dtGrid.Rows[0][i] = DBNull.Value;
                            }
                            else
                            {
                                dtGrid.Rows[0][i] = sum;
                            }
                          
                           if ( dtGrid.Rows[0][i] != DBNull.Value &&  dtGrid.Rows[0][i].ToString() != string.Empty )
                           {
                               dtGrid.Rows[0][i] = Convert.ToInt32(dtGrid.Rows[0][i]);
                           }
                            */
                        }

                      /*  for (int rowNum = 1; rowNum < dtGrid.Rows.Count; rowNum++)
                        {
                            if (dtGrid.Rows[rowNum][colCount] != DBNull.Value && dtGrid.Rows[rowNum][colCount].ToString() != string.Empty)
                            {
                                sumF += Convert.ToInt32(dtGrid.Rows[rowNum][colCount]);
                            }
                        }
                       if (sumF == 0)
                        {
                            dtGrid.Rows[0][colCount] = DBNull.Value;
                        }
                        else
                        {
                          dtGrid.Rows[0][colCount] = sumF;
                        }
                           
                        if (dtGrid.Rows[0][colCount] != DBNull.Value && dtGrid.Rows[0][colCount].ToString() != string.Empty)
                        {
                            dtGrid.Rows[0][colCount] = Convert.ToInt32(dtGrid.Rows[0][colCount]);
                        }*/

                         // прирост/снижение (1 житель)

                     for (int rowNum = 0; rowNum < dtGrid.Rows.Count; rowNum++)
                        {
                            numCol = 2;
                            numCol++;
                            int minus = (selectedValues.Count - 2) * 2 + 1;
                            for (int i = colCount + 1; i < colCount + minus; i += 2)
                            // все года, кроме первого и последнего выбранного
                            {
                                if (i == colCount + 1)
                                    {
                                        if (dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty &&
                                            dtGrid.Rows[rowNum][i-1] != DBNull.Value && dtGrid.Rows[rowNum][i-1].ToString() != string.Empty)
                                        {
                                            dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i]) / Convert.ToDouble(
                                                                               dtGrid.Rows[rowNum][i - 1]) * 100) - 100) / 100;
                                        }
                                    }
                                    else
                                    {
                                        if (dtGrid.Rows[rowNum][i] != DBNull.Value && dtGrid.Rows[rowNum][i].ToString() != string.Empty &&
                                            dtGrid.Rows[rowNum][i-2] != DBNull.Value && dtGrid.Rows[rowNum][i-2].ToString() != string.Empty)
                                        {
                                            dtGrid.Rows[rowNum][i + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][i]) /
                                                                           Convert.ToDouble( dtGrid.Rows[rowNum][i - 2]) * 100) -
                                                                          100) / 100;
                                        }
                                    }

                               numCol++;
                            }

                            // прирост
                            if (dtGrid.Rows[rowNum][colCount + minus] != DBNull.Value && dtGrid.Rows[rowNum][colCount + minus].ToString() != string.Empty &&
                                dtGrid.Rows[rowNum][colCount + 1] != DBNull.Value && dtGrid.Rows[rowNum][colCount + 1].ToString() != string.Empty)
                            {
                                dtGrid.Rows[rowNum][colCount + minus + 1] = ((Convert.ToDouble(dtGrid.Rows[rowNum][colCount + minus]) /
                                      Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 1]) * 100) - 100) / 100;
                            }

                            if (RadioButtonList1.SelectedIndex == 1) // выводим год + квартал
                            {
                                // прирост
                                if (dtGrid.Rows[rowNum][colCount + minus + 2] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][colCount + minus + 2].ToString() != string.Empty &&
                                    dtGrid.Rows[rowNum][colCount + 1] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][colCount + 1].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][colCount + minus + 3] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][colCount + minus + 2])/
                                          Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 1])*100) - 100)/100;
                                }

                                // прирост
                                if (dtGrid.Rows[rowNum][colCount + minus + 4] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][colCount + minus + 4].ToString() != string.Empty &&
                                    dtGrid.Rows[rowNum][colCount + 1] != DBNull.Value &&
                                    dtGrid.Rows[rowNum][colCount + 1].ToString() != string.Empty)
                                {
                                    dtGrid.Rows[rowNum][colCount + minus + 5] =
                                        ((Convert.ToDouble(dtGrid.Rows[rowNum][colCount + minus + 4])/
                                          Convert.ToDouble(dtGrid.Rows[rowNum][colCount + 1])*100) - 100)/100;
                                }
                            }
                        }
                    
                          
                     }
                       UltraWebGrid1.DataSource = dtGrid;
                   }
                   
               }
           }
       }

        protected void UltraWebGrid_InitializeLayout(Object sender, LayoutEventArgs e)
        {
            e.Layout.GroupByBox.Hidden = true;
            e.Layout.HeaderStyleDefault.Wrap = true;
            e.Layout.HeaderStyleDefault.HorizontalAlign = HorizontalAlign.Center;

            if (e.Layout.Bands[0].Columns.Count == 0)
            {
                return;
            }
            
            e.Layout.Bands[0].Columns[0].CellStyle.Wrap = true;
            e.Layout.Bands[0].Columns[0].Width = CRHelper.GetColumnWidth(200);
            string name = DebtKindButtonList.SelectedIndex == 0 ? "ОГВ" : "ОМСУ" ;
            
            if (selectedValues.Count == 1 ) // если выбран один  год
                {
                    headerLayout.AddCell("Наименование государственного органа");
                    GridHeaderCell cell0 = headerLayout.AddCell("Утверждено штатных единиц по должностям в штатном расписании на отчетную дату, чел.");
                    cell0.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0]) - 1), string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", Convert.ToInt32(selectedValues[0]) - 1));
                    cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]) - 1, Convert.ToInt32(selectedValues[0]) - 2), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell0.AddCell(string.Format("01.07.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.07.{0} г.",
                                          selectedValues[0]));
                        cell0.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[0] ), "Прирост/снижение относительно прошлого отчетного года");
                        cell0.AddCell(string.Format("01.10.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.10.{0} г.",
                                          selectedValues[0]));
                        cell0.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)",selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell0.AddCell(string.Format("На {0} год", selectedValues[0]), string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", selectedValues[0]));
                        cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell0.AddCell((flag) ? string.Format("{0} год", selectedValues[0]) :string.Format("На {0:dd.MM.yyyy} г.", currentDate),(flag) ?  string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", selectedValues[0]) : string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0:dd.MM.yyyy} г.", currentDate));
                        cell0.AddCell(flag ? string.Format("Прирост / снижение в % ({0} г. к {1} г.)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)",currentDate, selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    

                    GridHeaderCell cell1 = headerLayout.AddCell((useStack.Checked) ? "Расходы на содержание, тыс.руб." : "Фактические расходы на содержание, тыс.руб.");
                    cell1.AddCell(string.Format((useStack.Checked) ? "Факт за {0} год" : "{0} год", Convert.ToInt32(selectedValues[0]) - 1), string.Format("Фактические расходы на содержание {1} в {0} году", Convert.ToInt32(selectedValues[0]) - 1,name));
                    cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0])-1), "Прирост/снижение относительно прошлого отчетного года");
                    
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.07.{0} г.) " : "01.07.{0} г.",selectedValues[0]),
                            (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.07.{0} г.)", selectedValues[0] ) :
                            string.Format("Фактические расходы на содержание {1} по состоянию на  01.07.{0} г.",selectedValues[0], name));

                        cell1.AddCell((useStack.Checked) ? string.Format("Прирост / снижение в % ({0} год к {1} году)",selectedValues[0] , Convert.ToInt32(selectedValues[0])-1) : string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[0] ), "Прирост/снижение относительно прошлого отчетного года");

                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.10.{0} г.) " : "01.10.{0} г.",
                                          selectedValues[0]),
                            (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.10.{0} г.)", selectedValues[0]) :
                            string.Format("Фактические расходы на содержание {1} по состоянию на 01.10.{0} г.",
                                          selectedValues[0], name));

                        cell1.AddCell((useStack.Checked) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год" : "{0} год", selectedValues[0]), (useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год", selectedValues[0]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[0], currentDate) : string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[0], name));
                        cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0])-1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год " : (flag) ? "{0} год" : "На {1:dd.MM.yyyy} г.", selectedValues[0], currentDate), (useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год", selectedValues[0]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[0], currentDate) : flag ? string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[0], name) : string.Format("Фактические расходы на содержание {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                        cell1.AddCell( (useStack.Checked) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : (flag) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} год к 01.01.{1} году)",currentDate,selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    

                    GridHeaderCell cell2 = headerLayout.AddCell("Расходы на содержание 1 штатной единицы, тыс.руб.");
                    cell2.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0]) - 1), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", Convert.ToInt32(selectedValues[0]) - 1, name));
                    cell2.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]) - 1, Convert.ToInt32(selectedValues[0]) - 2), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell2.AddCell(string.Format("01.07.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Расходы на содержание 1 штатной единицы {1} по состоянию на  01.07.{0} г.",
                                          selectedValues[0], name));

                        cell2.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell2.AddCell(string.Format("01.10.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Расходы на содержание 1 штатной единицы {1} по состоянию на 01.10.{0} г.",
                                          selectedValues[0], name));

                        cell2.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell2.AddCell(string.Format("{0} год", selectedValues[0]), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[0], name));
                        cell2.AddCell(string.Format("Прирост / снижение в % ({0} г. к {1} г.)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                      cell2.AddCell(flag ? string.Format("{0} год", selectedValues[0]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[0], name));
                      cell2.AddCell((!flag) ? string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)",currentDate, selectedValues[0]) : string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");    
                    }
                    
                    GridHeaderCell cell3 =
                        headerLayout.AddCell("Расходы на содержание в расчете на 1 жителя, тыс.руб./чел.");
                    cell3.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0]) - 1), string.Format("Расходы на содержание в расчете на 1 жителя  в {0} году", Convert.ToInt32(selectedValues[0]) - 1));
                    cell3.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)",Convert.ToInt32(selectedValues[0]) - 1, Convert.ToInt32(selectedValues[0]) - 2), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell3.AddCell(string.Format("01.07.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Расходы на содержание в расчете на 1 жителя по состоянию на  01.07.{0} г.",
                                          selectedValues[0]));

                        cell3.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell3.AddCell(string.Format("01.10.{0} г.", selectedValues[0]),
                                      string.Format(
                                          "Расходы на содержание в расчете на 1 жителя по состоянию на 01.10.{0} г.",
                                          selectedValues[0]));

                        cell3.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                        cell3.AddCell(string.Format("{0} год", selectedValues[0]), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[0], name));
                        cell3.AddCell(string.Format("Прирост / снижение в % ({0} г. к {1} г.)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell3.AddCell(flag ? string.Format("{0} год", selectedValues[0]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate),flag ? string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[0], name) : string.Format("Расходы на содержание 1 штатной единицы {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                        cell3.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0])-1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");
                    }

                    if (DebtKindButtonList.SelectedIndex == 1) // ОМСУ
                    {
                        GridHeaderCell cell4 = headerLayout.AddCell("Численность работников ОМСУ МО в расчете 1 000 жителей МО");
                        cell4.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0]) - 1), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", Convert.ToInt32(selectedValues[0]) - 1));
                        cell4.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]) - 1, Convert.ToInt32(selectedValues[0]) - 2), "Прирост/снижение относительно прошлого отчетного года");
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell4.AddCell(string.Format("01.07.{0} г.", selectedValues[0]),
                                          string.Format(
                                              "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.07.{0} г.",
                                              selectedValues[0]));
                            cell4.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");
                            cell4.AddCell(string.Format("01.10.{0} г.", selectedValues[0]),
                                          string.Format(
                                              "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.10.{0} г.",
                                              selectedValues[0]));
                            cell4.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");

                            cell4.AddCell(string.Format("{0} год", selectedValues[0]), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[0]));
                            cell4.AddCell(string.Format("Прирост / снижение в % ({0} г. к {1} г.)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        else
                        {
                            cell4.AddCell(flag ? string.Format("{0} год", selectedValues[0]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[0]) : string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО на {0:dd.MM.yyyy} г.", currentDate));
                            cell4.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[0]), "Прирост/снижение относительно прошлого отчетного года");
                        }
                    }

                }
                else if (selectedValues.Count == 2) // выбрано два года
                {
                    headerLayout.AddCell("Наименование государственного органа");
                    GridHeaderCell cell0 = headerLayout.AddCell("Утверждено штатных единиц по должностям в штатном расписании на отчетную дату, чел.");
                    cell0.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0])), string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", Convert.ToInt32(selectedValues[0])));
                    cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]), Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell0.AddCell(string.Format("01.07.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.07.{0} г.",
                                          selectedValues[1]));
                        cell0.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                        cell0.AddCell(string.Format("01.10.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.10.{0} г.",
                                          selectedValues[1]));
                        cell0.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");

                        cell0.AddCell(string.Format("{0} год", selectedValues[1]), string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", selectedValues[1]));
                        cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell0.AddCell((flag) ? string.Format("{0} год", selectedValues[1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), (flag) ? string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", selectedValues[1]) : string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0:dd.MM.yyyy} г.", currentDate));
                        cell0.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)", currentDate, selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    

                    GridHeaderCell cell1 = headerLayout.AddCell((useStack.Checked) ? "Расходы на содержание, тыс.руб." : "Фактические расходы на содержание, тыс.руб.");
                    cell1.AddCell(string.Format((useStack.Checked) ? "Факт за {0} год" : "{0} год", Convert.ToInt32(selectedValues[0])), string.Format("Фактические расходы на содержание {1} в {0} год", Convert.ToInt32(selectedValues[0]), name ));
                    cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell1.AddCell(
                            string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.07.{0} г.)" : "01.07.{0} г.",
                                          selectedValues[1]),
                                          (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.07.{0} г.)", selectedValues[1]) :
                            string.Format("Фактические расходы на содержание {1} по состоянию на  01.07.{0} г.",
                                          selectedValues[1], name));
                        cell1.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                        cell1.AddCell(
                            string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.10.{0} г.)" : "01.10.{0} г.",
                                          selectedValues[1]),
                           (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.10.{0} г.)", selectedValues[0]) :
                            string.Format("Фактические расходы на содержание {1} по состоянию на 01.10.{0} г.",
                                          selectedValues[1], name));
                        cell1.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");

                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год" : "{0} год", selectedValues[1]), (useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год", selectedValues[1]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[1], currentDate): string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[1], name));
                        cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[0], Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");

                    }
                    else
                    {
                        cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год " : (flag) ? "{0} год" : "На {1:dd.MM.yyyy} г.", selectedValues[1], currentDate), (useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год", selectedValues[1]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[1], currentDate) : flag ? string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[1], name) : string.Format("Фактические расходы на содержание {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                        cell1.AddCell((useStack.Checked) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1) : (flag) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} год к 01.01.{1} году)", currentDate ,selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    
                    GridHeaderCell cell2 = headerLayout.AddCell("Расходы на содержание 1 штатной единицы, тыс.руб.");
                    cell2.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0])), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", Convert.ToInt32(selectedValues[0]), name));
                    cell2.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]), Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell2.AddCell(string.Format("01.07.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Расходы на содержание 1 штатной единицы {1} по состоянию на  01.07.{0} г.",
                                          selectedValues[1], name));

                        cell2.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                        cell2.AddCell(string.Format("01.10.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Расходы на содержание 1 штатной единицы {1} по состоянию на 01.10.{0} г.",
                                          selectedValues[1], name));

                        cell2.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");

                        cell2.AddCell(string.Format("{0} год", selectedValues[1]), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[1], name));
                        cell2.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell2.AddCell(flag ? string.Format("{0} год", selectedValues[1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[1], name));
                        cell2.AddCell((!flag) ? string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)", currentDate, selectedValues[1]) : string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1), "Прирост/снижение относительно прошлого отчетного года");    
                    }
                    

                    GridHeaderCell cell3 =
                        headerLayout.AddCell("Расходы на содержание в расчете на 1 жителя, тыс.руб./чел.");
                    cell3.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0])), string.Format("Расходы на содержание в расчете на 1 жителя  в {0} году", Convert.ToInt32(selectedValues[0])));
                    cell3.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]), Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    if (RadioButtonList1.SelectedIndex == 1)
                    {
                        cell3.AddCell(string.Format("01.07.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Расходы на содержание в расчете на 1 жителя по состоянию на  01.07.{0} г.",
                                          selectedValues[1]));
                        cell3.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                        cell3.AddCell(string.Format("01.10.{0} г.", selectedValues[1]),
                                      string.Format(
                                          "Расходы на содержание в расчете на 1 жителя по состоянию на 01.10.{0} г.",
                                          selectedValues[1]));
                        cell3.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");

                        cell3.AddCell(string.Format("{0} год", selectedValues[1]), string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[1], name));
                        cell3.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                    }
                    else
                    {
                        cell3.AddCell(flag ? string.Format("{0} год", selectedValues[1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[1], name) : string.Format("Расходы на содержание 1 штатной единицы {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                        cell3.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                    }

                    if (DebtKindButtonList.SelectedIndex == 1) // ОМСУ
                    {
                        GridHeaderCell cell4 = headerLayout.AddCell("Численность работников ОМСУ МО в расчете 1 000 жителей МО");
                        cell4.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0])), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", Convert.ToInt32(selectedValues[0])));
                        cell4.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[0]), Convert.ToInt32(selectedValues[0]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell4.AddCell(string.Format("01.07.{0} г.", selectedValues[1]),
                                          string.Format(
                                              "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.07.{0} г.",
                                              selectedValues[1]));
                            cell4.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell4.AddCell(string.Format("01.10.{0} г.", selectedValues[1]),
                                          string.Format(
                                              "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.10.{0} г.",
                                              selectedValues[1]));
                            cell4.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");

                            cell4.AddCell(string.Format("{0} год", selectedValues[1]), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[1]));
                            cell4.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        else
                        {
                            cell4.AddCell(flag ? string.Format("{0} год", selectedValues[1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[1]) : string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО на {0:dd.MM.yyyy} г.", currentDate));
                            cell4.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[1], Convert.ToInt32(selectedValues[1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[1]), "Прирост/снижение относительно прошлого отчетного года");
                        }
                    }
                }
                else // выбрано несколько лет
                {
                       headerLayout.AddCell("Наименование государственного органа");
                        GridHeaderCell cell0 = headerLayout.AddCell("Утверждено штатных единиц по должностям в штатном расписании на отчетную дату, чел.");
                        cell0.AddCell(string.Format("{0} год", Convert.ToInt32(selectedValues[0])),string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год",
                                          Convert.ToInt32(selectedValues[0])));

                        for (int i = 1; i < selectedValues.Count - 1; i++)
                        {
                            cell0.AddCell(string.Format("{0} год", selectedValues[i]),
                                          string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год",selectedValues[i]));
                            cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[i]), Convert.ToInt32(selectedValues[i]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell0.AddCell(string.Format("01.07.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.07.{0} г.",
                                              selectedValues[selectedValues.Count - 1]));
                            cell0.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell0.AddCell(string.Format("01.10.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Утверждено штатных единиц по должностям в штатном расписании по состоянию на 01.10.{0} г.",
                                              selectedValues[selectedValues.Count - 1]));
                            cell0.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");

                            cell0.AddCell(string.Format("{0} год", selectedValues[selectedValues.Count - 1]),
                                     string.Format(
                                         "Утверждено штатных единиц по должностям в штатном расписании на {0} год",
                                         selectedValues[selectedValues.Count - 1]));
                            cell0.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[selectedValues.Count - 1]), Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        else
                        {
                          cell0.AddCell((flag) ? string.Format("{0} год", selectedValues[selectedValues.Count - 1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), (flag) ? string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0} год", selectedValues[selectedValues.Count - 1]) : string.Format("Утверждено штатных единиц по должностям в штатном расписании на {0:dd.MM.yyyy} г.", currentDate));
                          cell0.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)", currentDate, selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                        }
                   

                        GridHeaderCell cell1 =
                            headerLayout.AddCell((useStack.Checked)
                                                     ? "Расходы на содержание, тыс.руб."
                                                     : "Фактические расходы на содержание, тыс.руб.");
                        cell1.AddCell(
                            string.Format((useStack.Checked) ? "Факт за {0} год" : "{0} год", selectedValues[0]),
                            string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[0],name));

                        for (int i = 1; i < selectedValues.Count - 1; i++)
                        {
                            cell1.AddCell(
                                string.Format((useStack.Checked) ? "Факт за {0} год" : "{0} год", selectedValues[i]),
                                string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[i], name));
                            cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[i]), Convert.ToInt32(selectedValues[i]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell1.AddCell(
                                string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.07.{0} г.)" : "01.07.{0} г.",
                                              selectedValues[selectedValues.Count - 1]),
                                              (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.07.{0} г.)", selectedValues[selectedValues.Count - 1]) :
                                string.Format("Фактические расходы на содержание {1} по состоянию на  01.07.{0} г.",
                                              selectedValues[selectedValues.Count - 1], name));
                            cell1.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell1.AddCell(
                                string.Format((useStack.Checked) ? "Утверждено на {0} год (по состоянию на 01.10.{0} г.)" : "01.10.{0} г.",
                                              selectedValues[selectedValues.Count - 1]),
                               (useStack.Checked) ? string.Format("Утверждено расходов на содержание на {0} год (по состоянию на 01.10.{0} г.)", selectedValues[selectedValues.Count - 1]) :
                                string.Format("Фактические расходы на содержание {1} по состоянию на 01.10.{0} г.",
                                              selectedValues[selectedValues.Count - 1], name));
                            cell1.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            
                            cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год" : "{0} год",selectedValues[selectedValues.Count - 1], currentDate),(useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год)", selectedValues[selectedValues.Count-1]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[selectedValues.Count-1], currentDate) :string.Format("Фактические расходы на содержание {1} в {0} году",selectedValues[selectedValues.Count - 1], name));
                            cell1.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[selectedValues.Count - 1]), Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");

                        }
                        else
                        {

                            cell1.AddCell(string.Format((useStack.Checked) ? "Утверждено на {0} год " : (flag) ? "{0} год" : "На {1:dd.MM.yyyy} г.", selectedValues[selectedValues.Count - 1], currentDate), (useStack.Checked) ? flag ? string.Format("Утверждено расходов на содержание на {0} год", selectedValues[selectedValues.Count - 1]) : string.Format("Утверждено расходов на содержание на {0} год (по состоянию на {1:dd.MM.yyyy} г.)", selectedValues[selectedValues.Count - 1], currentDate) : flag ? string.Format("Фактические расходы на содержание {1} в {0} году", selectedValues[selectedValues.Count - 1], name) : string.Format("Фактические расходы на содержание {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                            cell1.AddCell((useStack.Checked) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1) : (flag) ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)", currentDate, selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");

                        }
                    
                        GridHeaderCell cell2 = headerLayout.AddCell("Расходы на содержание 1 штатной единицы, тыс.руб.");
                        cell2.AddCell(string.Format("{0} год", selectedValues[0]),
                                      string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году",
                                                    selectedValues[0], name));

                        for (int i = 1; i < selectedValues.Count - 1; i++)
                        {
                            cell2.AddCell(string.Format("{0} год", selectedValues[i]),
                                          string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году",
                                                        selectedValues[i], name));
                            cell2.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[i]), Convert.ToInt32(selectedValues[i]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell2.AddCell(string.Format("01.07.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Расходы на содержание 1 штатной единицы {1} по состоянию на  01.07.{0} г.",
                                              selectedValues[selectedValues.Count - 1], name));
                            cell2.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell2.AddCell(string.Format("01.10.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Расходы на содержание 1 штатной единицы {1} по состоянию на 01.10.{0} г.",
                                              selectedValues[selectedValues.Count - 1], name));
                            cell2.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell2.AddCell(string.Format("{0} год", selectedValues[selectedValues.Count - 1]),
                                      string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году",
                                                    selectedValues[selectedValues.Count - 1], name));
                            cell2.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[selectedValues.Count - 1]), Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");

                        }
                        else
                        {
                            cell2.AddCell(flag ? string.Format("{0} год", selectedValues[selectedValues.Count - 1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[selectedValues.Count - 1], name) : string.Format("Расходы на содержание 1 штатной единицы {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                            cell2.AddCell((!flag) ? string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1} г.)", currentDate, selectedValues[selectedValues.Count - 1]) : string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");    

                        }
                    
                        GridHeaderCell cell3 =
                            headerLayout.AddCell("Расходы на содержание в расчете на 1 жителя, тыс.руб./чел.");
                        cell3.AddCell(string.Format("{0} год", selectedValues[0]),
                                      string.Format("Расходы на содержание в расчете на 1 жителя в {0} году",
                                                    selectedValues[0]));

                        for (int i = 1; i < selectedValues.Count - 1; i++)
                        {
                            cell3.AddCell(string.Format("{0} год", selectedValues[i]),
                                          string.Format("Расходы на содержание в расчете на 1 жителя  в {0} году",
                                                        selectedValues[i]));
                            cell3.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[i]), Convert.ToInt32(selectedValues[i]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        if (RadioButtonList1.SelectedIndex == 1)
                        {
                            cell3.AddCell(string.Format("01.07.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Расходы на содержание в расчете на 1 жителя по состоянию на  01.07.{0} г.",
                                              selectedValues[selectedValues.Count - 1]));
                            cell3.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell3.AddCell(string.Format("01.10.{0} г.", selectedValues[selectedValues.Count - 1]),
                                          string.Format(
                                              "Расходы на содержание в расчете на 1 жителя по состоянию на 01.10.{0} г.",
                                              selectedValues[selectedValues.Count - 1]));
                            cell3.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                            cell3.AddCell(string.Format("{0} год", selectedValues[selectedValues.Count - 1]),
                                      string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году",
                                                    selectedValues[selectedValues.Count - 1], name));
                            cell3.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[selectedValues.Count - 1]), Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                        }
                        else
                        {
                            cell3.AddCell(flag ? string.Format("{0} год", selectedValues[selectedValues.Count - 1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Расходы на содержание 1 штатной единицы {1} в {0} году", selectedValues[selectedValues.Count - 1], name) : string.Format("Расходы на содержание 1 штатной единицы {1} на {0:dd.MM.yyyy} г.", currentDate, name));
                            cell3.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                        }

                      if (DebtKindButtonList.SelectedIndex == 1) // ОМСУ
                      {
                          GridHeaderCell cell4 = headerLayout.AddCell("Численность работников ОМСУ МО в расчете 1 000 жителей МО");
                          cell4.AddCell(string.Format("{0} год", selectedValues[0]), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[0]));

                          for (int i = 1; i < selectedValues.Count - 1; i++)
                          {
                              cell4.AddCell(string.Format("{0} год", selectedValues[i]), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[i]));
                              cell4.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[i]), Convert.ToInt32(selectedValues[i]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                          }

                          if (RadioButtonList1.SelectedIndex == 1)
                          {
                              cell4.AddCell(string.Format("01.07.{0} г.", selectedValues[selectedValues.Count - 1]),
                                            string.Format(
                                                "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.07.{0} г.",
                                                selectedValues[selectedValues.Count - 1]));
                              cell4.AddCell(string.Format("Прирост / снижение в % (01.07.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                              cell4.AddCell(string.Format("01.10.{0} г.", selectedValues[selectedValues.Count - 1]),
                                            string.Format(
                                                "Численность работников ОМСУ МО в расчете 1 000 жителей МО по состоянию на 01.10.{0} г.",
                                                selectedValues[selectedValues.Count - 1]));
                              cell4.AddCell(string.Format("Прирост / снижение в % (01.10.{0} г. к 01.01.{0} г.)", selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");

                              cell4.AddCell(string.Format("{0} год", selectedValues[selectedValues.Count - 1]), string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[selectedValues.Count - 1]));
                              cell4.AddCell(string.Format("Прирост / снижение в % ({0} год к {1} году)", Convert.ToInt32(selectedValues[selectedValues.Count - 1]), Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1), "Прирост/снижение относительно прошлого отчетного года");
                          }
                          else
                          {
                              cell4.AddCell(flag ? string.Format("{0} год", selectedValues[selectedValues.Count - 1]) : string.Format("На {0:dd.MM.yyyy} г.", currentDate), flag ? string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО в {0} году", selectedValues[selectedValues.Count - 1]) : string.Format("Численность работников ОМСУ МО в расчете 1 000 жителей МО на {0:dd.MM.yyyy} г.", currentDate));
                              cell4.AddCell(flag ? string.Format("Прирост / снижение в % ({0} год к {1} году)", selectedValues[selectedValues.Count - 1], Convert.ToInt32(selectedValues[selectedValues.Count - 1]) - 1) : string.Format("Прирост / снижение в % ({0:dd.MM.yyyy} г. к 01.01.{1}г.)", currentDate, selectedValues[selectedValues.Count - 1]), "Прирост/снижение относительно прошлого отчетного года");
                          }
                      }

                }
                
            
            headerLayout.ApplyHeaderInfo();
            for (int i = 1; i < e.Layout.Bands[0].Columns.Count;i++ )
            {
                e.Layout.Bands[0].Columns[i].Width = CRHelper.GetColumnWidth(79);
                e.Layout.Bands[0].Columns[i].CellStyle.HorizontalAlign = HorizontalAlign.Right;

                string columnCaption = e.Layout.Bands[0].Columns[i].Header.Caption.ToLower();
                string formatString = columnCaption.Contains("прирост") ? "P2" : "N1";
                CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i], formatString);
            }

          /*  if (selectedValues.Count == 1 || selectedValues.Count == 2) // если выбран один (два) год(а)
            {
                for (int i = 1; i < e.Layout.Bands[0].Columns.Count; i += 8)
                {
                    e.Layout.Bands[0].Columns[i].CellStyle.HorizontalAlign = HorizontalAlign.Right;
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i], "N1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 2], "N1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 4], "N1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 6], "N1");
                }

                for (int i = 2; i < e.Layout.Bands[0].Columns.Count; i += 8)
                {
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i], "P1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 2], "P1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 4], "P1");
                    CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + 6], "P1");
                }
            }
            else // если выбрано несколько лет
            {
                int count = (selectedValues.Count - 2) * 2;
                int colColumns = 6 + count+1;
                
                for (int i=1; i<e.Layout.Bands[0].Columns.Count; i+=colColumns)
                {
                    int j;
                   CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i], "N1");

                   for (j = 1; j <= selectedValues.Count - 1 ; j+=2)
                    {
                      CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j], "N1");
                      CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 1], "P1");
                    }
                      
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j], "N1");
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 1], "P1");
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 2], "N1");
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 3], "P1");
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 4], "N1");
                  CRHelper.FormatNumberColumn(e.Layout.Bands[0].Columns[i + j + 5], "P1");
               
              }
           }*/
        }

        protected void UltraWebGrid_InitializeRow(Object sender, RowEventArgs e )
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Value != null && e.Row.Cells[i].Value.ToString() != string.Empty)
                {
                    decimal value;
                    if (decimal.TryParse(e.Row.Cells[i].Value.ToString(), out value))
                    {
                        if (value < 0)
                        {
                            e.Row.Cells[i].Style.ForeColor = Color.Red;
                        }
                    }
                }

                e.Row.Cells[0].Style.HorizontalAlign = HorizontalAlign.Left;

                if (e.Row.Cells[0].Value.ToString() == "Итого")
                {
                    e.Row.Cells[0].Style.Font.Bold = true;
                }
            }

            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                string columnCaption = e.Row.Band.Columns[i].Header.Caption.ToLower();
                bool rate = columnCaption.Contains("прирост");

                if (rate)
                {
                    if (e.Row.Cells[i].Value != null && e.Row.Cells[i].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i].Value) < 0)
                        {
                            e.Row.Cells[i].Style.BackgroundImage = "~/images/arrowGreyDownBB.png";
                            e.Row.Cells[i].Title = "Снижение к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i].Value) > 0)
                        {
                            e.Row.Cells[i].Style.BackgroundImage = "~/images/arrowGreyUpBB.png";
                            e.Row.Cells[i].Title = "Прирост к прошлому году";
                        }

                        e.Row.Cells[i].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                }
            }
            /*  if (selectedValues.Count == 1 || selectedValues.Count == 2) // если выбран один (два) год(а)
            {
                for (int i = 2; i < e.Row.Cells.Count; i += 8)
                {
                    if (e.Row.Cells[i].Value != null && e.Row.Cells[i].Value.ToString() != string.Empty)
                    {
                        if (100*Convert.ToDouble(e.Row.Cells[i].Value) < 0)
                        {
                            e.Row.Cells[i].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100*Convert.ToDouble(e.Row.Cells[i].Value) > 0)
                        {
                            e.Row.Cells[i].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                    if (e.Row.Cells[i+2].Value != null && e.Row.Cells[i+2].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i+2].Value) < 0)
                        {
                            e.Row.Cells[i+2].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i+2].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i+2].Value) > 0)
                        {
                            e.Row.Cells[i+2].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i+2].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i+2].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                    if (e.Row.Cells[i + 4].Value != null && e.Row.Cells[i + 4].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i + 4].Value) < 0)
                        {
                            e.Row.Cells[i + 4].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i + 4].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i + 4].Value) > 0)
                        {
                            e.Row.Cells[i + 4].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i + 4].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i + 4].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                    if (e.Row.Cells[i + 6].Value != null && e.Row.Cells[i + 6].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i + 6].Value) < 0)
                        {
                            e.Row.Cells[i + 6].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i + 6].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i + 6].Value) > 0)
                        {
                            e.Row.Cells[i + 6].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i + 6].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i + 6].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }
               }
            }
            else
            {
                int count = (selectedValues.Count - 2) * 2;
                int colColumns = 6 + count+1;

                for (int i = 2; i<UltraWebGrid1.Columns.Count; i+= colColumns)
                {
                    int j;
                    for (j = 1; j <= selectedValues.Count - 1; j += 2)
                    {
                        if (e.Row.Cells[i + j].Value != null && e.Row.Cells[i + j].Value.ToString() != string.Empty)
                        {
                            if (100 * Convert.ToDouble(e.Row.Cells[i + j].Value) < 0)
                            {
                                e.Row.Cells[i + j ].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                                e.Row.Cells[i + j].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                            }
                            else if (100 * Convert.ToDouble(e.Row.Cells[i + j].Value) > 0)
                            {
                                e.Row.Cells[i + j ].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                                e.Row.Cells[i + j ].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                            }

                            e.Row.Cells[i + j].Style.CustomRules =
                                "background-repeat: no-repeat; background-position: left center; margin: 2px";
                        }
                    }

                    if (e.Row.Cells[i+j].Value != null && e.Row.Cells[i+j].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i+j].Value) < 0)
                        {
                            e.Row.Cells[i+j].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i+j].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i+j].Value) > 0)
                        {
                            e.Row.Cells[i+j].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i+j].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i+j].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                    if (e.Row.Cells[i+j +2].Value != null && e.Row.Cells[i+j +2].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i+j +2].Value) < 0)
                        {
                            e.Row.Cells[i+j +2].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i+j +2].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i+j +2].Value) > 0)
                        {
                            e.Row.Cells[i+j +2].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i+j +2].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i+j +2].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }

                    if (e.Row.Cells[i+j +4].Value != null && e.Row.Cells[i+j +4].Value.ToString() != string.Empty)
                    {
                        if (100 * Convert.ToDouble(e.Row.Cells[i+j +4].Value) < 0)
                        {
                            e.Row.Cells[i+j +4].Style.BackgroundImage = "~/images/arrowGreenDownBB.png";
                            e.Row.Cells[i+j +4].Title = "Среднемесячная оплата труда сократилась к прошлому году";
                        }
                        else if (100 * Convert.ToDouble(e.Row.Cells[i+j +4].Value) > 0)
                        {
                            e.Row.Cells[i+j +4].Style.BackgroundImage = "~/images/arrowRedUpBB.png";
                            e.Row.Cells[i+j +4].Title = "Среднемесячная оплата труда увеличилась к прошлому году";
                        }

                        e.Row.Cells[i+j +4].Style.CustomRules =
                            "background-repeat: no-repeat; background-position: left center; margin: 2px";
                    }
                    
                }

            }*/

        }

        #endregion 
  

        #region экспорт

      
        #region экспорт в Excel

        private static void ExcelExporter_BeginExport(object sender, BeginExportEventArgs e)
        {
            e.CurrentWorksheet.PrintOptions.Orientation = Infragistics.Documents.Excel.Orientation.Landscape;
            e.CurrentWorksheet.PrintOptions.PaperSize = PaperSize.A4;
            e.CurrentWorksheet.PrintOptions.MaxPagesHorizontally = 1;
            e.CurrentWorksheet.PrintOptions.MaxPagesHorizontally = 1;
            e.CurrentWorksheet.PrintOptions.ScalingFactor = 40;
            e.CurrentWorksheet.PrintOptions.BottomMargin = 0;
            e.CurrentWorksheet.PrintOptions.TopMargin = 0;
            e.CurrentWorksheet.PrintOptions.LeftMargin = 0;
            e.CurrentWorksheet.PrintOptions.RightMargin = 0;
       }
       
        private void ExcelExportButton_Click(object sender, EventArgs e)
        {
            ReportExcelExporter1.WorksheetTitle = PageTitle.Text;
            ReportExcelExporter1.WorksheetSubTitle = PageSubTitle.Text;

            Workbook workbook = new Workbook();
            Worksheet sheet1 = workbook.Worksheets.Add("sheet1");
            
            ReportExcelExporter1.HeaderCellHeight = 30;
            ReportExcelExporter1.GridColumnWidthScale = 1.1;
            ReportExcelExporter1.Export(headerLayout, sheet1, 3);
        }

        private void ExcelExporter_EndExport(object sender, Infragistics.WebUI.UltraWebGrid.ExcelExport.EndExportEventArgs e)
        {
            int columnCount = UltraWebGrid1.Columns.Count;
            int rowsCount = UltraWebGrid1.Rows.Count;
            for (int i = 0; i < columnCount; i++)
            {
                for (int j = 5; j < rowsCount + 7; j++)
                {
                    e.CurrentWorksheet.Rows[j].Cells[i].CellFormat.Font.Height = 200;
                }
            }
        }

        #endregion

        #region Экспорт в Pdf

        
        private void PdfExportButton_Click(Object sender, EventArgs e)
        {
            ReportPDFExporter1.PageTitle = PageTitle.Text;
            ReportPDFExporter1.PageSubTitle = PageSubTitle.Text;

            Report report = new Report();
            ISection section1 = report.AddSection();
           
            ReportPDFExporter1.HeaderCellHeight = 50;
            ReportPDFExporter1.Export(headerLayout, section1);
         

        }

        #endregion

      #endregion


       }
}