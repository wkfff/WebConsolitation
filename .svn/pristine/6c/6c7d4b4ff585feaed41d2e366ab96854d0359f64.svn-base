//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.4963
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace egrul.nalog.ru.Item2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (HEADER, UL+)
    /// </para>
    /// </summary>
    public partial class EGRUL_UL_DATAType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UL> ULField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator EGRUL_UL_DATAType(XElement xe) { return XTypedServices.ToXTypedElement<EGRUL_UL_DATAType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EGRUL_UL_DATAType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("HEADER", "")), new NamedContentModelEntity(XName.Get("UL", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HEADER, UL+)
        /// </para>
        /// </summary>
        public EGRUL_UL_DATAType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HEADER, UL+)
        /// </para>
        /// </summary>
        public HEADER HEADER {
            get {
                XElement x = this.GetElement(XName.Get("HEADER", ""));
                return ((HEADER)(x));
            }
            set {
                this.SetElement(XName.Get("HEADER", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (HEADER, UL+)
        /// </para>
        /// </summary>
        public IList<UL> UL {
            get {
                if ((this.ULField == null)) {
                    this.ULField = new XTypedList<UL>(this, LinqToXsdTypeManager.Instance, XName.Get("UL", ""));
                }
                return this.ULField;
            }
            set {
                if ((value == null)) {
                    this.ULField = null;
                }
                else {
                    if ((this.ULField == null)) {
                        this.ULField = XTypedList<UL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UL", ""));
                    }
                    else {
                        XTypedServices.SetList<UL>(this.ULField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string VER {
            get {
                XAttribute x = this.Attribute(XName.Get("VER", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VER", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EGRUL_UL_DATA", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EGRUL_UL_DATAType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("HEADER", ""), typeof(HEADER));
            localElementDictionary.Add(XName.Get("UL", ""), typeof(UL));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (USER)
    /// </para>
    /// </summary>
    public partial class HEADERType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HEADERType(XElement xe) { return XTypedServices.ToXTypedElement<HEADERType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HEADERType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("USER", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (USER)
        /// </para>
        /// </summary>
        public HEADERType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (USER)
        /// </para>
        /// </summary>
        public USER USER {
            get {
                XElement x = this.GetElement(XName.Get("USER", ""));
                return ((USER)(x));
            }
            set {
                this.SetElement(XName.Get("USER", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_CODE {
            get {
                XAttribute x = this.Attribute(XName.Get("S_CODE", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("S_CODE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_ID {
            get {
                XAttribute x = this.Attribute(XName.Get("S_ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("S_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDFILE {
            get {
                XAttribute x = this.Attribute(XName.Get("IDFILE", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IDFILE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PRG_VER {
            get {
                XAttribute x = this.Attribute(XName.Get("PRG_VER", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PRG_VER", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("S_NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("S_NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_DOK {
            get {
                XAttribute x = this.Attribute(XName.Get("CNT_DOK", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CNT_DOK", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string TIMESTAMP {
            get {
                XAttribute x = this.Attribute(XName.Get("TIMESTAMP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TIMESTAMP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HEADER", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HEADERType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("USER", ""), typeof(USER));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class USERType : XTypedElement, IXMetaData {
        
         public static explicit operator USERType(XElement xe) { return XTypedServices.ToXTypedElement<USERType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public USERType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DOLGN {
            get {
                XAttribute x = this.Attribute(XName.Get("DOLGN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DOLGN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string FAM_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("FAM_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FAM_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OTCH_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("OTCH_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OTCH_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TEL {
            get {
                XAttribute x = this.Attribute(XName.Get("TEL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TEL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EMAIL {
            get {
                XAttribute x = this.Attribute(XName.Get("EMAIL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EMAIL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("USER", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<USERType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
    /// </para>
    /// </summary>
    public partial class ULType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OKVED> OKVEDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DOLGNFL> DOLGNFLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PREDSH> PREDSHField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PREEM> PREEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LICENZ> LICENZField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UL_OB> UL_OBField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<REGEGRUL> REGEGRULField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ACCOUNT> ACCOUNTField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ULType(XElement xe) { return XTypedServices.ToXTypedElement<ULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ULType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OKVED", "")), new NamedContentModelEntity(XName.Get("STATUS", "")), new NamedContentModelEntity(XName.Get("REGORG", "")), new NamedContentModelEntity(XName.Get("UL_NAME", "")), new NamedContentModelEntity(XName.Get("UL_ADDRESS", "")), new NamedContentModelEntity(XName.Get("UL_CAPITAL", "")), new NamedContentModelEntity(XName.Get("UL_START", "")), new NamedContentModelEntity(XName.Get("UL_FINISH", "")), new NamedContentModelEntity(XName.Get("UCHR", "")), new NamedContentModelEntity(XName.Get("REESTR_AO", "")), new NamedContentModelEntity(XName.Get("DOLGNFL", "")), new NamedContentModelEntity(XName.Get("PREDSH", "")), new NamedContentModelEntity(XName.Get("PREEM", "")), new NamedContentModelEntity(XName.Get("LICENZ", "")), new NamedContentModelEntity(XName.Get("UL_OB", "")), new NamedContentModelEntity(XName.Get("UL_UPR", "")), new NamedContentModelEntity(XName.Get("REGEGRUL", "")), new NamedContentModelEntity(XName.Get("MNS", "")), new NamedContentModelEntity(XName.Get("PF", "")), new NamedContentModelEntity(XName.Get("FSS", "")), new NamedContentModelEntity(XName.Get("FOMS", "")), new NamedContentModelEntity(XName.Get("ACCOUNT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public ULType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<OKVED> OKVED {
            get {
                if ((this.OKVEDField == null)) {
                    this.OKVEDField = new XTypedList<OKVED>(this, LinqToXsdTypeManager.Instance, XName.Get("OKVED", ""));
                }
                return this.OKVEDField;
            }
            set {
                if ((value == null)) {
                    this.OKVEDField = null;
                }
                else {
                    if ((this.OKVEDField == null)) {
                        this.OKVEDField = XTypedList<OKVED>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OKVED", ""));
                    }
                    else {
                        XTypedServices.SetList<OKVED>(this.OKVEDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public STATUS STATUS {
            get {
                XElement x = this.GetElement(XName.Get("STATUS", ""));
                return ((STATUS)(x));
            }
            set {
                this.SetElement(XName.Get("STATUS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_NAME UL_NAME {
            get {
                XElement x = this.GetElement(XName.Get("UL_NAME", ""));
                return ((UL_NAME)(x));
            }
            set {
                this.SetElement(XName.Get("UL_NAME", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_ADDRESS UL_ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("UL_ADDRESS", ""));
                return ((UL_ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("UL_ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_CAPITAL UL_CAPITAL {
            get {
                XElement x = this.GetElement(XName.Get("UL_CAPITAL", ""));
                return ((UL_CAPITAL)(x));
            }
            set {
                this.SetElement(XName.Get("UL_CAPITAL", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_START UL_START {
            get {
                XElement x = this.GetElement(XName.Get("UL_START", ""));
                return ((UL_START)(x));
            }
            set {
                this.SetElement(XName.Get("UL_START", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_FINISH UL_FINISH {
            get {
                XElement x = this.GetElement(XName.Get("UL_FINISH", ""));
                return ((UL_FINISH)(x));
            }
            set {
                this.SetElement(XName.Get("UL_FINISH", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Сведения об учредителях
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UCHR UCHR {
            get {
                XElement x = this.GetElement(XName.Get("UCHR", ""));
                return ((UCHR)(x));
            }
            set {
                this.SetElement(XName.Get("UCHR", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public REESTR_AO REESTR_AO {
            get {
                XElement x = this.GetElement(XName.Get("REESTR_AO", ""));
                return ((REESTR_AO)(x));
            }
            set {
                this.SetElement(XName.Get("REESTR_AO", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<DOLGNFL> DOLGNFL {
            get {
                if ((this.DOLGNFLField == null)) {
                    this.DOLGNFLField = new XTypedList<DOLGNFL>(this, LinqToXsdTypeManager.Instance, XName.Get("DOLGNFL", ""));
                }
                return this.DOLGNFLField;
            }
            set {
                if ((value == null)) {
                    this.DOLGNFLField = null;
                }
                else {
                    if ((this.DOLGNFLField == null)) {
                        this.DOLGNFLField = XTypedList<DOLGNFL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DOLGNFL", ""));
                    }
                    else {
                        XTypedServices.SetList<DOLGNFL>(this.DOLGNFLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<PREDSH> PREDSH {
            get {
                if ((this.PREDSHField == null)) {
                    this.PREDSHField = new XTypedList<PREDSH>(this, LinqToXsdTypeManager.Instance, XName.Get("PREDSH", ""));
                }
                return this.PREDSHField;
            }
            set {
                if ((value == null)) {
                    this.PREDSHField = null;
                }
                else {
                    if ((this.PREDSHField == null)) {
                        this.PREDSHField = XTypedList<PREDSH>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PREDSH", ""));
                    }
                    else {
                        XTypedServices.SetList<PREDSH>(this.PREDSHField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<PREEM> PREEM {
            get {
                if ((this.PREEMField == null)) {
                    this.PREEMField = new XTypedList<PREEM>(this, LinqToXsdTypeManager.Instance, XName.Get("PREEM", ""));
                }
                return this.PREEMField;
            }
            set {
                if ((value == null)) {
                    this.PREEMField = null;
                }
                else {
                    if ((this.PREEMField == null)) {
                        this.PREEMField = XTypedList<PREEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PREEM", ""));
                    }
                    else {
                        XTypedServices.SetList<PREEM>(this.PREEMField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<LICENZ> LICENZ {
            get {
                if ((this.LICENZField == null)) {
                    this.LICENZField = new XTypedList<LICENZ>(this, LinqToXsdTypeManager.Instance, XName.Get("LICENZ", ""));
                }
                return this.LICENZField;
            }
            set {
                if ((value == null)) {
                    this.LICENZField = null;
                }
                else {
                    if ((this.LICENZField == null)) {
                        this.LICENZField = XTypedList<LICENZ>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LICENZ", ""));
                    }
                    else {
                        XTypedServices.SetList<LICENZ>(this.LICENZField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<UL_OB> UL_OB {
            get {
                if ((this.UL_OBField == null)) {
                    this.UL_OBField = new XTypedList<UL_OB>(this, LinqToXsdTypeManager.Instance, XName.Get("UL_OB", ""));
                }
                return this.UL_OBField;
            }
            set {
                if ((value == null)) {
                    this.UL_OBField = null;
                }
                else {
                    if ((this.UL_OBField == null)) {
                        this.UL_OBField = XTypedList<UL_OB>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UL_OB", ""));
                    }
                    else {
                        XTypedServices.SetList<UL_OB>(this.UL_OBField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_UPR UL_UPR {
            get {
                XElement x = this.GetElement(XName.Get("UL_UPR", ""));
                return ((UL_UPR)(x));
            }
            set {
                this.SetElement(XName.Get("UL_UPR", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<REGEGRUL> REGEGRUL {
            get {
                if ((this.REGEGRULField == null)) {
                    this.REGEGRULField = new XTypedList<REGEGRUL>(this, LinqToXsdTypeManager.Instance, XName.Get("REGEGRUL", ""));
                }
                return this.REGEGRULField;
            }
            set {
                if ((value == null)) {
                    this.REGEGRULField = null;
                }
                else {
                    if ((this.REGEGRULField == null)) {
                        this.REGEGRULField = XTypedList<REGEGRUL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("REGEGRUL", ""));
                    }
                    else {
                        XTypedServices.SetList<REGEGRUL>(this.REGEGRULField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public MNS MNS {
            get {
                XElement x = this.GetElement(XName.Get("MNS", ""));
                return ((MNS)(x));
            }
            set {
                this.SetElement(XName.Get("MNS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public PF PF {
            get {
                XElement x = this.GetElement(XName.Get("PF", ""));
                return ((PF)(x));
            }
            set {
                this.SetElement(XName.Get("PF", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public FSS FSS {
            get {
                XElement x = this.GetElement(XName.Get("FSS", ""));
                return ((FSS)(x));
            }
            set {
                this.SetElement(XName.Get("FSS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public FOMS FOMS {
            get {
                XElement x = this.GetElement(XName.Get("FOMS", ""));
                return ((FOMS)(x));
            }
            set {
                this.SetElement(XName.Get("FOMS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<ACCOUNT> ACCOUNT {
            get {
                if ((this.ACCOUNTField == null)) {
                    this.ACCOUNTField = new XTypedList<ACCOUNT>(this, LinqToXsdTypeManager.Instance, XName.Get("ACCOUNT", ""));
                }
                return this.ACCOUNTField;
            }
            set {
                if ((value == null)) {
                    this.ACCOUNTField = null;
                }
                else {
                    if ((this.ACCOUNTField == null)) {
                        this.ACCOUNTField = XTypedList<ACCOUNT>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ACCOUNT", ""));
                    }
                    else {
                        XTypedServices.SetList<ACCOUNT>(this.ACCOUNTField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDUL {
            get {
                XAttribute x = this.Attribute(XName.Get("IDUL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IDUL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDDOK {
            get {
                XAttribute x = this.Attribute(XName.Get("IDDOK", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IDDOK", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ULType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OKVED", ""), typeof(OKVED));
            localElementDictionary.Add(XName.Get("STATUS", ""), typeof(STATUS));
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
            localElementDictionary.Add(XName.Get("UL_NAME", ""), typeof(UL_NAME));
            localElementDictionary.Add(XName.Get("UL_ADDRESS", ""), typeof(UL_ADDRESS));
            localElementDictionary.Add(XName.Get("UL_CAPITAL", ""), typeof(UL_CAPITAL));
            localElementDictionary.Add(XName.Get("UL_START", ""), typeof(UL_START));
            localElementDictionary.Add(XName.Get("UL_FINISH", ""), typeof(UL_FINISH));
            localElementDictionary.Add(XName.Get("UCHR", ""), typeof(UCHR));
            localElementDictionary.Add(XName.Get("REESTR_AO", ""), typeof(REESTR_AO));
            localElementDictionary.Add(XName.Get("DOLGNFL", ""), typeof(DOLGNFL));
            localElementDictionary.Add(XName.Get("PREDSH", ""), typeof(PREDSH));
            localElementDictionary.Add(XName.Get("PREEM", ""), typeof(PREEM));
            localElementDictionary.Add(XName.Get("LICENZ", ""), typeof(LICENZ));
            localElementDictionary.Add(XName.Get("UL_OB", ""), typeof(UL_OB));
            localElementDictionary.Add(XName.Get("UL_UPR", ""), typeof(UL_UPR));
            localElementDictionary.Add(XName.Get("REGEGRUL", ""), typeof(REGEGRUL));
            localElementDictionary.Add(XName.Get("MNS", ""), typeof(MNS));
            localElementDictionary.Add(XName.Get("PF", ""), typeof(PF));
            localElementDictionary.Add(XName.Get("FSS", ""), typeof(FSS));
            localElementDictionary.Add(XName.Get("FOMS", ""), typeof(FOMS));
            localElementDictionary.Add(XName.Get("ACCOUNT", ""), typeof(ACCOUNT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class OKVEDType : XTypedElement, IXMetaData {
        
         public static explicit operator OKVEDType(XElement xe) { return XTypedServices.ToXTypedElement<OKVEDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OKVEDType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD_OKVED {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_OKVED", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_OKVED", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string MAIN {
            get {
                XAttribute x = this.Attribute(XName.Get("MAIN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MAIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OKVED", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OKVEDType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REESTR_AOType : XTypedElement, IXMetaData {
        
         public static explicit operator REESTR_AOType(XElement xe) { return XTypedServices.ToXTypedElement<REESTR_AOType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REESTR_AOType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REESTR_AO", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<REESTR_AOType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class STATUSType : XTypedElement, IXMetaData {
        
         public static explicit operator STATUSType(XElement xe) { return XTypedServices.ToXTypedElement<STATUSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public STATUSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("STATUS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<STATUSType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OPF, NAMEN?, NAMEI?)
    /// </para>
    /// </summary>
    public partial class UL_NAMEType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_NAMEType(XElement xe) { return XTypedServices.ToXTypedElement<UL_NAMEType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_NAMEType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OPF", "")), new NamedContentModelEntity(XName.Get("NAMEN", "")), new NamedContentModelEntity(XName.Get("NAMEI", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public UL_NAMEType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public OPF OPF {
            get {
                XElement x = this.GetElement(XName.Get("OPF", ""));
                return ((OPF)(x));
            }
            set {
                this.SetElement(XName.Get("OPF", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public NAMEN NAMEN {
            get {
                XElement x = this.GetElement(XName.Get("NAMEN", ""));
                return ((NAMEN)(x));
            }
            set {
                this.SetElement(XName.Get("NAMEN", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public NAMEI NAMEI {
            get {
                XElement x = this.GetElement(XName.Get("NAMEI", ""));
                return ((NAMEI)(x));
            }
            set {
                this.SetElement(XName.Get("NAMEI", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEF {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEF", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEF", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMES {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMES", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMES", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_NAME", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_NAMEType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OPF", ""), typeof(OPF));
            localElementDictionary.Add(XName.Get("NAMEN", ""), typeof(NAMEN));
            localElementDictionary.Add(XName.Get("NAMEI", ""), typeof(NAMEI));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class OPFType : XTypedElement, IXMetaData {
        
         public static explicit operator OPFType(XElement xe) { return XTypedServices.ToXTypedElement<OPFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OPFType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SPR {
            get {
                XAttribute x = this.Attribute(XName.Get("SPR", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SPR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_OPF {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_OPF", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_OPF", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OPF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OPFType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LANG?)
    /// </para>
    /// </summary>
    public partial class NAMENType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NAMENType(XElement xe) { return XTypedServices.ToXTypedElement<NAMENType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NAMENType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LANG", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public NAMENType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public LANG LANG {
            get {
                XElement x = this.GetElement(XName.Get("LANG", ""));
                return ((LANG)(x));
            }
            set {
                this.SetElement(XName.Get("LANG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NAMEN", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NAMENType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LANG", ""), typeof(LANG));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LANG?)
    /// </para>
    /// </summary>
    public partial class NAMEIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NAMEIType(XElement xe) { return XTypedServices.ToXTypedElement<NAMEIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NAMEIType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LANG", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public NAMEIType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public LANG LANG {
            get {
                XElement x = this.GetElement(XName.Get("LANG", ""));
                return ((LANG)(x));
            }
            set {
                this.SetElement(XName.Get("LANG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NAMEI", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NAMEIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LANG", ""), typeof(LANG));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LANGType : XTypedElement, IXMetaData {
        
         public static explicit operator LANGType(XElement xe) { return XTypedServices.ToXTypedElement<LANGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LANGType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_LANG {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_LANG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_LANG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LANG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LANGType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
    /// </para>
    /// </summary>
    public partial class UL_ADDRESSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_ADDRESSType(XElement xe) { return XTypedServices.ToXTypedElement<UL_ADDRESSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_ADDRESSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VIDADR", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")), new NamedContentModelEntity(XName.Get("CONTACT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public UL_ADDRESSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public VIDADR VIDADR {
            get {
                XElement x = this.GetElement(XName.Get("VIDADR", ""));
                return ((VIDADR)(x));
            }
            set {
                this.SetElement(XName.Get("VIDADR", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                XElement x = this.GetElement(XName.Get("CONTACT", ""));
                return ((CONTACT)(x));
            }
            set {
                this.SetElement(XName.Get("CONTACT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEISPORG {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEISPORG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEISPORG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_ADDRESS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_ADDRESSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VIDADR", ""), typeof(VIDADR));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
            localElementDictionary.Add(XName.Get("CONTACT", ""), typeof(CONTACT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
    /// </para>
    /// </summary>
    public partial class ADDRESSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ADDRESSType(XElement xe) { return XTypedServices.ToXTypedElement<ADDRESSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ADDRESSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REGION", "")), new NamedContentModelEntity(XName.Get("RAION", "")), new NamedContentModelEntity(XName.Get("GOROD", "")), new NamedContentModelEntity(XName.Get("NASPUNKT", "")), new NamedContentModelEntity(XName.Get("STREET", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public ADDRESSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public REGION REGION {
            get {
                XElement x = this.GetElement(XName.Get("REGION", ""));
                return ((REGION)(x));
            }
            set {
                this.SetElement(XName.Get("REGION", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public RAION RAION {
            get {
                XElement x = this.GetElement(XName.Get("RAION", ""));
                return ((RAION)(x));
            }
            set {
                this.SetElement(XName.Get("RAION", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public GOROD GOROD {
            get {
                XElement x = this.GetElement(XName.Get("GOROD", ""));
                return ((GOROD)(x));
            }
            set {
                this.SetElement(XName.Get("GOROD", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public NASPUNKT NASPUNKT {
            get {
                XElement x = this.GetElement(XName.Get("NASPUNKT", ""));
                return ((NASPUNKT)(x));
            }
            set {
                this.SetElement(XName.Get("NASPUNKT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public STREET STREET {
            get {
                XElement x = this.GetElement(XName.Get("STREET", ""));
                return ((STREET)(x));
            }
            set {
                this.SetElement(XName.Get("STREET", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OKATO {
            get {
                XAttribute x = this.Attribute(XName.Get("OKATO", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OKATO", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KVART {
            get {
                XAttribute x = this.Attribute(XName.Get("KVART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KVART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KORP {
            get {
                XAttribute x = this.Attribute(XName.Get("KORP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KORP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DOM {
            get {
                XAttribute x = this.Attribute(XName.Get("DOM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INDEKS {
            get {
                XAttribute x = this.Attribute(XName.Get("INDEKS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INDEKS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ADDRESS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ADDRESSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("REGION", ""), typeof(REGION));
            localElementDictionary.Add(XName.Get("RAION", ""), typeof(RAION));
            localElementDictionary.Add(XName.Get("GOROD", ""), typeof(GOROD));
            localElementDictionary.Add(XName.Get("NASPUNKT", ""), typeof(NASPUNKT));
            localElementDictionary.Add(XName.Get("STREET", ""), typeof(STREET));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class REGIONType : XTypedElement, IXMetaData {
        
         public static explicit operator REGIONType(XElement xe) { return XTypedServices.ToXTypedElement<REGIONType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REGIONType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_KL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_KL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGION", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<REGIONType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RAIONType : XTypedElement, IXMetaData {
        
         public static explicit operator RAIONType(XElement xe) { return XTypedServices.ToXTypedElement<RAIONType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RAIONType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_KL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_KL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RAION", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RAIONType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GORODType : XTypedElement, IXMetaData {
        
         public static explicit operator GORODType(XElement xe) { return XTypedServices.ToXTypedElement<GORODType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GORODType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_KL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_KL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GOROD", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GORODType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NASPUNKTType : XTypedElement, IXMetaData {
        
         public static explicit operator NASPUNKTType(XElement xe) { return XTypedServices.ToXTypedElement<NASPUNKTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NASPUNKTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_KL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_KL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NASPUNKT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NASPUNKTType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class STREETType : XTypedElement, IXMetaData {
        
         public static explicit operator STREETType(XElement xe) { return XTypedServices.ToXTypedElement<STREETType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public STREETType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_ST {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_ST", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_ST", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("STREET", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<STREETType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDADRType : XTypedElement, IXMetaData {
        
         public static explicit operator VIDADRType(XElement xe) { return XTypedServices.ToXTypedElement<VIDADRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDADRType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDADR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VIDADRType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CONTACTType : XTypedElement, IXMetaData {
        
         public static explicit operator CONTACTType(XElement xe) { return XTypedServices.ToXTypedElement<CONTACTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CONTACTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KODGOROD {
            get {
                XAttribute x = this.Attribute(XName.Get("KODGOROD", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KODGOROD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TELEFON {
            get {
                XAttribute x = this.Attribute(XName.Get("TELEFON", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TELEFON", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FAX {
            get {
                XAttribute x = this.Attribute(XName.Get("FAX", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FAX", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CONTACT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CONTACTType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DOCFL)
    /// </para>
    /// </summary>
    public partial class FLType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FLType(XElement xe) { return XTypedServices.ToXTypedElement<FLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DOCFL", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DOCFL)
        /// </para>
        /// </summary>
        public FLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DOCFL)
        /// </para>
        /// </summary>
        public DOCFL DOCFL {
            get {
                XElement x = this.GetElement(XName.Get("DOCFL", ""));
                return ((DOCFL)(x));
            }
            set {
                this.SetElement(XName.Get("DOCFL", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string FAM_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("FAM_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FAM_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OTCH_FL {
            get {
                XAttribute x = this.Attribute(XName.Get("OTCH_FL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OTCH_FL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DOCFL", ""), typeof(DOCFL));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VIDCAP)
    /// </para>
    /// </summary>
    public partial class UL_CAPITALType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_CAPITALType(XElement xe) { return XTypedServices.ToXTypedElement<UL_CAPITALType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_CAPITALType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VIDCAP", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VIDCAP)
        /// </para>
        /// </summary>
        public UL_CAPITALType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDCAP)
        /// </para>
        /// </summary>
        public VIDCAP VIDCAP {
            get {
                XElement x = this.GetElement(XName.Get("VIDCAP", ""));
                return ((VIDCAP)(x));
            }
            set {
                this.SetElement(XName.Get("VIDCAP", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                XAttribute x = this.Attribute(XName.Get("SUMMA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SUMMA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_CAPITAL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_CAPITALType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VIDCAP", ""), typeof(VIDCAP));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class VIDCAPType : XTypedElement, IXMetaData {
        
         public static explicit operator VIDCAPType(XElement xe) { return XTypedServices.ToXTypedElement<VIDCAPType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDCAPType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDCAP", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VIDCAPType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VIDDOK)
    /// </para>
    /// </summary>
    public partial class DOCFLType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DOCFLType(XElement xe) { return XTypedServices.ToXTypedElement<DOCFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DOCFLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VIDDOK", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VIDDOK)
        /// </para>
        /// </summary>
        public DOCFLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDDOK)
        /// </para>
        /// </summary>
        public VIDDOK VIDDOK {
            get {
                XElement x = this.GetElement(XName.Get("VIDDOK", ""));
                return ((VIDDOK)(x));
            }
            set {
                this.SetElement(XName.Get("VIDDOK", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SER {
            get {
                XAttribute x = this.Attribute(XName.Get("SER", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SER", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUM {
            get {
                XAttribute x = this.Attribute(XName.Get("NUM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DT {
            get {
                XAttribute x = this.Attribute(XName.Get("DT", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEORG {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEORG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEORG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KODORG {
            get {
                XAttribute x = this.Attribute(XName.Get("KODORG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KODORG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DOCFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DOCFLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VIDDOK", ""), typeof(VIDDOK));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class VIDDOKType : XTypedElement, IXMetaData {
        
         public static explicit operator VIDDOKType(XElement xe) { return XTypedServices.ToXTypedElement<VIDDOKType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDDOKType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDDOK", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VIDDOKType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VIDREG, REGORG?)
    /// </para>
    /// </summary>
    public partial class UL_STARTType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_STARTType(XElement xe) { return XTypedServices.ToXTypedElement<UL_STARTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_STARTType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VIDREG", "")), new NamedContentModelEntity(XName.Get("REGORG", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VIDREG, REGORG?)
        /// </para>
        /// </summary>
        public UL_STARTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG?)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                XElement x = this.GetElement(XName.Get("VIDREG", ""));
                return ((VIDREG)(x));
            }
            set {
                this.SetElement(XName.Get("VIDREG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                XAttribute x = this.Attribute(XName.Get("REGNUM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGNUM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_START", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_STARTType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VIDREG", ""), typeof(VIDREG));
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VIDREG, REGORG)
    /// </para>
    /// </summary>
    public partial class UL_FINISHType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_FINISHType(XElement xe) { return XTypedServices.ToXTypedElement<UL_FINISHType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_FINISHType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VIDREG", "")), new NamedContentModelEntity(XName.Get("REGORG", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VIDREG, REGORG)
        /// </para>
        /// </summary>
        public UL_FINISHType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                XElement x = this.GetElement(XName.Get("VIDREG", ""));
                return ((VIDREG)(x));
            }
            set {
                this.SetElement(XName.Get("VIDREG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                XAttribute x = this.Attribute(XName.Get("REGNUM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGNUM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_FINISH", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_FINISHType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VIDREG", ""), typeof(VIDREG));
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RUL*, IUL*, UCHRFL*)
    /// </para>
    /// </summary>
    public partial class UCHRType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RUL> RULField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IUL> IULField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UCHRFL> UCHRFLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UCHRType(XElement xe) { return XTypedServices.ToXTypedElement<UCHRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UCHRType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RUL", "")), new NamedContentModelEntity(XName.Get("IUL", "")), new NamedContentModelEntity(XName.Get("UCHRFL", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public UCHRType() {
        }
        
        /// <summary>
        /// <para>
        /// Сведения об учредителях - российских юридических лицах - Обязателен в случае наличия учредителей  - российских ЮЛ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<RUL> RUL {
            get {
                if ((this.RULField == null)) {
                    this.RULField = new XTypedList<RUL>(this, LinqToXsdTypeManager.Instance, XName.Get("RUL", ""));
                }
                return this.RULField;
            }
            set {
                if ((value == null)) {
                    this.RULField = null;
                }
                else {
                    if ((this.RULField == null)) {
                        this.RULField = XTypedList<RUL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RUL", ""));
                    }
                    else {
                        XTypedServices.SetList<RUL>(this.RULField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<IUL> IUL {
            get {
                if ((this.IULField == null)) {
                    this.IULField = new XTypedList<IUL>(this, LinqToXsdTypeManager.Instance, XName.Get("IUL", ""));
                }
                return this.IULField;
            }
            set {
                if ((value == null)) {
                    this.IULField = null;
                }
                else {
                    if ((this.IULField == null)) {
                        this.IULField = XTypedList<IUL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IUL", ""));
                    }
                    else {
                        XTypedServices.SetList<IUL>(this.IULField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<UCHRFL> UCHRFL {
            get {
                if ((this.UCHRFLField == null)) {
                    this.UCHRFLField = new XTypedList<UCHRFL>(this, LinqToXsdTypeManager.Instance, XName.Get("UCHRFL", ""));
                }
                return this.UCHRFLField;
            }
            set {
                if ((value == null)) {
                    this.UCHRFLField = null;
                }
                else {
                    if ((this.UCHRFLField == null)) {
                        this.UCHRFLField = XTypedList<UCHRFL>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UCHRFL", ""));
                    }
                    else {
                        XTypedServices.SetList<UCHRFL>(this.UCHRFLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_IUL {
            get {
                XAttribute x = this.Attribute(XName.Get("CNT_IUL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CNT_IUL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_UCHRFL {
            get {
                XAttribute x = this.Attribute(XName.Get("CNT_UCHRFL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CNT_UCHRFL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_RUL {
            get {
                XAttribute x = this.Attribute(XName.Get("CNT_RUL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CNT_RUL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UCHR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UCHRType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RUL", ""), typeof(RUL));
            localElementDictionary.Add(XName.Get("IUL", ""), typeof(IUL));
            localElementDictionary.Add(XName.Get("UCHRFL", ""), typeof(UCHRFL));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (REGORG?, ADDRESS?)
    /// </para>
    /// </summary>
    public partial class RULType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RULType(XElement xe) { return XTypedServices.ToXTypedElement<RULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RULType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REGORG", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public RULType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата внесения 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование учредителя - юридического лица
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Основной государственный регистрационный номер - Обязателен при отсутствии реквизита NUMST
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Регистрационный номер учредителя - юридического лица (до 01.07.2002) - Обязателен при отсутствии реквизита OGRN в отношении ЮЛ-учредителей, созданных до 18.05.04
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUMST {
            get {
                XAttribute x = this.Attribute(XName.Get("NUMST", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUMST", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата регистрации образования учредителя - юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Размер вклада в уставной капитал учредителя (в рублях) - Обязателен для коммерческих организаций
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal SUMMA {
            get {
                XAttribute x = this.Attribute(XName.Get("SUMMA", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SUMMA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RULType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class VIDREGType : XTypedElement, IXMetaData {
        
         public static explicit operator VIDREGType(XElement xe) { return XTypedServices.ToXTypedElement<VIDREGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDREGType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDREG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VIDREGType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REGORGType : XTypedElement, IXMetaData {
        
         public static explicit operator REGORGType(XElement xe) { return XTypedServices.ToXTypedElement<REGORGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REGORGType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGORG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<REGORGType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OKSMType : XTypedElement, IXMetaData {
        
         public static explicit operator OKSMType(XElement xe) { return XTypedServices.ToXTypedElement<OKSMType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OKSMType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_OKSM {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD_OKSM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD_OKSM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OKSM", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OKSMType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OKSM)
    /// </para>
    /// </summary>
    public partial class IULType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator IULType(XElement xe) { return XTypedServices.ToXTypedElement<IULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IULType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("OKSM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OKSM)
        /// </para>
        /// </summary>
        public IULType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKSM)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                XElement x = this.GetElement(XName.Get("OKSM", ""));
                return ((OKSM)(x));
            }
            set {
                this.SetElement(XName.Get("OKSM", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                XAttribute x = this.Attribute(XName.Get("SUMMA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SUMMA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                XAttribute x = this.Attribute(XName.Get("ADRESIN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ADRESIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IULType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("OKSM", ""), typeof(OKSM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FL, ADDRESS?, OKSM?)
    /// </para>
    /// </summary>
    public partial class UCHRFLType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UCHRFLType(XElement xe) { return XTypedServices.ToXTypedElement<UCHRFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UCHRFLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FL", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")), new NamedContentModelEntity(XName.Get("OKSM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public UCHRFLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public FL FL {
            get {
                XElement x = this.GetElement(XName.Get("FL", ""));
                return ((FL)(x));
            }
            set {
                this.SetElement(XName.Get("FL", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                XElement x = this.GetElement(XName.Get("OKSM", ""));
                return ((OKSM)(x));
            }
            set {
                this.SetElement(XName.Get("OKSM", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                XAttribute x = this.Attribute(XName.Get("ADRESIN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ADRESIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                XAttribute x = this.Attribute(XName.Get("SUMMA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SUMMA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UCHRFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UCHRFLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FL", ""), typeof(FL));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
            localElementDictionary.Add(XName.Get("OKSM", ""), typeof(OKSM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
    /// </para>
    /// </summary>
    public partial class DOLGNFLType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DOLGNFLType(XElement xe) { return XTypedServices.ToXTypedElement<DOLGNFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DOLGNFLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FL", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")), new NamedContentModelEntity(XName.Get("OKSM", "")), new NamedContentModelEntity(XName.Get("CONTACT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public DOLGNFLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public FL FL {
            get {
                XElement x = this.GetElement(XName.Get("FL", ""));
                return ((FL)(x));
            }
            set {
                this.SetElement(XName.Get("FL", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                XElement x = this.GetElement(XName.Get("OKSM", ""));
                return ((OKSM)(x));
            }
            set {
                this.SetElement(XName.Get("OKSM", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                XElement x = this.GetElement(XName.Get("CONTACT", ""));
                return ((CONTACT)(x));
            }
            set {
                this.SetElement(XName.Get("CONTACT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DOLGN {
            get {
                XAttribute x = this.Attribute(XName.Get("DOLGN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DOLGN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                XAttribute x = this.Attribute(XName.Get("ADRESIN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ADRESIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DOLGNFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DOLGNFLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FL", ""), typeof(FL));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
            localElementDictionary.Add(XName.Get("OKSM", ""), typeof(OKSM));
            localElementDictionary.Add(XName.Get("CONTACT", ""), typeof(CONTACT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (REGORG?, ADDRESS?)
    /// </para>
    /// </summary>
    public partial class PREDSHType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PREDSHType(XElement xe) { return XTypedServices.ToXTypedElement<PREDSHType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PREDSHType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REGORG", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public PREDSHType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUMST {
            get {
                XAttribute x = this.Attribute(XName.Get("NUMST", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUMST", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PREDSH", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PREDSHType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (REGORG?, ADDRESS?)
    /// </para>
    /// </summary>
    public partial class PREEMType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PREEMType(XElement xe) { return XTypedServices.ToXTypedElement<PREEMType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PREEMType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REGORG", "")), new NamedContentModelEntity(XName.Get("ADDRESS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public PREEMType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PREEM", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PREEMType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
    /// </para>
    /// </summary>
    public partial class LICENZType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VIDLIC> VIDLICField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator LICENZType(XElement xe) { return XTypedServices.ToXTypedElement<LICENZType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LICENZType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LICORG", "")), new NamedContentModelEntity(XName.Get("VIDLIC", "")), new NamedContentModelEntity(XName.Get("SOSTLIC", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public LICENZType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public LICORG LICORG {
            get {
                XElement x = this.GetElement(XName.Get("LICORG", ""));
                return ((LICORG)(x));
            }
            set {
                this.SetElement(XName.Get("LICORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public IList<VIDLIC> VIDLIC {
            get {
                if ((this.VIDLICField == null)) {
                    this.VIDLICField = new XTypedList<VIDLIC>(this, LinqToXsdTypeManager.Instance, XName.Get("VIDLIC", ""));
                }
                return this.VIDLICField;
            }
            set {
                if ((value == null)) {
                    this.VIDLICField = null;
                }
                else {
                    if ((this.VIDLICField == null)) {
                        this.VIDLICField = XTypedList<VIDLIC>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VIDLIC", ""));
                    }
                    else {
                        XTypedServices.SetList<VIDLIC>(this.VIDLICField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public SOSTLIC SOSTLIC {
            get {
                XElement x = this.GetElement(XName.Get("SOSTLIC", ""));
                return ((SOSTLIC)(x));
            }
            set {
                this.SetElement(XName.Get("SOSTLIC", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NUMLIC {
            get {
                XAttribute x = this.Attribute(XName.Get("NUMLIC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUMLIC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTRESH {
            get {
                XAttribute x = this.Attribute(XName.Get("DTRESH", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTRESH", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTOP {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTOP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTOP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTARTNOV {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTARTNOV", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTARTNOV", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LICENZ", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LICENZType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LICORG", ""), typeof(LICORG));
            localElementDictionary.Add(XName.Get("VIDLIC", ""), typeof(VIDLIC));
            localElementDictionary.Add(XName.Get("SOSTLIC", ""), typeof(SOSTLIC));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LICORGType : XTypedElement, IXMetaData {
        
         public static explicit operator LICORGType(XElement xe) { return XTypedServices.ToXTypedElement<LICORGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LICORGType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LICORG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LICORGType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDLICType : XTypedElement, IXMetaData {
        
         public static explicit operator VIDLICType(XElement xe) { return XTypedServices.ToXTypedElement<VIDLICType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDLICType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_VLIC {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME_VLIC", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME_VLIC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDLIC", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VIDLICType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SOSTLICType : XTypedElement, IXMetaData {
        
         public static explicit operator SOSTLICType(XElement xe) { return XTypedServices.ToXTypedElement<SOSTLICType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SOSTLICType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SOSTLIC", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SOSTLICType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
    /// </para>
    /// </summary>
    public partial class REGEGRULType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator REGEGRULType(XElement xe) { return XTypedServices.ToXTypedElement<REGEGRULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static REGEGRULType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REGORG", "")), new NamedContentModelEntity(XName.Get("VIDREG", "")), new NamedContentModelEntity(XName.Get("SOSTZAP", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public REGEGRULType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                XElement x = this.GetElement(XName.Get("REGORG", ""));
                return ((REGORG)(x));
            }
            set {
                this.SetElement(XName.Get("REGORG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                XElement x = this.GetElement(XName.Get("VIDREG", ""));
                return ((VIDREG)(x));
            }
            set {
                this.SetElement(XName.Get("VIDREG", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public SOSTZAP SOSTZAP {
            get {
                XElement x = this.GetElement(XName.Get("SOSTZAP", ""));
                return ((SOSTZAP)(x));
            }
            set {
                this.SetElement(XName.Get("SOSTZAP", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDREG {
            get {
                XAttribute x = this.Attribute(XName.Get("IDREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IDREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                XAttribute x = this.Attribute(XName.Get("REGNUM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGNUM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTZAP {
            get {
                XAttribute x = this.Attribute(XName.Get("DTZAP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTZAP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGEGRUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<REGEGRULType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("REGORG", ""), typeof(REGORG));
            localElementDictionary.Add(XName.Get("VIDREG", ""), typeof(VIDREG));
            localElementDictionary.Add(XName.Get("SOSTZAP", ""), typeof(SOSTZAP));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class SOSTZAPType : XTypedElement, IXMetaData {
        
         public static explicit operator SOSTZAPType(XElement xe) { return XTypedServices.ToXTypedElement<SOSTZAPType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SOSTZAPType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SOSTZAP", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SOSTZAPType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ADDRESS, CONTACT?)
    /// </para>
    /// </summary>
    public partial class UL_OBType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_OBType(XElement xe) { return XTypedServices.ToXTypedElement<UL_OBType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_OBType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADDRESS", "")), new NamedContentModelEntity(XName.Get("CONTACT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public UL_OBType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                XElement x = this.GetElement(XName.Get("CONTACT", ""));
                return ((CONTACT)(x));
            }
            set {
                this.SetElement(XName.Get("CONTACT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string VID_OB {
            get {
                XAttribute x = this.Attribute(XName.Get("VID_OB", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VID_OB", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_OB", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_OBType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
            localElementDictionary.Add(XName.Get("CONTACT", ""), typeof(CONTACT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ADDRESS?, CONTACT?)
    /// </para>
    /// </summary>
    public partial class UL_UPRType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UL_UPRType(XElement xe) { return XTypedServices.ToXTypedElement<UL_UPRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UL_UPRType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADDRESS", "")), new NamedContentModelEntity(XName.Get("CONTACT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ADDRESS?, CONTACT?)
        /// </para>
        /// </summary>
        public UL_UPRType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS?, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                XElement x = this.GetElement(XName.Get("ADDRESS", ""));
                return ((ADDRESS)(x));
            }
            set {
                this.SetElement(XName.Get("ADDRESS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS?, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                XElement x = this.GetElement(XName.Get("CONTACT", ""));
                return ((CONTACT)(x));
            }
            set {
                this.SetElement(XName.Get("CONTACT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                XAttribute x = this.Attribute(XName.Get("NAMEP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAMEP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                XAttribute x = this.Attribute(XName.Get("DTREG", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTREG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_UPR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UL_UPRType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ADDRESS", ""), typeof(ADDRESS));
            localElementDictionary.Add(XName.Get("CONTACT", ""), typeof(CONTACT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ORGAN_MNS)
    /// </para>
    /// </summary>
    public partial class MNSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MNSType(XElement xe) { return XTypedServices.ToXTypedElement<MNSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MNSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORGAN_MNS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ORGAN_MNS)
        /// </para>
        /// </summary>
        public MNSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_MNS)
        /// </para>
        /// </summary>
        public ORGAN_MNS ORGAN_MNS {
            get {
                XElement x = this.GetElement(XName.Get("ORGAN_MNS", ""));
                return ((ORGAN_MNS)(x));
            }
            set {
                this.SetElement(XName.Get("ORGAN_MNS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MNS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MNSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ORGAN_MNS", ""), typeof(ORGAN_MNS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ORGAN_PF)
    /// </para>
    /// </summary>
    public partial class PFType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PFType(XElement xe) { return XTypedServices.ToXTypedElement<PFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PFType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORGAN_PF", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ORGAN_PF)
        /// </para>
        /// </summary>
        public PFType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_PF)
        /// </para>
        /// </summary>
        public ORGAN_PF ORGAN_PF {
            get {
                XElement x = this.GetElement(XName.Get("ORGAN_PF", ""));
                return ((ORGAN_PF)(x));
            }
            set {
                this.SetElement(XName.Get("ORGAN_PF", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_PF {
            get {
                XAttribute x = this.Attribute(XName.Get("REGN_PF", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGN_PF", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PFType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ORGAN_PF", ""), typeof(ORGAN_PF));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ORGAN_FSS)
    /// </para>
    /// </summary>
    public partial class FSSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FSSType(XElement xe) { return XTypedServices.ToXTypedElement<FSSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FSSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORGAN_FSS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ORGAN_FSS)
        /// </para>
        /// </summary>
        public FSSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_FSS)
        /// </para>
        /// </summary>
        public ORGAN_FSS ORGAN_FSS {
            get {
                XElement x = this.GetElement(XName.Get("ORGAN_FSS", ""));
                return ((ORGAN_FSS)(x));
            }
            set {
                this.SetElement(XName.Get("ORGAN_FSS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_FSS {
            get {
                XAttribute x = this.Attribute(XName.Get("REGN_FSS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGN_FSS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FSS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FSSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ORGAN_FSS", ""), typeof(ORGAN_FSS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ORGAN_FOMS)
    /// </para>
    /// </summary>
    public partial class FOMSType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FOMSType(XElement xe) { return XTypedServices.ToXTypedElement<FOMSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FOMSType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORGAN_FOMS", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ORGAN_FOMS)
        /// </para>
        /// </summary>
        public FOMSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_FOMS)
        /// </para>
        /// </summary>
        public ORGAN_FOMS ORGAN_FOMS {
            get {
                XElement x = this.GetElement(XName.Get("ORGAN_FOMS", ""));
                return ((ORGAN_FOMS)(x));
            }
            set {
                this.SetElement(XName.Get("ORGAN_FOMS", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_FOMS {
            get {
                XAttribute x = this.Attribute(XName.Get("REGN_FOMS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("REGN_FOMS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FOMS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FOMSType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ORGAN_FOMS", ""), typeof(ORGAN_FOMS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ORGAN_MNSType : XTypedElement, IXMetaData {
        
         public static explicit operator ORGAN_MNSType(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_MNSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_MNSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_MNS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ORGAN_MNSType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_PFType : XTypedElement, IXMetaData {
        
         public static explicit operator ORGAN_PFType(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_PFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_PFType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_PF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ORGAN_PFType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_FSSType : XTypedElement, IXMetaData {
        
         public static explicit operator ORGAN_FSSType(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_FSSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_FSSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_FSS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ORGAN_FSSType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_FOMSType : XTypedElement, IXMetaData {
        
         public static explicit operator ORGAN_FOMSType(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_FOMSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_FOMSType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                XAttribute x = this.Attribute(XName.Get("KOD", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KOD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_FOMS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ORGAN_FOMSType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
    /// </para>
    /// </summary>
    public partial class ACCOUNTType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ACCOUNTType(XElement xe) { return XTypedServices.ToXTypedElement<ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ACCOUNTType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VID_ACCOUNT", "")), new NamedContentModelEntity(XName.Get("TYPE_ACCOUNT", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
        /// </para>
        /// </summary>
        public ACCOUNTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
        /// </para>
        /// </summary>
        public VID_ACCOUNT VID_ACCOUNT {
            get {
                XElement x = this.GetElement(XName.Get("VID_ACCOUNT", ""));
                return ((VID_ACCOUNT)(x));
            }
            set {
                this.SetElement(XName.Get("VID_ACCOUNT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
        /// </para>
        /// </summary>
        public TYPE_ACCOUNT TYPE_ACCOUNT {
            get {
                XElement x = this.GetElement(XName.Get("TYPE_ACCOUNT", ""));
                return ((TYPE_ACCOUNT)(x));
            }
            set {
                this.SetElement(XName.Get("TYPE_ACCOUNT", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                XAttribute x = this.Attribute(XName.Get("OGRN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OGRN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NUM {
            get {
                XAttribute x = this.Attribute(XName.Get("NUM", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                XAttribute x = this.Attribute(XName.Get("INN", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("INN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                XAttribute x = this.Attribute(XName.Get("KPP", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("KPP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string BIK {
            get {
                XAttribute x = this.Attribute(XName.Get("BIK", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BIK", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUM_CONTRACT {
            get {
                XAttribute x = this.Attribute(XName.Get("NUM_CONTRACT", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NUM_CONTRACT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                XAttribute x = this.Attribute(XName.Get("DTSTART", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTSTART", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                XAttribute x = this.Attribute(XName.Get("DTEND", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DTEND", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ACCOUNTType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VID_ACCOUNT", ""), typeof(VID_ACCOUNT));
            localElementDictionary.Add(XName.Get("TYPE_ACCOUNT", ""), typeof(TYPE_ACCOUNT));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class VID_ACCOUNTType : XTypedElement, IXMetaData {
        
         public static explicit operator VID_ACCOUNTType(XElement xe) { return XTypedServices.ToXTypedElement<VID_ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VID_ACCOUNTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID_VA {
            get {
                XAttribute x = this.Attribute(XName.Get("ID_VA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID_VA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_VA {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME_VA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME_VA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VID_ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VID_ACCOUNTType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TYPE_ACCOUNTType : XTypedElement, IXMetaData {
        
         public static explicit operator TYPE_ACCOUNTType(XElement xe) { return XTypedServices.ToXTypedElement<TYPE_ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TYPE_ACCOUNTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID_TA {
            get {
                XAttribute x = this.Attribute(XName.Get("ID_TA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID_TA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_TA {
            get {
                XAttribute x = this.Attribute(XName.Get("NAME_TA", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NAME_TA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TYPE_ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TYPE_ACCOUNTType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EGRUL_UL_DATA : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EGRUL_UL_DATAType ContentField;
        
         public static explicit operator EGRUL_UL_DATA(XElement xe) { return XTypedServices.ToXTypedElement<EGRUL_UL_DATA, EGRUL_UL_DATAType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EGRUL_UL_DATA() {
            SetInnerType(new EGRUL_UL_DATAType());
        }
        
        public EGRUL_UL_DATA(EGRUL_UL_DATAType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public EGRUL_UL_DATAType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HEADER, UL+)
        /// </para>
        /// </summary>
        public HEADER HEADER {
            get {
                return this.ContentField.HEADER;
            }
            set {
                this.ContentField.HEADER = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (HEADER, UL+)
        /// </para>
        /// </summary>
        public IList<UL> UL {
            get {
                return this.ContentField.UL;
            }
            set {
                this.ContentField.UL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string VER {
            get {
                return this.ContentField.VER;
            }
            set {
                this.ContentField.VER = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EGRUL_UL_DATA", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EGRUL_UL_DATA Load(string xmlFile) {
            return XTypedServices.Load<EGRUL_UL_DATA, EGRUL_UL_DATAType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EGRUL_UL_DATA Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EGRUL_UL_DATA, EGRUL_UL_DATAType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EGRUL_UL_DATA Parse(string xml) {
            return XTypedServices.Parse<EGRUL_UL_DATA, EGRUL_UL_DATAType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new EGRUL_UL_DATA(((EGRUL_UL_DATAType)(this.Content.Clone())));
        }
        
        private void SetInnerType(EGRUL_UL_DATAType ContentField) {
            this.ContentField = ((EGRUL_UL_DATAType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HEADER : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HEADERType ContentField;
        
         public static explicit operator HEADER(XElement xe) { return XTypedServices.ToXTypedElement<HEADER, HEADERType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HEADER() {
            SetInnerType(new HEADERType());
        }
        
        public HEADER(HEADERType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public HEADERType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (USER)
        /// </para>
        /// </summary>
        public USER USER {
            get {
                return this.ContentField.USER;
            }
            set {
                this.ContentField.USER = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_CODE {
            get {
                return this.ContentField.S_CODE;
            }
            set {
                this.ContentField.S_CODE = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_ID {
            get {
                return this.ContentField.S_ID;
            }
            set {
                this.ContentField.S_ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDFILE {
            get {
                return this.ContentField.IDFILE;
            }
            set {
                this.ContentField.IDFILE = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PRG_VER {
            get {
                return this.ContentField.PRG_VER;
            }
            set {
                this.ContentField.PRG_VER = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string S_NAME {
            get {
                return this.ContentField.S_NAME;
            }
            set {
                this.ContentField.S_NAME = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_DOK {
            get {
                return this.ContentField.CNT_DOK;
            }
            set {
                this.ContentField.CNT_DOK = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string TIMESTAMP {
            get {
                return this.ContentField.TIMESTAMP;
            }
            set {
                this.ContentField.TIMESTAMP = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HEADER", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static HEADER Load(string xmlFile) {
            return XTypedServices.Load<HEADER, HEADERType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static HEADER Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<HEADER, HEADERType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static HEADER Parse(string xml) {
            return XTypedServices.Parse<HEADER, HEADERType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new HEADER(((HEADERType)(this.Content.Clone())));
        }
        
        private void SetInnerType(HEADERType ContentField) {
            this.ContentField = ((HEADERType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class USER : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private USERType ContentField;
        
         public static explicit operator USER(XElement xe) { return XTypedServices.ToXTypedElement<USER, USERType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public USER() {
            SetInnerType(new USERType());
        }
        
        public USER(USERType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public USERType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DOLGN {
            get {
                return this.ContentField.DOLGN;
            }
            set {
                this.ContentField.DOLGN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string FAM_FL {
            get {
                return this.ContentField.FAM_FL;
            }
            set {
                this.ContentField.FAM_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME_FL {
            get {
                return this.ContentField.NAME_FL;
            }
            set {
                this.ContentField.NAME_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OTCH_FL {
            get {
                return this.ContentField.OTCH_FL;
            }
            set {
                this.ContentField.OTCH_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TEL {
            get {
                return this.ContentField.TEL;
            }
            set {
                this.ContentField.TEL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EMAIL {
            get {
                return this.ContentField.EMAIL;
            }
            set {
                this.ContentField.EMAIL = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("USER", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static USER Load(string xmlFile) {
            return XTypedServices.Load<USER, USERType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static USER Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<USER, USERType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static USER Parse(string xml) {
            return XTypedServices.Parse<USER, USERType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new USER(((USERType)(this.Content.Clone())));
        }
        
        private void SetInnerType(USERType ContentField) {
            this.ContentField = ((USERType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ULType ContentField;
        
         public static explicit operator UL(XElement xe) { return XTypedServices.ToXTypedElement<UL, ULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL() {
            SetInnerType(new ULType());
        }
        
        public UL(ULType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ULType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<OKVED> OKVED {
            get {
                return this.ContentField.OKVED;
            }
            set {
                this.ContentField.OKVED = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public STATUS STATUS {
            get {
                return this.ContentField.STATUS;
            }
            set {
                this.ContentField.STATUS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_NAME UL_NAME {
            get {
                return this.ContentField.UL_NAME;
            }
            set {
                this.ContentField.UL_NAME = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_ADDRESS UL_ADDRESS {
            get {
                return this.ContentField.UL_ADDRESS;
            }
            set {
                this.ContentField.UL_ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_CAPITAL UL_CAPITAL {
            get {
                return this.ContentField.UL_CAPITAL;
            }
            set {
                this.ContentField.UL_CAPITAL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_START UL_START {
            get {
                return this.ContentField.UL_START;
            }
            set {
                this.ContentField.UL_START = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_FINISH UL_FINISH {
            get {
                return this.ContentField.UL_FINISH;
            }
            set {
                this.ContentField.UL_FINISH = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Сведения об учредителях
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UCHR UCHR {
            get {
                return this.ContentField.UCHR;
            }
            set {
                this.ContentField.UCHR = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public REESTR_AO REESTR_AO {
            get {
                return this.ContentField.REESTR_AO;
            }
            set {
                this.ContentField.REESTR_AO = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<DOLGNFL> DOLGNFL {
            get {
                return this.ContentField.DOLGNFL;
            }
            set {
                this.ContentField.DOLGNFL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<PREDSH> PREDSH {
            get {
                return this.ContentField.PREDSH;
            }
            set {
                this.ContentField.PREDSH = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<PREEM> PREEM {
            get {
                return this.ContentField.PREEM;
            }
            set {
                this.ContentField.PREEM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<LICENZ> LICENZ {
            get {
                return this.ContentField.LICENZ;
            }
            set {
                this.ContentField.LICENZ = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<UL_OB> UL_OB {
            get {
                return this.ContentField.UL_OB;
            }
            set {
                this.ContentField.UL_OB = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public UL_UPR UL_UPR {
            get {
                return this.ContentField.UL_UPR;
            }
            set {
                this.ContentField.UL_UPR = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<REGEGRUL> REGEGRUL {
            get {
                return this.ContentField.REGEGRUL;
            }
            set {
                this.ContentField.REGEGRUL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public MNS MNS {
            get {
                return this.ContentField.MNS;
            }
            set {
                this.ContentField.MNS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public PF PF {
            get {
                return this.ContentField.PF;
            }
            set {
                this.ContentField.PF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public FSS FSS {
            get {
                return this.ContentField.FSS;
            }
            set {
                this.ContentField.FSS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public FOMS FOMS {
            get {
                return this.ContentField.FOMS;
            }
            set {
                this.ContentField.FOMS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OKVED+, STATUS, REGORG, UL_NAME, UL_ADDRESS, UL_CAPITAL?, UL_START, UL_FINISH?, UCHR?, REESTR_AO?, DOLGNFL*, PREDSH*, PREEM*, LICENZ*, UL_OB*, UL_UPR?, REGEGRUL+, MNS?, PF?, FSS?, FOMS?, ACCOUNT*)
        /// </para>
        /// </summary>
        public IList<ACCOUNT> ACCOUNT {
            get {
                return this.ContentField.ACCOUNT;
            }
            set {
                this.ContentField.ACCOUNT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDUL {
            get {
                return this.ContentField.IDUL;
            }
            set {
                this.ContentField.IDUL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDDOK {
            get {
                return this.ContentField.IDDOK;
            }
            set {
                this.ContentField.IDDOK = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL Load(string xmlFile) {
            return XTypedServices.Load<UL, ULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL, ULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL Parse(string xml) {
            return XTypedServices.Parse<UL, ULType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL(((ULType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ULType ContentField) {
            this.ContentField = ((ULType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OKVED : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OKVEDType ContentField;
        
         public static explicit operator OKVED(XElement xe) { return XTypedServices.ToXTypedElement<OKVED, OKVEDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OKVED() {
            SetInnerType(new OKVEDType());
        }
        
        public OKVED(OKVEDType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public OKVEDType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD_OKVED {
            get {
                return this.ContentField.KOD_OKVED;
            }
            set {
                this.ContentField.KOD_OKVED = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string MAIN {
            get {
                return this.ContentField.MAIN;
            }
            set {
                this.ContentField.MAIN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OKVED", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OKVED Load(string xmlFile) {
            return XTypedServices.Load<OKVED, OKVEDType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OKVED Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OKVED, OKVEDType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OKVED Parse(string xml) {
            return XTypedServices.Parse<OKVED, OKVEDType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OKVED(((OKVEDType)(this.Content.Clone())));
        }
        
        private void SetInnerType(OKVEDType ContentField) {
            this.ContentField = ((OKVEDType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REESTR_AO : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private REESTR_AOType ContentField;
        
         public static explicit operator REESTR_AO(XElement xe) { return XTypedServices.ToXTypedElement<REESTR_AO, REESTR_AOType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REESTR_AO() {
            SetInnerType(new REESTR_AOType());
        }
        
        public REESTR_AO(REESTR_AOType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public REESTR_AOType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REESTR_AO", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static REESTR_AO Load(string xmlFile) {
            return XTypedServices.Load<REESTR_AO, REESTR_AOType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REESTR_AO Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<REESTR_AO, REESTR_AOType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REESTR_AO Parse(string xml) {
            return XTypedServices.Parse<REESTR_AO, REESTR_AOType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new REESTR_AO(((REESTR_AOType)(this.Content.Clone())));
        }
        
        private void SetInnerType(REESTR_AOType ContentField) {
            this.ContentField = ((REESTR_AOType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class STATUS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private STATUSType ContentField;
        
         public static explicit operator STATUS(XElement xe) { return XTypedServices.ToXTypedElement<STATUS, STATUSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public STATUS() {
            SetInnerType(new STATUSType());
        }
        
        public STATUS(STATUSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public STATUSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("STATUS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static STATUS Load(string xmlFile) {
            return XTypedServices.Load<STATUS, STATUSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static STATUS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<STATUS, STATUSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static STATUS Parse(string xml) {
            return XTypedServices.Parse<STATUS, STATUSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new STATUS(((STATUSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(STATUSType ContentField) {
            this.ContentField = ((STATUSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_NAME : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_NAMEType ContentField;
        
         public static explicit operator UL_NAME(XElement xe) { return XTypedServices.ToXTypedElement<UL_NAME, UL_NAMEType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_NAME() {
            SetInnerType(new UL_NAMEType());
        }
        
        public UL_NAME(UL_NAMEType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_NAMEType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public OPF OPF {
            get {
                return this.ContentField.OPF;
            }
            set {
                this.ContentField.OPF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public NAMEN NAMEN {
            get {
                return this.ContentField.NAMEN;
            }
            set {
                this.ContentField.NAMEN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OPF, NAMEN?, NAMEI?)
        /// </para>
        /// </summary>
        public NAMEI NAMEI {
            get {
                return this.ContentField.NAMEI;
            }
            set {
                this.ContentField.NAMEI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEF {
            get {
                return this.ContentField.NAMEF;
            }
            set {
                this.ContentField.NAMEF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMES {
            get {
                return this.ContentField.NAMES;
            }
            set {
                this.ContentField.NAMES = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_NAME", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_NAME Load(string xmlFile) {
            return XTypedServices.Load<UL_NAME, UL_NAMEType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_NAME Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_NAME, UL_NAMEType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_NAME Parse(string xml) {
            return XTypedServices.Parse<UL_NAME, UL_NAMEType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_NAME(((UL_NAMEType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_NAMEType ContentField) {
            this.ContentField = ((UL_NAMEType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OPF : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OPFType ContentField;
        
         public static explicit operator OPF(XElement xe) { return XTypedServices.ToXTypedElement<OPF, OPFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OPF() {
            SetInnerType(new OPFType());
        }
        
        public OPF(OPFType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public OPFType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SPR {
            get {
                return this.ContentField.SPR;
            }
            set {
                this.ContentField.SPR = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_OPF {
            get {
                return this.ContentField.KOD_OPF;
            }
            set {
                this.ContentField.KOD_OPF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OPF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OPF Load(string xmlFile) {
            return XTypedServices.Load<OPF, OPFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OPF Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OPF, OPFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OPF Parse(string xml) {
            return XTypedServices.Parse<OPF, OPFType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OPF(((OPFType)(this.Content.Clone())));
        }
        
        private void SetInnerType(OPFType ContentField) {
            this.ContentField = ((OPFType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NAMEN : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NAMENType ContentField;
        
         public static explicit operator NAMEN(XElement xe) { return XTypedServices.ToXTypedElement<NAMEN, NAMENType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NAMEN() {
            SetInnerType(new NAMENType());
        }
        
        public NAMEN(NAMENType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public NAMENType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public LANG LANG {
            get {
                return this.ContentField.LANG;
            }
            set {
                this.ContentField.LANG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NAMEN", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NAMEN Load(string xmlFile) {
            return XTypedServices.Load<NAMEN, NAMENType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NAMEN Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NAMEN, NAMENType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NAMEN Parse(string xml) {
            return XTypedServices.Parse<NAMEN, NAMENType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new NAMEN(((NAMENType)(this.Content.Clone())));
        }
        
        private void SetInnerType(NAMENType ContentField) {
            this.ContentField = ((NAMENType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NAMEI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NAMEIType ContentField;
        
         public static explicit operator NAMEI(XElement xe) { return XTypedServices.ToXTypedElement<NAMEI, NAMEIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NAMEI() {
            SetInnerType(new NAMEIType());
        }
        
        public NAMEI(NAMEIType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public NAMEIType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LANG?)
        /// </para>
        /// </summary>
        public LANG LANG {
            get {
                return this.ContentField.LANG;
            }
            set {
                this.ContentField.LANG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NAMEI", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NAMEI Load(string xmlFile) {
            return XTypedServices.Load<NAMEI, NAMEIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NAMEI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NAMEI, NAMEIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NAMEI Parse(string xml) {
            return XTypedServices.Parse<NAMEI, NAMEIType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new NAMEI(((NAMEIType)(this.Content.Clone())));
        }
        
        private void SetInnerType(NAMEIType ContentField) {
            this.ContentField = ((NAMEIType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LANG : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LANGType ContentField;
        
         public static explicit operator LANG(XElement xe) { return XTypedServices.ToXTypedElement<LANG, LANGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LANG() {
            SetInnerType(new LANGType());
        }
        
        public LANG(LANGType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public LANGType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_LANG {
            get {
                return this.ContentField.KOD_LANG;
            }
            set {
                this.ContentField.KOD_LANG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LANG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LANG Load(string xmlFile) {
            return XTypedServices.Load<LANG, LANGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LANG Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LANG, LANGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LANG Parse(string xml) {
            return XTypedServices.Parse<LANG, LANGType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new LANG(((LANGType)(this.Content.Clone())));
        }
        
        private void SetInnerType(LANGType ContentField) {
            this.ContentField = ((LANGType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_ADDRESS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_ADDRESSType ContentField;
        
         public static explicit operator UL_ADDRESS(XElement xe) { return XTypedServices.ToXTypedElement<UL_ADDRESS, UL_ADDRESSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_ADDRESS() {
            SetInnerType(new UL_ADDRESSType());
        }
        
        public UL_ADDRESS(UL_ADDRESSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_ADDRESSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public VIDADR VIDADR {
            get {
                return this.ContentField.VIDADR;
            }
            set {
                this.ContentField.VIDADR = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VIDADR, ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                return this.ContentField.CONTACT;
            }
            set {
                this.ContentField.CONTACT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEISPORG {
            get {
                return this.ContentField.NAMEISPORG;
            }
            set {
                this.ContentField.NAMEISPORG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_ADDRESS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_ADDRESS Load(string xmlFile) {
            return XTypedServices.Load<UL_ADDRESS, UL_ADDRESSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_ADDRESS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_ADDRESS, UL_ADDRESSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_ADDRESS Parse(string xml) {
            return XTypedServices.Parse<UL_ADDRESS, UL_ADDRESSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_ADDRESS(((UL_ADDRESSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_ADDRESSType ContentField) {
            this.ContentField = ((UL_ADDRESSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ADDRESS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ADDRESSType ContentField;
        
         public static explicit operator ADDRESS(XElement xe) { return XTypedServices.ToXTypedElement<ADDRESS, ADDRESSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ADDRESS() {
            SetInnerType(new ADDRESSType());
        }
        
        public ADDRESS(ADDRESSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ADDRESSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public REGION REGION {
            get {
                return this.ContentField.REGION;
            }
            set {
                this.ContentField.REGION = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public RAION RAION {
            get {
                return this.ContentField.RAION;
            }
            set {
                this.ContentField.RAION = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public GOROD GOROD {
            get {
                return this.ContentField.GOROD;
            }
            set {
                this.ContentField.GOROD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public NASPUNKT NASPUNKT {
            get {
                return this.ContentField.NASPUNKT;
            }
            set {
                this.ContentField.NASPUNKT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGION, RAION?, GOROD?, NASPUNKT?, STREET?)
        /// </para>
        /// </summary>
        public STREET STREET {
            get {
                return this.ContentField.STREET;
            }
            set {
                this.ContentField.STREET = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OKATO {
            get {
                return this.ContentField.OKATO;
            }
            set {
                this.ContentField.OKATO = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KVART {
            get {
                return this.ContentField.KVART;
            }
            set {
                this.ContentField.KVART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KORP {
            get {
                return this.ContentField.KORP;
            }
            set {
                this.ContentField.KORP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DOM {
            get {
                return this.ContentField.DOM;
            }
            set {
                this.ContentField.DOM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INDEKS {
            get {
                return this.ContentField.INDEKS;
            }
            set {
                this.ContentField.INDEKS = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ADDRESS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ADDRESS Load(string xmlFile) {
            return XTypedServices.Load<ADDRESS, ADDRESSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ADDRESS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ADDRESS, ADDRESSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ADDRESS Parse(string xml) {
            return XTypedServices.Parse<ADDRESS, ADDRESSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ADDRESS(((ADDRESSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ADDRESSType ContentField) {
            this.ContentField = ((ADDRESSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REGION : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private REGIONType ContentField;
        
         public static explicit operator REGION(XElement xe) { return XTypedServices.ToXTypedElement<REGION, REGIONType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REGION() {
            SetInnerType(new REGIONType());
        }
        
        public REGION(REGIONType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public REGIONType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                return this.ContentField.KOD_KL;
            }
            set {
                this.ContentField.KOD_KL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGION", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static REGION Load(string xmlFile) {
            return XTypedServices.Load<REGION, REGIONType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGION Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<REGION, REGIONType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGION Parse(string xml) {
            return XTypedServices.Parse<REGION, REGIONType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new REGION(((REGIONType)(this.Content.Clone())));
        }
        
        private void SetInnerType(REGIONType ContentField) {
            this.ContentField = ((REGIONType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RAION : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RAIONType ContentField;
        
         public static explicit operator RAION(XElement xe) { return XTypedServices.ToXTypedElement<RAION, RAIONType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RAION() {
            SetInnerType(new RAIONType());
        }
        
        public RAION(RAIONType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public RAIONType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                return this.ContentField.KOD_KL;
            }
            set {
                this.ContentField.KOD_KL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RAION", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RAION Load(string xmlFile) {
            return XTypedServices.Load<RAION, RAIONType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RAION Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RAION, RAIONType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RAION Parse(string xml) {
            return XTypedServices.Parse<RAION, RAIONType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new RAION(((RAIONType)(this.Content.Clone())));
        }
        
        private void SetInnerType(RAIONType ContentField) {
            this.ContentField = ((RAIONType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GOROD : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GORODType ContentField;
        
         public static explicit operator GOROD(XElement xe) { return XTypedServices.ToXTypedElement<GOROD, GORODType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GOROD() {
            SetInnerType(new GORODType());
        }
        
        public GOROD(GORODType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public GORODType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                return this.ContentField.KOD_KL;
            }
            set {
                this.ContentField.KOD_KL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GOROD", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GOROD Load(string xmlFile) {
            return XTypedServices.Load<GOROD, GORODType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GOROD Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GOROD, GORODType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GOROD Parse(string xml) {
            return XTypedServices.Parse<GOROD, GORODType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GOROD(((GORODType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GORODType ContentField) {
            this.ContentField = ((GORODType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NASPUNKT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NASPUNKTType ContentField;
        
         public static explicit operator NASPUNKT(XElement xe) { return XTypedServices.ToXTypedElement<NASPUNKT, NASPUNKTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NASPUNKT() {
            SetInnerType(new NASPUNKTType());
        }
        
        public NASPUNKT(NASPUNKTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public NASPUNKTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_KL {
            get {
                return this.ContentField.KOD_KL;
            }
            set {
                this.ContentField.KOD_KL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NASPUNKT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NASPUNKT Load(string xmlFile) {
            return XTypedServices.Load<NASPUNKT, NASPUNKTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NASPUNKT Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NASPUNKT, NASPUNKTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static NASPUNKT Parse(string xml) {
            return XTypedServices.Parse<NASPUNKT, NASPUNKTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new NASPUNKT(((NASPUNKTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(NASPUNKTType ContentField) {
            this.ContentField = ((NASPUNKTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class STREET : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private STREETType ContentField;
        
         public static explicit operator STREET(XElement xe) { return XTypedServices.ToXTypedElement<STREET, STREETType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public STREET() {
            SetInnerType(new STREETType());
        }
        
        public STREET(STREETType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public STREETType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_ST {
            get {
                return this.ContentField.KOD_ST;
            }
            set {
                this.ContentField.KOD_ST = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("STREET", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static STREET Load(string xmlFile) {
            return XTypedServices.Load<STREET, STREETType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static STREET Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<STREET, STREETType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static STREET Parse(string xml) {
            return XTypedServices.Parse<STREET, STREETType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new STREET(((STREETType)(this.Content.Clone())));
        }
        
        private void SetInnerType(STREETType ContentField) {
            this.ContentField = ((STREETType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDADR : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VIDADRType ContentField;
        
         public static explicit operator VIDADR(XElement xe) { return XTypedServices.ToXTypedElement<VIDADR, VIDADRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDADR() {
            SetInnerType(new VIDADRType());
        }
        
        public VIDADR(VIDADRType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VIDADRType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDADR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VIDADR Load(string xmlFile) {
            return XTypedServices.Load<VIDADR, VIDADRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDADR Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VIDADR, VIDADRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDADR Parse(string xml) {
            return XTypedServices.Parse<VIDADR, VIDADRType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VIDADR(((VIDADRType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VIDADRType ContentField) {
            this.ContentField = ((VIDADRType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CONTACT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CONTACTType ContentField;
        
         public static explicit operator CONTACT(XElement xe) { return XTypedServices.ToXTypedElement<CONTACT, CONTACTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CONTACT() {
            SetInnerType(new CONTACTType());
        }
        
        public CONTACT(CONTACTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CONTACTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KODGOROD {
            get {
                return this.ContentField.KODGOROD;
            }
            set {
                this.ContentField.KODGOROD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TELEFON {
            get {
                return this.ContentField.TELEFON;
            }
            set {
                this.ContentField.TELEFON = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FAX {
            get {
                return this.ContentField.FAX;
            }
            set {
                this.ContentField.FAX = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CONTACT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CONTACT Load(string xmlFile) {
            return XTypedServices.Load<CONTACT, CONTACTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CONTACT Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CONTACT, CONTACTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CONTACT Parse(string xml) {
            return XTypedServices.Parse<CONTACT, CONTACTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CONTACT(((CONTACTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CONTACTType ContentField) {
            this.ContentField = ((CONTACTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FLType ContentField;
        
         public static explicit operator FL(XElement xe) { return XTypedServices.ToXTypedElement<FL, FLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FL() {
            SetInnerType(new FLType());
        }
        
        public FL(FLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public FLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DOCFL)
        /// </para>
        /// </summary>
        public DOCFL DOCFL {
            get {
                return this.ContentField.DOCFL;
            }
            set {
                this.ContentField.DOCFL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string FAM_FL {
            get {
                return this.ContentField.FAM_FL;
            }
            set {
                this.ContentField.FAM_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_FL {
            get {
                return this.ContentField.NAME_FL;
            }
            set {
                this.ContentField.NAME_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OTCH_FL {
            get {
                return this.ContentField.OTCH_FL;
            }
            set {
                this.ContentField.OTCH_FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FL Load(string xmlFile) {
            return XTypedServices.Load<FL, FLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FL, FLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FL Parse(string xml) {
            return XTypedServices.Parse<FL, FLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new FL(((FLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FLType ContentField) {
            this.ContentField = ((FLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_CAPITAL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_CAPITALType ContentField;
        
         public static explicit operator UL_CAPITAL(XElement xe) { return XTypedServices.ToXTypedElement<UL_CAPITAL, UL_CAPITALType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_CAPITAL() {
            SetInnerType(new UL_CAPITALType());
        }
        
        public UL_CAPITAL(UL_CAPITALType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_CAPITALType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDCAP)
        /// </para>
        /// </summary>
        public VIDCAP VIDCAP {
            get {
                return this.ContentField.VIDCAP;
            }
            set {
                this.ContentField.VIDCAP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                return this.ContentField.SUMMA;
            }
            set {
                this.ContentField.SUMMA = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_CAPITAL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_CAPITAL Load(string xmlFile) {
            return XTypedServices.Load<UL_CAPITAL, UL_CAPITALType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_CAPITAL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_CAPITAL, UL_CAPITALType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_CAPITAL Parse(string xml) {
            return XTypedServices.Parse<UL_CAPITAL, UL_CAPITALType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_CAPITAL(((UL_CAPITALType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_CAPITALType ContentField) {
            this.ContentField = ((UL_CAPITALType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDCAP : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VIDCAPType ContentField;
        
         public static explicit operator VIDCAP(XElement xe) { return XTypedServices.ToXTypedElement<VIDCAP, VIDCAPType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDCAP() {
            SetInnerType(new VIDCAPType());
        }
        
        public VIDCAP(VIDCAPType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VIDCAPType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDCAP", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VIDCAP Load(string xmlFile) {
            return XTypedServices.Load<VIDCAP, VIDCAPType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDCAP Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VIDCAP, VIDCAPType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDCAP Parse(string xml) {
            return XTypedServices.Parse<VIDCAP, VIDCAPType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VIDCAP(((VIDCAPType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VIDCAPType ContentField) {
            this.ContentField = ((VIDCAPType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class DOCFL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DOCFLType ContentField;
        
         public static explicit operator DOCFL(XElement xe) { return XTypedServices.ToXTypedElement<DOCFL, DOCFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DOCFL() {
            SetInnerType(new DOCFLType());
        }
        
        public DOCFL(DOCFLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DOCFLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDDOK)
        /// </para>
        /// </summary>
        public VIDDOK VIDDOK {
            get {
                return this.ContentField.VIDDOK;
            }
            set {
                this.ContentField.VIDDOK = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SER {
            get {
                return this.ContentField.SER;
            }
            set {
                this.ContentField.SER = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUM {
            get {
                return this.ContentField.NUM;
            }
            set {
                this.ContentField.NUM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DT {
            get {
                return this.ContentField.DT;
            }
            set {
                this.ContentField.DT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NAMEORG {
            get {
                return this.ContentField.NAMEORG;
            }
            set {
                this.ContentField.NAMEORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KODORG {
            get {
                return this.ContentField.KODORG;
            }
            set {
                this.ContentField.KODORG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DOCFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DOCFL Load(string xmlFile) {
            return XTypedServices.Load<DOCFL, DOCFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DOCFL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DOCFL, DOCFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DOCFL Parse(string xml) {
            return XTypedServices.Parse<DOCFL, DOCFLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DOCFL(((DOCFLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DOCFLType ContentField) {
            this.ContentField = ((DOCFLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDDOK : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VIDDOKType ContentField;
        
         public static explicit operator VIDDOK(XElement xe) { return XTypedServices.ToXTypedElement<VIDDOK, VIDDOKType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDDOK() {
            SetInnerType(new VIDDOKType());
        }
        
        public VIDDOK(VIDDOKType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VIDDOKType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDDOK", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VIDDOK Load(string xmlFile) {
            return XTypedServices.Load<VIDDOK, VIDDOKType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDDOK Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VIDDOK, VIDDOKType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDDOK Parse(string xml) {
            return XTypedServices.Parse<VIDDOK, VIDDOKType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VIDDOK(((VIDDOKType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VIDDOKType ContentField) {
            this.ContentField = ((VIDDOKType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_START : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_STARTType ContentField;
        
         public static explicit operator UL_START(XElement xe) { return XTypedServices.ToXTypedElement<UL_START, UL_STARTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_START() {
            SetInnerType(new UL_STARTType());
        }
        
        public UL_START(UL_STARTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_STARTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG?)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                return this.ContentField.VIDREG;
            }
            set {
                this.ContentField.VIDREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                return this.ContentField.REGNUM;
            }
            set {
                this.ContentField.REGNUM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_START", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_START Load(string xmlFile) {
            return XTypedServices.Load<UL_START, UL_STARTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_START Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_START, UL_STARTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_START Parse(string xml) {
            return XTypedServices.Parse<UL_START, UL_STARTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_START(((UL_STARTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_STARTType ContentField) {
            this.ContentField = ((UL_STARTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_FINISH : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_FINISHType ContentField;
        
         public static explicit operator UL_FINISH(XElement xe) { return XTypedServices.ToXTypedElement<UL_FINISH, UL_FINISHType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_FINISH() {
            SetInnerType(new UL_FINISHType());
        }
        
        public UL_FINISH(UL_FINISHType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_FINISHType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                return this.ContentField.VIDREG;
            }
            set {
                this.ContentField.VIDREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VIDREG, REGORG)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                return this.ContentField.REGNUM;
            }
            set {
                this.ContentField.REGNUM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_FINISH", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_FINISH Load(string xmlFile) {
            return XTypedServices.Load<UL_FINISH, UL_FINISHType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_FINISH Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_FINISH, UL_FINISHType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_FINISH Parse(string xml) {
            return XTypedServices.Parse<UL_FINISH, UL_FINISHType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_FINISH(((UL_FINISHType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_FINISHType ContentField) {
            this.ContentField = ((UL_FINISHType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UCHR : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UCHRType ContentField;
        
         public static explicit operator UCHR(XElement xe) { return XTypedServices.ToXTypedElement<UCHR, UCHRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UCHR() {
            SetInnerType(new UCHRType());
        }
        
        public UCHR(UCHRType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UCHRType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Сведения об учредителях - российских юридических лицах - Обязателен в случае наличия учредителей  - российских ЮЛ
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<RUL> RUL {
            get {
                return this.ContentField.RUL;
            }
            set {
                this.ContentField.RUL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<IUL> IUL {
            get {
                return this.ContentField.IUL;
            }
            set {
                this.ContentField.IUL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RUL*, IUL*, UCHRFL*)
        /// </para>
        /// </summary>
        public IList<UCHRFL> UCHRFL {
            get {
                return this.ContentField.UCHRFL;
            }
            set {
                this.ContentField.UCHRFL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_IUL {
            get {
                return this.ContentField.CNT_IUL;
            }
            set {
                this.ContentField.CNT_IUL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_UCHRFL {
            get {
                return this.ContentField.CNT_UCHRFL;
            }
            set {
                this.ContentField.CNT_UCHRFL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CNT_RUL {
            get {
                return this.ContentField.CNT_RUL;
            }
            set {
                this.ContentField.CNT_RUL = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UCHR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UCHR Load(string xmlFile) {
            return XTypedServices.Load<UCHR, UCHRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UCHR Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UCHR, UCHRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UCHR Parse(string xml) {
            return XTypedServices.Parse<UCHR, UCHRType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UCHR(((UCHRType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UCHRType ContentField) {
            this.ContentField = ((UCHRType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RUL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RULType ContentField;
        
         public static explicit operator RUL(XElement xe) { return XTypedServices.ToXTypedElement<RUL, RULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RUL() {
            SetInnerType(new RULType());
        }
        
        public RUL(RULType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public RULType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата внесения 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.DateTime DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Полное наименование учредителя - юридического лица
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Основной государственный регистрационный номер - Обязателен при отсутствии реквизита NUMST
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// КПП юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Регистрационный номер учредителя - юридического лица (до 01.07.2002) - Обязателен при отсутствии реквизита OGRN в отношении ЮЛ-учредителей, созданных до 18.05.04
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUMST {
            get {
                return this.ContentField.NUMST;
            }
            set {
                this.ContentField.NUMST = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Дата регистрации образования учредителя - юридического лица - Обязателен для заполнения с 18.05.04 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Размер вклада в уставной капитал учредителя (в рублях) - Обязателен для коммерческих организаций
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal SUMMA {
            get {
                return this.ContentField.SUMMA;
            }
            set {
                this.ContentField.SUMMA = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RUL Load(string xmlFile) {
            return XTypedServices.Load<RUL, RULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RUL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RUL, RULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RUL Parse(string xml) {
            return XTypedServices.Parse<RUL, RULType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new RUL(((RULType)(this.Content.Clone())));
        }
        
        private void SetInnerType(RULType ContentField) {
            this.ContentField = ((RULType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDREG : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VIDREGType ContentField;
        
         public static explicit operator VIDREG(XElement xe) { return XTypedServices.ToXTypedElement<VIDREG, VIDREGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDREG() {
            SetInnerType(new VIDREGType());
        }
        
        public VIDREG(VIDREGType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VIDREGType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDREG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VIDREG Load(string xmlFile) {
            return XTypedServices.Load<VIDREG, VIDREGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDREG Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VIDREG, VIDREGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDREG Parse(string xml) {
            return XTypedServices.Parse<VIDREG, VIDREGType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VIDREG(((VIDREGType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VIDREGType ContentField) {
            this.ContentField = ((VIDREGType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REGORG : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private REGORGType ContentField;
        
         public static explicit operator REGORG(XElement xe) { return XTypedServices.ToXTypedElement<REGORG, REGORGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REGORG() {
            SetInnerType(new REGORGType());
        }
        
        public REGORG(REGORGType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public REGORGType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGORG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static REGORG Load(string xmlFile) {
            return XTypedServices.Load<REGORG, REGORGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGORG Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<REGORG, REGORGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGORG Parse(string xml) {
            return XTypedServices.Parse<REGORG, REGORGType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new REGORG(((REGORGType)(this.Content.Clone())));
        }
        
        private void SetInnerType(REGORGType ContentField) {
            this.ContentField = ((REGORGType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OKSM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OKSMType ContentField;
        
         public static explicit operator OKSM(XElement xe) { return XTypedServices.ToXTypedElement<OKSM, OKSMType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OKSM() {
            SetInnerType(new OKSMType());
        }
        
        public OKSM(OKSMType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public OKSMType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KOD_OKSM {
            get {
                return this.ContentField.KOD_OKSM;
            }
            set {
                this.ContentField.KOD_OKSM = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OKSM", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OKSM Load(string xmlFile) {
            return XTypedServices.Load<OKSM, OKSMType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OKSM Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OKSM, OKSMType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OKSM Parse(string xml) {
            return XTypedServices.Parse<OKSM, OKSMType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OKSM(((OKSMType)(this.Content.Clone())));
        }
        
        private void SetInnerType(OKSMType ContentField) {
            this.ContentField = ((OKSMType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class IUL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IULType ContentField;
        
         public static explicit operator IUL(XElement xe) { return XTypedServices.ToXTypedElement<IUL, IULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public IUL() {
            SetInnerType(new IULType());
        }
        
        public IUL(IULType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public IULType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OKSM)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                return this.ContentField.OKSM;
            }
            set {
                this.ContentField.OKSM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                return this.ContentField.SUMMA;
            }
            set {
                this.ContentField.SUMMA = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                return this.ContentField.ADRESIN;
            }
            set {
                this.ContentField.ADRESIN = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static IUL Load(string xmlFile) {
            return XTypedServices.Load<IUL, IULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static IUL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<IUL, IULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static IUL Parse(string xml) {
            return XTypedServices.Parse<IUL, IULType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new IUL(((IULType)(this.Content.Clone())));
        }
        
        private void SetInnerType(IULType ContentField) {
            this.ContentField = ((IULType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UCHRFL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UCHRFLType ContentField;
        
         public static explicit operator UCHRFL(XElement xe) { return XTypedServices.ToXTypedElement<UCHRFL, UCHRFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UCHRFL() {
            SetInnerType(new UCHRFLType());
        }
        
        public UCHRFL(UCHRFLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UCHRFLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public FL FL {
            get {
                return this.ContentField.FL;
            }
            set {
                this.ContentField.FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                return this.ContentField.OKSM;
            }
            set {
                this.ContentField.OKSM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                return this.ContentField.ADRESIN;
            }
            set {
                this.ContentField.ADRESIN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string SUMMA {
            get {
                return this.ContentField.SUMMA;
            }
            set {
                this.ContentField.SUMMA = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UCHRFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UCHRFL Load(string xmlFile) {
            return XTypedServices.Load<UCHRFL, UCHRFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UCHRFL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UCHRFL, UCHRFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UCHRFL Parse(string xml) {
            return XTypedServices.Parse<UCHRFL, UCHRFLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UCHRFL(((UCHRFLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UCHRFLType ContentField) {
            this.ContentField = ((UCHRFLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class DOLGNFL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DOLGNFLType ContentField;
        
         public static explicit operator DOLGNFL(XElement xe) { return XTypedServices.ToXTypedElement<DOLGNFL, DOLGNFLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DOLGNFL() {
            SetInnerType(new DOLGNFLType());
        }
        
        public DOLGNFL(DOLGNFLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public DOLGNFLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public FL FL {
            get {
                return this.ContentField.FL;
            }
            set {
                this.ContentField.FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public OKSM OKSM {
            get {
                return this.ContentField.OKSM;
            }
            set {
                this.ContentField.OKSM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FL, ADDRESS?, OKSM?, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                return this.ContentField.CONTACT;
            }
            set {
                this.ContentField.CONTACT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DOLGN {
            get {
                return this.ContentField.DOLGN;
            }
            set {
                this.ContentField.DOLGN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ADRESIN {
            get {
                return this.ContentField.ADRESIN;
            }
            set {
                this.ContentField.ADRESIN = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DOLGNFL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DOLGNFL Load(string xmlFile) {
            return XTypedServices.Load<DOLGNFL, DOLGNFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DOLGNFL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DOLGNFL, DOLGNFLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DOLGNFL Parse(string xml) {
            return XTypedServices.Parse<DOLGNFL, DOLGNFLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DOLGNFL(((DOLGNFLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DOLGNFLType ContentField) {
            this.ContentField = ((DOLGNFLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PREDSH : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PREDSHType ContentField;
        
         public static explicit operator PREDSH(XElement xe) { return XTypedServices.ToXTypedElement<PREDSH, PREDSHType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PREDSH() {
            SetInnerType(new PREDSHType());
        }
        
        public PREDSH(PREDSHType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public PREDSHType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUMST {
            get {
                return this.ContentField.NUMST;
            }
            set {
                this.ContentField.NUMST = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PREDSH", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PREDSH Load(string xmlFile) {
            return XTypedServices.Load<PREDSH, PREDSHType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PREDSH Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PREDSH, PREDSHType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PREDSH Parse(string xml) {
            return XTypedServices.Parse<PREDSH, PREDSHType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PREDSH(((PREDSHType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PREDSHType ContentField) {
            this.ContentField = ((PREDSHType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PREEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PREEMType ContentField;
        
         public static explicit operator PREEM(XElement xe) { return XTypedServices.ToXTypedElement<PREEM, PREEMType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PREEM() {
            SetInnerType(new PREEMType());
        }
        
        public PREEM(PREEMType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public PREEMType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG?, ADDRESS?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PREEM", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PREEM Load(string xmlFile) {
            return XTypedServices.Load<PREEM, PREEMType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PREEM Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PREEM, PREEMType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PREEM Parse(string xml) {
            return XTypedServices.Parse<PREEM, PREEMType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PREEM(((PREEMType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PREEMType ContentField) {
            this.ContentField = ((PREEMType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LICENZ : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LICENZType ContentField;
        
         public static explicit operator LICENZ(XElement xe) { return XTypedServices.ToXTypedElement<LICENZ, LICENZType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LICENZ() {
            SetInnerType(new LICENZType());
        }
        
        public LICENZ(LICENZType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public LICENZType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public LICORG LICORG {
            get {
                return this.ContentField.LICORG;
            }
            set {
                this.ContentField.LICORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public IList<VIDLIC> VIDLIC {
            get {
                return this.ContentField.VIDLIC;
            }
            set {
                this.ContentField.VIDLIC = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LICORG, VIDLIC+, SOSTLIC)
        /// </para>
        /// </summary>
        public SOSTLIC SOSTLIC {
            get {
                return this.ContentField.SOSTLIC;
            }
            set {
                this.ContentField.SOSTLIC = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NUMLIC {
            get {
                return this.ContentField.NUMLIC;
            }
            set {
                this.ContentField.NUMLIC = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTRESH {
            get {
                return this.ContentField.DTRESH;
            }
            set {
                this.ContentField.DTRESH = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTOP {
            get {
                return this.ContentField.DTSTOP;
            }
            set {
                this.ContentField.DTSTOP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTARTNOV {
            get {
                return this.ContentField.DTSTARTNOV;
            }
            set {
                this.ContentField.DTSTARTNOV = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LICENZ", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LICENZ Load(string xmlFile) {
            return XTypedServices.Load<LICENZ, LICENZType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LICENZ Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LICENZ, LICENZType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LICENZ Parse(string xml) {
            return XTypedServices.Parse<LICENZ, LICENZType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new LICENZ(((LICENZType)(this.Content.Clone())));
        }
        
        private void SetInnerType(LICENZType ContentField) {
            this.ContentField = ((LICENZType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LICORG : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LICORGType ContentField;
        
         public static explicit operator LICORG(XElement xe) { return XTypedServices.ToXTypedElement<LICORG, LICORGType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LICORG() {
            SetInnerType(new LICORGType());
        }
        
        public LICORG(LICORGType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public LICORGType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LICORG", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LICORG Load(string xmlFile) {
            return XTypedServices.Load<LICORG, LICORGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LICORG Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LICORG, LICORGType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LICORG Parse(string xml) {
            return XTypedServices.Parse<LICORG, LICORGType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new LICORG(((LICORGType)(this.Content.Clone())));
        }
        
        private void SetInnerType(LICORGType ContentField) {
            this.ContentField = ((LICORGType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VIDLIC : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VIDLICType ContentField;
        
         public static explicit operator VIDLIC(XElement xe) { return XTypedServices.ToXTypedElement<VIDLIC, VIDLICType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VIDLIC() {
            SetInnerType(new VIDLICType());
        }
        
        public VIDLIC(VIDLICType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VIDLICType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_VLIC {
            get {
                return this.ContentField.NAME_VLIC;
            }
            set {
                this.ContentField.NAME_VLIC = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VIDLIC", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VIDLIC Load(string xmlFile) {
            return XTypedServices.Load<VIDLIC, VIDLICType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDLIC Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VIDLIC, VIDLICType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VIDLIC Parse(string xml) {
            return XTypedServices.Parse<VIDLIC, VIDLICType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VIDLIC(((VIDLICType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VIDLICType ContentField) {
            this.ContentField = ((VIDLICType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SOSTLIC : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SOSTLICType ContentField;
        
         public static explicit operator SOSTLIC(XElement xe) { return XTypedServices.ToXTypedElement<SOSTLIC, SOSTLICType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SOSTLIC() {
            SetInnerType(new SOSTLICType());
        }
        
        public SOSTLIC(SOSTLICType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SOSTLICType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SOSTLIC", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SOSTLIC Load(string xmlFile) {
            return XTypedServices.Load<SOSTLIC, SOSTLICType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SOSTLIC Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SOSTLIC, SOSTLICType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SOSTLIC Parse(string xml) {
            return XTypedServices.Parse<SOSTLIC, SOSTLICType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SOSTLIC(((SOSTLICType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SOSTLICType ContentField) {
            this.ContentField = ((SOSTLICType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class REGEGRUL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private REGEGRULType ContentField;
        
         public static explicit operator REGEGRUL(XElement xe) { return XTypedServices.ToXTypedElement<REGEGRUL, REGEGRULType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public REGEGRUL() {
            SetInnerType(new REGEGRULType());
        }
        
        public REGEGRUL(REGEGRULType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public REGEGRULType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public REGORG REGORG {
            get {
                return this.ContentField.REGORG;
            }
            set {
                this.ContentField.REGORG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public VIDREG VIDREG {
            get {
                return this.ContentField.VIDREG;
            }
            set {
                this.ContentField.VIDREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (REGORG, VIDREG, SOSTZAP?)
        /// </para>
        /// </summary>
        public SOSTZAP SOSTZAP {
            get {
                return this.ContentField.SOSTZAP;
            }
            set {
                this.ContentField.SOSTZAP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string IDREG {
            get {
                return this.ContentField.IDREG;
            }
            set {
                this.ContentField.IDREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string REGNUM {
            get {
                return this.ContentField.REGNUM;
            }
            set {
                this.ContentField.REGNUM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTZAP {
            get {
                return this.ContentField.DTZAP;
            }
            set {
                this.ContentField.DTZAP = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("REGEGRUL", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static REGEGRUL Load(string xmlFile) {
            return XTypedServices.Load<REGEGRUL, REGEGRULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGEGRUL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<REGEGRUL, REGEGRULType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static REGEGRUL Parse(string xml) {
            return XTypedServices.Parse<REGEGRUL, REGEGRULType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new REGEGRUL(((REGEGRULType)(this.Content.Clone())));
        }
        
        private void SetInnerType(REGEGRULType ContentField) {
            this.ContentField = ((REGEGRULType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SOSTZAP : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SOSTZAPType ContentField;
        
         public static explicit operator SOSTZAP(XElement xe) { return XTypedServices.ToXTypedElement<SOSTZAP, SOSTZAPType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SOSTZAP() {
            SetInnerType(new SOSTZAPType());
        }
        
        public SOSTZAP(SOSTZAPType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SOSTZAPType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                return this.ContentField.ID;
            }
            set {
                this.ContentField.ID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SOSTZAP", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SOSTZAP Load(string xmlFile) {
            return XTypedServices.Load<SOSTZAP, SOSTZAPType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SOSTZAP Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SOSTZAP, SOSTZAPType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SOSTZAP Parse(string xml) {
            return XTypedServices.Parse<SOSTZAP, SOSTZAPType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SOSTZAP(((SOSTZAPType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SOSTZAPType ContentField) {
            this.ContentField = ((SOSTZAPType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_OB : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_OBType ContentField;
        
         public static explicit operator UL_OB(XElement xe) { return XTypedServices.ToXTypedElement<UL_OB, UL_OBType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_OB() {
            SetInnerType(new UL_OBType());
        }
        
        public UL_OB(UL_OBType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_OBType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                return this.ContentField.CONTACT;
            }
            set {
                this.ContentField.CONTACT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string VID_OB {
            get {
                return this.ContentField.VID_OB;
            }
            set {
                this.ContentField.VID_OB = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_OB", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_OB Load(string xmlFile) {
            return XTypedServices.Load<UL_OB, UL_OBType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_OB Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_OB, UL_OBType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_OB Parse(string xml) {
            return XTypedServices.Parse<UL_OB, UL_OBType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_OB(((UL_OBType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_OBType ContentField) {
            this.ContentField = ((UL_OBType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UL_UPR : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UL_UPRType ContentField;
        
         public static explicit operator UL_UPR(XElement xe) { return XTypedServices.ToXTypedElement<UL_UPR, UL_UPRType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UL_UPR() {
            SetInnerType(new UL_UPRType());
        }
        
        public UL_UPR(UL_UPRType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public UL_UPRType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS?, CONTACT?)
        /// </para>
        /// </summary>
        public ADDRESS ADDRESS {
            get {
                return this.ContentField.ADDRESS;
            }
            set {
                this.ContentField.ADDRESS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ADDRESS?, CONTACT?)
        /// </para>
        /// </summary>
        public CONTACT CONTACT {
            get {
                return this.ContentField.CONTACT;
            }
            set {
                this.ContentField.CONTACT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAMEP {
            get {
                return this.ContentField.NAMEP;
            }
            set {
                this.ContentField.NAMEP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTREG {
            get {
                return this.ContentField.DTREG;
            }
            set {
                this.ContentField.DTREG = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UL_UPR", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UL_UPR Load(string xmlFile) {
            return XTypedServices.Load<UL_UPR, UL_UPRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_UPR Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UL_UPR, UL_UPRType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UL_UPR Parse(string xml) {
            return XTypedServices.Parse<UL_UPR, UL_UPRType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UL_UPR(((UL_UPRType)(this.Content.Clone())));
        }
        
        private void SetInnerType(UL_UPRType ContentField) {
            this.ContentField = ((UL_UPRType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MNS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MNSType ContentField;
        
         public static explicit operator MNS(XElement xe) { return XTypedServices.ToXTypedElement<MNS, MNSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MNS() {
            SetInnerType(new MNSType());
        }
        
        public MNS(MNSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public MNSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_MNS)
        /// </para>
        /// </summary>
        public ORGAN_MNS ORGAN_MNS {
            get {
                return this.ContentField.ORGAN_MNS;
            }
            set {
                this.ContentField.ORGAN_MNS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MNS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MNS Load(string xmlFile) {
            return XTypedServices.Load<MNS, MNSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MNS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MNS, MNSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MNS Parse(string xml) {
            return XTypedServices.Parse<MNS, MNSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MNS(((MNSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MNSType ContentField) {
            this.ContentField = ((MNSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PF : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PFType ContentField;
        
         public static explicit operator PF(XElement xe) { return XTypedServices.ToXTypedElement<PF, PFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PF() {
            SetInnerType(new PFType());
        }
        
        public PF(PFType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public PFType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_PF)
        /// </para>
        /// </summary>
        public ORGAN_PF ORGAN_PF {
            get {
                return this.ContentField.ORGAN_PF;
            }
            set {
                this.ContentField.ORGAN_PF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_PF {
            get {
                return this.ContentField.REGN_PF;
            }
            set {
                this.ContentField.REGN_PF = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PF Load(string xmlFile) {
            return XTypedServices.Load<PF, PFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PF Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PF, PFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PF Parse(string xml) {
            return XTypedServices.Parse<PF, PFType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PF(((PFType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PFType ContentField) {
            this.ContentField = ((PFType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FSS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FSSType ContentField;
        
         public static explicit operator FSS(XElement xe) { return XTypedServices.ToXTypedElement<FSS, FSSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FSS() {
            SetInnerType(new FSSType());
        }
        
        public FSS(FSSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public FSSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_FSS)
        /// </para>
        /// </summary>
        public ORGAN_FSS ORGAN_FSS {
            get {
                return this.ContentField.ORGAN_FSS;
            }
            set {
                this.ContentField.ORGAN_FSS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_FSS {
            get {
                return this.ContentField.REGN_FSS;
            }
            set {
                this.ContentField.REGN_FSS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FSS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FSS Load(string xmlFile) {
            return XTypedServices.Load<FSS, FSSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FSS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FSS, FSSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FSS Parse(string xml) {
            return XTypedServices.Parse<FSS, FSSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new FSS(((FSSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FSSType ContentField) {
            this.ContentField = ((FSSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FOMS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FOMSType ContentField;
        
         public static explicit operator FOMS(XElement xe) { return XTypedServices.ToXTypedElement<FOMS, FOMSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FOMS() {
            SetInnerType(new FOMSType());
        }
        
        public FOMS(FOMSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public FOMSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ORGAN_FOMS)
        /// </para>
        /// </summary>
        public ORGAN_FOMS ORGAN_FOMS {
            get {
                return this.ContentField.ORGAN_FOMS;
            }
            set {
                this.ContentField.ORGAN_FOMS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string REGN_FOMS {
            get {
                return this.ContentField.REGN_FOMS;
            }
            set {
                this.ContentField.REGN_FOMS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FOMS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FOMS Load(string xmlFile) {
            return XTypedServices.Load<FOMS, FOMSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FOMS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FOMS, FOMSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FOMS Parse(string xml) {
            return XTypedServices.Parse<FOMS, FOMSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new FOMS(((FOMSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FOMSType ContentField) {
            this.ContentField = ((FOMSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_MNS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ORGAN_MNSType ContentField;
        
         public static explicit operator ORGAN_MNS(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_MNS, ORGAN_MNSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_MNS() {
            SetInnerType(new ORGAN_MNSType());
        }
        
        public ORGAN_MNS(ORGAN_MNSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ORGAN_MNSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                return this.ContentField.KOD;
            }
            set {
                this.ContentField.KOD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_MNS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ORGAN_MNS Load(string xmlFile) {
            return XTypedServices.Load<ORGAN_MNS, ORGAN_MNSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_MNS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ORGAN_MNS, ORGAN_MNSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_MNS Parse(string xml) {
            return XTypedServices.Parse<ORGAN_MNS, ORGAN_MNSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ORGAN_MNS(((ORGAN_MNSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ORGAN_MNSType ContentField) {
            this.ContentField = ((ORGAN_MNSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_PF : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ORGAN_PFType ContentField;
        
         public static explicit operator ORGAN_PF(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_PF, ORGAN_PFType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_PF() {
            SetInnerType(new ORGAN_PFType());
        }
        
        public ORGAN_PF(ORGAN_PFType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ORGAN_PFType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                return this.ContentField.KOD;
            }
            set {
                this.ContentField.KOD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_PF", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ORGAN_PF Load(string xmlFile) {
            return XTypedServices.Load<ORGAN_PF, ORGAN_PFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_PF Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ORGAN_PF, ORGAN_PFType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_PF Parse(string xml) {
            return XTypedServices.Parse<ORGAN_PF, ORGAN_PFType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ORGAN_PF(((ORGAN_PFType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ORGAN_PFType ContentField) {
            this.ContentField = ((ORGAN_PFType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_FSS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ORGAN_FSSType ContentField;
        
         public static explicit operator ORGAN_FSS(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_FSS, ORGAN_FSSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_FSS() {
            SetInnerType(new ORGAN_FSSType());
        }
        
        public ORGAN_FSS(ORGAN_FSSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ORGAN_FSSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                return this.ContentField.KOD;
            }
            set {
                this.ContentField.KOD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_FSS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ORGAN_FSS Load(string xmlFile) {
            return XTypedServices.Load<ORGAN_FSS, ORGAN_FSSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_FSS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ORGAN_FSS, ORGAN_FSSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_FSS Parse(string xml) {
            return XTypedServices.Parse<ORGAN_FSS, ORGAN_FSSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ORGAN_FSS(((ORGAN_FSSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ORGAN_FSSType ContentField) {
            this.ContentField = ((ORGAN_FSSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ORGAN_FOMS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ORGAN_FOMSType ContentField;
        
         public static explicit operator ORGAN_FOMS(XElement xe) { return XTypedServices.ToXTypedElement<ORGAN_FOMS, ORGAN_FOMSType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ORGAN_FOMS() {
            SetInnerType(new ORGAN_FOMSType());
        }
        
        public ORGAN_FOMS(ORGAN_FOMSType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ORGAN_FOMSType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string KOD {
            get {
                return this.ContentField.KOD;
            }
            set {
                this.ContentField.KOD = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME {
            get {
                return this.ContentField.NAME;
            }
            set {
                this.ContentField.NAME = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ORGAN_FOMS", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ORGAN_FOMS Load(string xmlFile) {
            return XTypedServices.Load<ORGAN_FOMS, ORGAN_FOMSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_FOMS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ORGAN_FOMS, ORGAN_FOMSType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ORGAN_FOMS Parse(string xml) {
            return XTypedServices.Parse<ORGAN_FOMS, ORGAN_FOMSType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ORGAN_FOMS(((ORGAN_FOMSType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ORGAN_FOMSType ContentField) {
            this.ContentField = ((ORGAN_FOMSType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ACCOUNT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ACCOUNTType ContentField;
        
         public static explicit operator ACCOUNT(XElement xe) { return XTypedServices.ToXTypedElement<ACCOUNT, ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ACCOUNT() {
            SetInnerType(new ACCOUNTType());
        }
        
        public ACCOUNT(ACCOUNTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ACCOUNTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
        /// </para>
        /// </summary>
        public VID_ACCOUNT VID_ACCOUNT {
            get {
                return this.ContentField.VID_ACCOUNT;
            }
            set {
                this.ContentField.VID_ACCOUNT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VID_ACCOUNT, TYPE_ACCOUNT)
        /// </para>
        /// </summary>
        public TYPE_ACCOUNT TYPE_ACCOUNT {
            get {
                return this.ContentField.TYPE_ACCOUNT;
            }
            set {
                this.ContentField.TYPE_ACCOUNT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OGRN {
            get {
                return this.ContentField.OGRN;
            }
            set {
                this.ContentField.OGRN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NUM {
            get {
                return this.ContentField.NUM;
            }
            set {
                this.ContentField.NUM = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string KPP {
            get {
                return this.ContentField.KPP;
            }
            set {
                this.ContentField.KPP = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string BIK {
            get {
                return this.ContentField.BIK;
            }
            set {
                this.ContentField.BIK = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NUM_CONTRACT {
            get {
                return this.ContentField.NUM_CONTRACT;
            }
            set {
                this.ContentField.NUM_CONTRACT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTSTART {
            get {
                return this.ContentField.DTSTART;
            }
            set {
                this.ContentField.DTSTART = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DTEND {
            get {
                return this.ContentField.DTEND;
            }
            set {
                this.ContentField.DTEND = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ACCOUNT Load(string xmlFile) {
            return XTypedServices.Load<ACCOUNT, ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ACCOUNT Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ACCOUNT, ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ACCOUNT Parse(string xml) {
            return XTypedServices.Parse<ACCOUNT, ACCOUNTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ACCOUNT(((ACCOUNTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ACCOUNTType ContentField) {
            this.ContentField = ((ACCOUNTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VID_ACCOUNT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VID_ACCOUNTType ContentField;
        
         public static explicit operator VID_ACCOUNT(XElement xe) { return XTypedServices.ToXTypedElement<VID_ACCOUNT, VID_ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VID_ACCOUNT() {
            SetInnerType(new VID_ACCOUNTType());
        }
        
        public VID_ACCOUNT(VID_ACCOUNTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public VID_ACCOUNTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID_VA {
            get {
                return this.ContentField.ID_VA;
            }
            set {
                this.ContentField.ID_VA = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_VA {
            get {
                return this.ContentField.NAME_VA;
            }
            set {
                this.ContentField.NAME_VA = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VID_ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VID_ACCOUNT Load(string xmlFile) {
            return XTypedServices.Load<VID_ACCOUNT, VID_ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VID_ACCOUNT Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VID_ACCOUNT, VID_ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VID_ACCOUNT Parse(string xml) {
            return XTypedServices.Parse<VID_ACCOUNT, VID_ACCOUNTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VID_ACCOUNT(((VID_ACCOUNTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(VID_ACCOUNTType ContentField) {
            this.ContentField = ((VID_ACCOUNTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TYPE_ACCOUNT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TYPE_ACCOUNTType ContentField;
        
         public static explicit operator TYPE_ACCOUNT(XElement xe) { return XTypedServices.ToXTypedElement<TYPE_ACCOUNT, TYPE_ACCOUNTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TYPE_ACCOUNT() {
            SetInnerType(new TYPE_ACCOUNTType());
        }
        
        public TYPE_ACCOUNT(TYPE_ACCOUNTType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public TYPE_ACCOUNTType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID_TA {
            get {
                return this.ContentField.ID_TA;
            }
            set {
                this.ContentField.ID_TA = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NAME_TA {
            get {
                return this.ContentField.NAME_TA;
            }
            set {
                this.ContentField.NAME_TA = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TYPE_ACCOUNT", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TYPE_ACCOUNT Load(string xmlFile) {
            return XTypedServices.Load<TYPE_ACCOUNT, TYPE_ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TYPE_ACCOUNT Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TYPE_ACCOUNT, TYPE_ACCOUNTType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TYPE_ACCOUNT Parse(string xml) {
            return XTypedServices.Parse<TYPE_ACCOUNT, TYPE_ACCOUNTType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TYPE_ACCOUNT(((TYPE_ACCOUNTType)(this.Content.Clone())));
        }
        
        private void SetInnerType(TYPE_ACCOUNTType ContentField) {
            this.ContentField = ((TYPE_ACCOUNTType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("EGRUL_UL_DATA", ""), typeof(global::egrul.nalog.ru.Item2.EGRUL_UL_DATAType));
            typeDictionary.Add(XName.Get("HEADER", ""), typeof(global::egrul.nalog.ru.Item2.HEADERType));
            typeDictionary.Add(XName.Get("USER", ""), typeof(global::egrul.nalog.ru.Item2.USERType));
            typeDictionary.Add(XName.Get("UL", ""), typeof(global::egrul.nalog.ru.Item2.ULType));
            typeDictionary.Add(XName.Get("OKVED", ""), typeof(global::egrul.nalog.ru.Item2.OKVEDType));
            typeDictionary.Add(XName.Get("REESTR_AO", ""), typeof(global::egrul.nalog.ru.Item2.REESTR_AOType));
            typeDictionary.Add(XName.Get("STATUS", ""), typeof(global::egrul.nalog.ru.Item2.STATUSType));
            typeDictionary.Add(XName.Get("UL_NAME", ""), typeof(global::egrul.nalog.ru.Item2.UL_NAMEType));
            typeDictionary.Add(XName.Get("OPF", ""), typeof(global::egrul.nalog.ru.Item2.OPFType));
            typeDictionary.Add(XName.Get("NAMEN", ""), typeof(global::egrul.nalog.ru.Item2.NAMENType));
            typeDictionary.Add(XName.Get("NAMEI", ""), typeof(global::egrul.nalog.ru.Item2.NAMEIType));
            typeDictionary.Add(XName.Get("LANG", ""), typeof(global::egrul.nalog.ru.Item2.LANGType));
            typeDictionary.Add(XName.Get("UL_ADDRESS", ""), typeof(global::egrul.nalog.ru.Item2.UL_ADDRESSType));
            typeDictionary.Add(XName.Get("ADDRESS", ""), typeof(global::egrul.nalog.ru.Item2.ADDRESSType));
            typeDictionary.Add(XName.Get("REGION", ""), typeof(global::egrul.nalog.ru.Item2.REGIONType));
            typeDictionary.Add(XName.Get("RAION", ""), typeof(global::egrul.nalog.ru.Item2.RAIONType));
            typeDictionary.Add(XName.Get("GOROD", ""), typeof(global::egrul.nalog.ru.Item2.GORODType));
            typeDictionary.Add(XName.Get("NASPUNKT", ""), typeof(global::egrul.nalog.ru.Item2.NASPUNKTType));
            typeDictionary.Add(XName.Get("STREET", ""), typeof(global::egrul.nalog.ru.Item2.STREETType));
            typeDictionary.Add(XName.Get("VIDADR", ""), typeof(global::egrul.nalog.ru.Item2.VIDADRType));
            typeDictionary.Add(XName.Get("CONTACT", ""), typeof(global::egrul.nalog.ru.Item2.CONTACTType));
            typeDictionary.Add(XName.Get("FL", ""), typeof(global::egrul.nalog.ru.Item2.FLType));
            typeDictionary.Add(XName.Get("UL_CAPITAL", ""), typeof(global::egrul.nalog.ru.Item2.UL_CAPITALType));
            typeDictionary.Add(XName.Get("VIDCAP", ""), typeof(global::egrul.nalog.ru.Item2.VIDCAPType));
            typeDictionary.Add(XName.Get("DOCFL", ""), typeof(global::egrul.nalog.ru.Item2.DOCFLType));
            typeDictionary.Add(XName.Get("VIDDOK", ""), typeof(global::egrul.nalog.ru.Item2.VIDDOKType));
            typeDictionary.Add(XName.Get("UL_START", ""), typeof(global::egrul.nalog.ru.Item2.UL_STARTType));
            typeDictionary.Add(XName.Get("UL_FINISH", ""), typeof(global::egrul.nalog.ru.Item2.UL_FINISHType));
            typeDictionary.Add(XName.Get("UCHR", ""), typeof(global::egrul.nalog.ru.Item2.UCHRType));
            typeDictionary.Add(XName.Get("RUL", ""), typeof(global::egrul.nalog.ru.Item2.RULType));
            typeDictionary.Add(XName.Get("VIDREG", ""), typeof(global::egrul.nalog.ru.Item2.VIDREGType));
            typeDictionary.Add(XName.Get("REGORG", ""), typeof(global::egrul.nalog.ru.Item2.REGORGType));
            typeDictionary.Add(XName.Get("OKSM", ""), typeof(global::egrul.nalog.ru.Item2.OKSMType));
            typeDictionary.Add(XName.Get("IUL", ""), typeof(global::egrul.nalog.ru.Item2.IULType));
            typeDictionary.Add(XName.Get("UCHRFL", ""), typeof(global::egrul.nalog.ru.Item2.UCHRFLType));
            typeDictionary.Add(XName.Get("DOLGNFL", ""), typeof(global::egrul.nalog.ru.Item2.DOLGNFLType));
            typeDictionary.Add(XName.Get("PREDSH", ""), typeof(global::egrul.nalog.ru.Item2.PREDSHType));
            typeDictionary.Add(XName.Get("PREEM", ""), typeof(global::egrul.nalog.ru.Item2.PREEMType));
            typeDictionary.Add(XName.Get("LICENZ", ""), typeof(global::egrul.nalog.ru.Item2.LICENZType));
            typeDictionary.Add(XName.Get("LICORG", ""), typeof(global::egrul.nalog.ru.Item2.LICORGType));
            typeDictionary.Add(XName.Get("VIDLIC", ""), typeof(global::egrul.nalog.ru.Item2.VIDLICType));
            typeDictionary.Add(XName.Get("SOSTLIC", ""), typeof(global::egrul.nalog.ru.Item2.SOSTLICType));
            typeDictionary.Add(XName.Get("REGEGRUL", ""), typeof(global::egrul.nalog.ru.Item2.REGEGRULType));
            typeDictionary.Add(XName.Get("SOSTZAP", ""), typeof(global::egrul.nalog.ru.Item2.SOSTZAPType));
            typeDictionary.Add(XName.Get("UL_OB", ""), typeof(global::egrul.nalog.ru.Item2.UL_OBType));
            typeDictionary.Add(XName.Get("UL_UPR", ""), typeof(global::egrul.nalog.ru.Item2.UL_UPRType));
            typeDictionary.Add(XName.Get("MNS", ""), typeof(global::egrul.nalog.ru.Item2.MNSType));
            typeDictionary.Add(XName.Get("PF", ""), typeof(global::egrul.nalog.ru.Item2.PFType));
            typeDictionary.Add(XName.Get("FSS", ""), typeof(global::egrul.nalog.ru.Item2.FSSType));
            typeDictionary.Add(XName.Get("FOMS", ""), typeof(global::egrul.nalog.ru.Item2.FOMSType));
            typeDictionary.Add(XName.Get("ORGAN_MNS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_MNSType));
            typeDictionary.Add(XName.Get("ORGAN_PF", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_PFType));
            typeDictionary.Add(XName.Get("ORGAN_FSS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_FSSType));
            typeDictionary.Add(XName.Get("ORGAN_FOMS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_FOMSType));
            typeDictionary.Add(XName.Get("ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.ACCOUNTType));
            typeDictionary.Add(XName.Get("VID_ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.VID_ACCOUNTType));
            typeDictionary.Add(XName.Get("TYPE_ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.TYPE_ACCOUNTType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("EGRUL_UL_DATA", ""), typeof(global::egrul.nalog.ru.Item2.EGRUL_UL_DATA));
            elementDictionary.Add(XName.Get("HEADER", ""), typeof(global::egrul.nalog.ru.Item2.HEADER));
            elementDictionary.Add(XName.Get("USER", ""), typeof(global::egrul.nalog.ru.Item2.USER));
            elementDictionary.Add(XName.Get("UL", ""), typeof(global::egrul.nalog.ru.Item2.UL));
            elementDictionary.Add(XName.Get("OKVED", ""), typeof(global::egrul.nalog.ru.Item2.OKVED));
            elementDictionary.Add(XName.Get("REESTR_AO", ""), typeof(global::egrul.nalog.ru.Item2.REESTR_AO));
            elementDictionary.Add(XName.Get("STATUS", ""), typeof(global::egrul.nalog.ru.Item2.STATUS));
            elementDictionary.Add(XName.Get("UL_NAME", ""), typeof(global::egrul.nalog.ru.Item2.UL_NAME));
            elementDictionary.Add(XName.Get("OPF", ""), typeof(global::egrul.nalog.ru.Item2.OPF));
            elementDictionary.Add(XName.Get("NAMEN", ""), typeof(global::egrul.nalog.ru.Item2.NAMEN));
            elementDictionary.Add(XName.Get("NAMEI", ""), typeof(global::egrul.nalog.ru.Item2.NAMEI));
            elementDictionary.Add(XName.Get("LANG", ""), typeof(global::egrul.nalog.ru.Item2.LANG));
            elementDictionary.Add(XName.Get("UL_ADDRESS", ""), typeof(global::egrul.nalog.ru.Item2.UL_ADDRESS));
            elementDictionary.Add(XName.Get("ADDRESS", ""), typeof(global::egrul.nalog.ru.Item2.ADDRESS));
            elementDictionary.Add(XName.Get("REGION", ""), typeof(global::egrul.nalog.ru.Item2.REGION));
            elementDictionary.Add(XName.Get("RAION", ""), typeof(global::egrul.nalog.ru.Item2.RAION));
            elementDictionary.Add(XName.Get("GOROD", ""), typeof(global::egrul.nalog.ru.Item2.GOROD));
            elementDictionary.Add(XName.Get("NASPUNKT", ""), typeof(global::egrul.nalog.ru.Item2.NASPUNKT));
            elementDictionary.Add(XName.Get("STREET", ""), typeof(global::egrul.nalog.ru.Item2.STREET));
            elementDictionary.Add(XName.Get("VIDADR", ""), typeof(global::egrul.nalog.ru.Item2.VIDADR));
            elementDictionary.Add(XName.Get("CONTACT", ""), typeof(global::egrul.nalog.ru.Item2.CONTACT));
            elementDictionary.Add(XName.Get("FL", ""), typeof(global::egrul.nalog.ru.Item2.FL));
            elementDictionary.Add(XName.Get("UL_CAPITAL", ""), typeof(global::egrul.nalog.ru.Item2.UL_CAPITAL));
            elementDictionary.Add(XName.Get("VIDCAP", ""), typeof(global::egrul.nalog.ru.Item2.VIDCAP));
            elementDictionary.Add(XName.Get("DOCFL", ""), typeof(global::egrul.nalog.ru.Item2.DOCFL));
            elementDictionary.Add(XName.Get("VIDDOK", ""), typeof(global::egrul.nalog.ru.Item2.VIDDOK));
            elementDictionary.Add(XName.Get("UL_START", ""), typeof(global::egrul.nalog.ru.Item2.UL_START));
            elementDictionary.Add(XName.Get("UL_FINISH", ""), typeof(global::egrul.nalog.ru.Item2.UL_FINISH));
            elementDictionary.Add(XName.Get("UCHR", ""), typeof(global::egrul.nalog.ru.Item2.UCHR));
            elementDictionary.Add(XName.Get("RUL", ""), typeof(global::egrul.nalog.ru.Item2.RUL));
            elementDictionary.Add(XName.Get("VIDREG", ""), typeof(global::egrul.nalog.ru.Item2.VIDREG));
            elementDictionary.Add(XName.Get("REGORG", ""), typeof(global::egrul.nalog.ru.Item2.REGORG));
            elementDictionary.Add(XName.Get("OKSM", ""), typeof(global::egrul.nalog.ru.Item2.OKSM));
            elementDictionary.Add(XName.Get("IUL", ""), typeof(global::egrul.nalog.ru.Item2.IUL));
            elementDictionary.Add(XName.Get("UCHRFL", ""), typeof(global::egrul.nalog.ru.Item2.UCHRFL));
            elementDictionary.Add(XName.Get("DOLGNFL", ""), typeof(global::egrul.nalog.ru.Item2.DOLGNFL));
            elementDictionary.Add(XName.Get("PREDSH", ""), typeof(global::egrul.nalog.ru.Item2.PREDSH));
            elementDictionary.Add(XName.Get("PREEM", ""), typeof(global::egrul.nalog.ru.Item2.PREEM));
            elementDictionary.Add(XName.Get("LICENZ", ""), typeof(global::egrul.nalog.ru.Item2.LICENZ));
            elementDictionary.Add(XName.Get("LICORG", ""), typeof(global::egrul.nalog.ru.Item2.LICORG));
            elementDictionary.Add(XName.Get("VIDLIC", ""), typeof(global::egrul.nalog.ru.Item2.VIDLIC));
            elementDictionary.Add(XName.Get("SOSTLIC", ""), typeof(global::egrul.nalog.ru.Item2.SOSTLIC));
            elementDictionary.Add(XName.Get("REGEGRUL", ""), typeof(global::egrul.nalog.ru.Item2.REGEGRUL));
            elementDictionary.Add(XName.Get("SOSTZAP", ""), typeof(global::egrul.nalog.ru.Item2.SOSTZAP));
            elementDictionary.Add(XName.Get("UL_OB", ""), typeof(global::egrul.nalog.ru.Item2.UL_OB));
            elementDictionary.Add(XName.Get("UL_UPR", ""), typeof(global::egrul.nalog.ru.Item2.UL_UPR));
            elementDictionary.Add(XName.Get("MNS", ""), typeof(global::egrul.nalog.ru.Item2.MNS));
            elementDictionary.Add(XName.Get("PF", ""), typeof(global::egrul.nalog.ru.Item2.PF));
            elementDictionary.Add(XName.Get("FSS", ""), typeof(global::egrul.nalog.ru.Item2.FSS));
            elementDictionary.Add(XName.Get("FOMS", ""), typeof(global::egrul.nalog.ru.Item2.FOMS));
            elementDictionary.Add(XName.Get("ORGAN_MNS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_MNS));
            elementDictionary.Add(XName.Get("ORGAN_PF", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_PF));
            elementDictionary.Add(XName.Get("ORGAN_FSS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_FSS));
            elementDictionary.Add(XName.Get("ORGAN_FOMS", ""), typeof(global::egrul.nalog.ru.Item2.ORGAN_FOMS));
            elementDictionary.Add(XName.Get("ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.ACCOUNT));
            elementDictionary.Add(XName.Get("VID_ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.VID_ACCOUNT));
            elementDictionary.Add(XName.Get("TYPE_ACCOUNT", ""), typeof(global::egrul.nalog.ru.Item2.TYPE_ACCOUNT));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.EGRUL_UL_DATA), typeof(global::egrul.nalog.ru.Item2.EGRUL_UL_DATAType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.HEADER), typeof(global::egrul.nalog.ru.Item2.HEADERType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.USER), typeof(global::egrul.nalog.ru.Item2.USERType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL), typeof(global::egrul.nalog.ru.Item2.ULType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.OKVED), typeof(global::egrul.nalog.ru.Item2.OKVEDType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.REESTR_AO), typeof(global::egrul.nalog.ru.Item2.REESTR_AOType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.STATUS), typeof(global::egrul.nalog.ru.Item2.STATUSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_NAME), typeof(global::egrul.nalog.ru.Item2.UL_NAMEType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.OPF), typeof(global::egrul.nalog.ru.Item2.OPFType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.NAMEN), typeof(global::egrul.nalog.ru.Item2.NAMENType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.NAMEI), typeof(global::egrul.nalog.ru.Item2.NAMEIType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.LANG), typeof(global::egrul.nalog.ru.Item2.LANGType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_ADDRESS), typeof(global::egrul.nalog.ru.Item2.UL_ADDRESSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ADDRESS), typeof(global::egrul.nalog.ru.Item2.ADDRESSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.REGION), typeof(global::egrul.nalog.ru.Item2.REGIONType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.RAION), typeof(global::egrul.nalog.ru.Item2.RAIONType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.GOROD), typeof(global::egrul.nalog.ru.Item2.GORODType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.NASPUNKT), typeof(global::egrul.nalog.ru.Item2.NASPUNKTType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.STREET), typeof(global::egrul.nalog.ru.Item2.STREETType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VIDADR), typeof(global::egrul.nalog.ru.Item2.VIDADRType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.CONTACT), typeof(global::egrul.nalog.ru.Item2.CONTACTType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.FL), typeof(global::egrul.nalog.ru.Item2.FLType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_CAPITAL), typeof(global::egrul.nalog.ru.Item2.UL_CAPITALType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VIDCAP), typeof(global::egrul.nalog.ru.Item2.VIDCAPType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.DOCFL), typeof(global::egrul.nalog.ru.Item2.DOCFLType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VIDDOK), typeof(global::egrul.nalog.ru.Item2.VIDDOKType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_START), typeof(global::egrul.nalog.ru.Item2.UL_STARTType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_FINISH), typeof(global::egrul.nalog.ru.Item2.UL_FINISHType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UCHR), typeof(global::egrul.nalog.ru.Item2.UCHRType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.RUL), typeof(global::egrul.nalog.ru.Item2.RULType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VIDREG), typeof(global::egrul.nalog.ru.Item2.VIDREGType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.REGORG), typeof(global::egrul.nalog.ru.Item2.REGORGType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.OKSM), typeof(global::egrul.nalog.ru.Item2.OKSMType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.IUL), typeof(global::egrul.nalog.ru.Item2.IULType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UCHRFL), typeof(global::egrul.nalog.ru.Item2.UCHRFLType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.DOLGNFL), typeof(global::egrul.nalog.ru.Item2.DOLGNFLType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.PREDSH), typeof(global::egrul.nalog.ru.Item2.PREDSHType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.PREEM), typeof(global::egrul.nalog.ru.Item2.PREEMType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.LICENZ), typeof(global::egrul.nalog.ru.Item2.LICENZType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.LICORG), typeof(global::egrul.nalog.ru.Item2.LICORGType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VIDLIC), typeof(global::egrul.nalog.ru.Item2.VIDLICType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.SOSTLIC), typeof(global::egrul.nalog.ru.Item2.SOSTLICType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.REGEGRUL), typeof(global::egrul.nalog.ru.Item2.REGEGRULType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.SOSTZAP), typeof(global::egrul.nalog.ru.Item2.SOSTZAPType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_OB), typeof(global::egrul.nalog.ru.Item2.UL_OBType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.UL_UPR), typeof(global::egrul.nalog.ru.Item2.UL_UPRType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.MNS), typeof(global::egrul.nalog.ru.Item2.MNSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.PF), typeof(global::egrul.nalog.ru.Item2.PFType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.FSS), typeof(global::egrul.nalog.ru.Item2.FSSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.FOMS), typeof(global::egrul.nalog.ru.Item2.FOMSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ORGAN_MNS), typeof(global::egrul.nalog.ru.Item2.ORGAN_MNSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ORGAN_PF), typeof(global::egrul.nalog.ru.Item2.ORGAN_PFType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ORGAN_FSS), typeof(global::egrul.nalog.ru.Item2.ORGAN_FSSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ORGAN_FOMS), typeof(global::egrul.nalog.ru.Item2.ORGAN_FOMSType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.ACCOUNT), typeof(global::egrul.nalog.ru.Item2.ACCOUNTType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.VID_ACCOUNT), typeof(global::egrul.nalog.ru.Item2.VID_ACCOUNTType));
            wrapperDictionary.Add(typeof(egrul.nalog.ru.Item2.TYPE_ACCOUNT), typeof(global::egrul.nalog.ru.Item2.TYPE_ACCOUNTType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("EGRUL_UL_DATA", "")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public EGRUL_UL_DATA EGRUL_UL_DATA {  get {return rootObject as EGRUL_UL_DATA; } }

    public HEADER HEADER {  get {return rootObject as HEADER; } }

    public USER USER {  get {return rootObject as USER; } }

    public UL UL {  get {return rootObject as UL; } }

    public OKVED OKVED {  get {return rootObject as OKVED; } }

    public REESTR_AO REESTR_AO {  get {return rootObject as REESTR_AO; } }

    public STATUS STATUS {  get {return rootObject as STATUS; } }

    public UL_NAME UL_NAME {  get {return rootObject as UL_NAME; } }

    public OPF OPF {  get {return rootObject as OPF; } }

    public NAMEN NAMEN {  get {return rootObject as NAMEN; } }

    public NAMEI NAMEI {  get {return rootObject as NAMEI; } }

    public LANG LANG {  get {return rootObject as LANG; } }

    public UL_ADDRESS UL_ADDRESS {  get {return rootObject as UL_ADDRESS; } }

    public ADDRESS ADDRESS {  get {return rootObject as ADDRESS; } }

    public REGION REGION {  get {return rootObject as REGION; } }

    public RAION RAION {  get {return rootObject as RAION; } }

    public GOROD GOROD {  get {return rootObject as GOROD; } }

    public NASPUNKT NASPUNKT {  get {return rootObject as NASPUNKT; } }

    public STREET STREET {  get {return rootObject as STREET; } }

    public VIDADR VIDADR {  get {return rootObject as VIDADR; } }

    public CONTACT CONTACT {  get {return rootObject as CONTACT; } }

    public FL FL {  get {return rootObject as FL; } }

    public UL_CAPITAL UL_CAPITAL {  get {return rootObject as UL_CAPITAL; } }

    public VIDCAP VIDCAP {  get {return rootObject as VIDCAP; } }

    public DOCFL DOCFL {  get {return rootObject as DOCFL; } }

    public VIDDOK VIDDOK {  get {return rootObject as VIDDOK; } }

    public UL_START UL_START {  get {return rootObject as UL_START; } }

    public UL_FINISH UL_FINISH {  get {return rootObject as UL_FINISH; } }

    public UCHR UCHR {  get {return rootObject as UCHR; } }

    public RUL RUL {  get {return rootObject as RUL; } }

    public VIDREG VIDREG {  get {return rootObject as VIDREG; } }

    public REGORG REGORG {  get {return rootObject as REGORG; } }

    public OKSM OKSM {  get {return rootObject as OKSM; } }

    public IUL IUL {  get {return rootObject as IUL; } }

    public UCHRFL UCHRFL {  get {return rootObject as UCHRFL; } }

    public DOLGNFL DOLGNFL {  get {return rootObject as DOLGNFL; } }

    public PREDSH PREDSH {  get {return rootObject as PREDSH; } }

    public PREEM PREEM {  get {return rootObject as PREEM; } }

    public LICENZ LICENZ {  get {return rootObject as LICENZ; } }

    public LICORG LICORG {  get {return rootObject as LICORG; } }

    public VIDLIC VIDLIC {  get {return rootObject as VIDLIC; } }

    public SOSTLIC SOSTLIC {  get {return rootObject as SOSTLIC; } }

    public REGEGRUL REGEGRUL {  get {return rootObject as REGEGRUL; } }

    public SOSTZAP SOSTZAP {  get {return rootObject as SOSTZAP; } }

    public UL_OB UL_OB {  get {return rootObject as UL_OB; } }

    public UL_UPR UL_UPR {  get {return rootObject as UL_UPR; } }

    public MNS MNS {  get {return rootObject as MNS; } }

    public PF PF {  get {return rootObject as PF; } }

    public FSS FSS {  get {return rootObject as FSS; } }

    public FOMS FOMS {  get {return rootObject as FOMS; } }

    public ORGAN_MNS ORGAN_MNS {  get {return rootObject as ORGAN_MNS; } }

    public ORGAN_PF ORGAN_PF {  get {return rootObject as ORGAN_PF; } }

    public ORGAN_FSS ORGAN_FSS {  get {return rootObject as ORGAN_FSS; } }

    public ORGAN_FOMS ORGAN_FOMS {  get {return rootObject as ORGAN_FOMS; } }

    public ACCOUNT ACCOUNT {  get {return rootObject as ACCOUNT; } }

    public VID_ACCOUNT VID_ACCOUNT {  get {return rootObject as VID_ACCOUNT; } }

    public TYPE_ACCOUNT TYPE_ACCOUNT {  get {return rootObject as TYPE_ACCOUNT; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(EGRUL_UL_DATA root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(HEADER root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(USER root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OKVED root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(REESTR_AO root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(STATUS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_NAME root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OPF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NAMEN root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NAMEI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LANG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_ADDRESS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ADDRESS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(REGION root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RAION root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GOROD root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NASPUNKT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(STREET root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VIDADR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CONTACT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_CAPITAL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VIDCAP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DOCFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VIDDOK root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_START root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_FINISH root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UCHR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VIDREG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(REGORG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OKSM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(IUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UCHRFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DOLGNFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PREDSH root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PREEM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LICENZ root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LICORG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VIDLIC root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SOSTLIC root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(REGEGRUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SOSTZAP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_OB root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UL_UPR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MNS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FSS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FOMS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ORGAN_MNS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ORGAN_PF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ORGAN_FSS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ORGAN_FOMS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VID_ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TYPE_ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::egrul.nalog.ru.Item2.EGRUL_UL_DATA EGRUL_UL_DATA {  get {return rootObject as global::egrul.nalog.ru.Item2.EGRUL_UL_DATA; } }

    public global::egrul.nalog.ru.Item2.HEADER HEADER {  get {return rootObject as global::egrul.nalog.ru.Item2.HEADER; } }

    public global::egrul.nalog.ru.Item2.USER USER {  get {return rootObject as global::egrul.nalog.ru.Item2.USER; } }

    public global::egrul.nalog.ru.Item2.UL UL {  get {return rootObject as global::egrul.nalog.ru.Item2.UL; } }

    public global::egrul.nalog.ru.Item2.OKVED OKVED {  get {return rootObject as global::egrul.nalog.ru.Item2.OKVED; } }

    public global::egrul.nalog.ru.Item2.REESTR_AO REESTR_AO {  get {return rootObject as global::egrul.nalog.ru.Item2.REESTR_AO; } }

    public global::egrul.nalog.ru.Item2.STATUS STATUS {  get {return rootObject as global::egrul.nalog.ru.Item2.STATUS; } }

    public global::egrul.nalog.ru.Item2.UL_NAME UL_NAME {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_NAME; } }

    public global::egrul.nalog.ru.Item2.OPF OPF {  get {return rootObject as global::egrul.nalog.ru.Item2.OPF; } }

    public global::egrul.nalog.ru.Item2.NAMEN NAMEN {  get {return rootObject as global::egrul.nalog.ru.Item2.NAMEN; } }

    public global::egrul.nalog.ru.Item2.NAMEI NAMEI {  get {return rootObject as global::egrul.nalog.ru.Item2.NAMEI; } }

    public global::egrul.nalog.ru.Item2.LANG LANG {  get {return rootObject as global::egrul.nalog.ru.Item2.LANG; } }

    public global::egrul.nalog.ru.Item2.UL_ADDRESS UL_ADDRESS {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_ADDRESS; } }

    public global::egrul.nalog.ru.Item2.ADDRESS ADDRESS {  get {return rootObject as global::egrul.nalog.ru.Item2.ADDRESS; } }

    public global::egrul.nalog.ru.Item2.REGION REGION {  get {return rootObject as global::egrul.nalog.ru.Item2.REGION; } }

    public global::egrul.nalog.ru.Item2.RAION RAION {  get {return rootObject as global::egrul.nalog.ru.Item2.RAION; } }

    public global::egrul.nalog.ru.Item2.GOROD GOROD {  get {return rootObject as global::egrul.nalog.ru.Item2.GOROD; } }

    public global::egrul.nalog.ru.Item2.NASPUNKT NASPUNKT {  get {return rootObject as global::egrul.nalog.ru.Item2.NASPUNKT; } }

    public global::egrul.nalog.ru.Item2.STREET STREET {  get {return rootObject as global::egrul.nalog.ru.Item2.STREET; } }

    public global::egrul.nalog.ru.Item2.VIDADR VIDADR {  get {return rootObject as global::egrul.nalog.ru.Item2.VIDADR; } }

    public global::egrul.nalog.ru.Item2.CONTACT CONTACT {  get {return rootObject as global::egrul.nalog.ru.Item2.CONTACT; } }

    public global::egrul.nalog.ru.Item2.FL FL {  get {return rootObject as global::egrul.nalog.ru.Item2.FL; } }

    public global::egrul.nalog.ru.Item2.UL_CAPITAL UL_CAPITAL {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_CAPITAL; } }

    public global::egrul.nalog.ru.Item2.VIDCAP VIDCAP {  get {return rootObject as global::egrul.nalog.ru.Item2.VIDCAP; } }

    public global::egrul.nalog.ru.Item2.DOCFL DOCFL {  get {return rootObject as global::egrul.nalog.ru.Item2.DOCFL; } }

    public global::egrul.nalog.ru.Item2.VIDDOK VIDDOK {  get {return rootObject as global::egrul.nalog.ru.Item2.VIDDOK; } }

    public global::egrul.nalog.ru.Item2.UL_START UL_START {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_START; } }

    public global::egrul.nalog.ru.Item2.UL_FINISH UL_FINISH {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_FINISH; } }

    public global::egrul.nalog.ru.Item2.UCHR UCHR {  get {return rootObject as global::egrul.nalog.ru.Item2.UCHR; } }

    public global::egrul.nalog.ru.Item2.RUL RUL {  get {return rootObject as global::egrul.nalog.ru.Item2.RUL; } }

    public global::egrul.nalog.ru.Item2.VIDREG VIDREG {  get {return rootObject as global::egrul.nalog.ru.Item2.VIDREG; } }

    public global::egrul.nalog.ru.Item2.REGORG REGORG {  get {return rootObject as global::egrul.nalog.ru.Item2.REGORG; } }

    public global::egrul.nalog.ru.Item2.OKSM OKSM {  get {return rootObject as global::egrul.nalog.ru.Item2.OKSM; } }

    public global::egrul.nalog.ru.Item2.IUL IUL {  get {return rootObject as global::egrul.nalog.ru.Item2.IUL; } }

    public global::egrul.nalog.ru.Item2.UCHRFL UCHRFL {  get {return rootObject as global::egrul.nalog.ru.Item2.UCHRFL; } }

    public global::egrul.nalog.ru.Item2.DOLGNFL DOLGNFL {  get {return rootObject as global::egrul.nalog.ru.Item2.DOLGNFL; } }

    public global::egrul.nalog.ru.Item2.PREDSH PREDSH {  get {return rootObject as global::egrul.nalog.ru.Item2.PREDSH; } }

    public global::egrul.nalog.ru.Item2.PREEM PREEM {  get {return rootObject as global::egrul.nalog.ru.Item2.PREEM; } }

    public global::egrul.nalog.ru.Item2.LICENZ LICENZ {  get {return rootObject as global::egrul.nalog.ru.Item2.LICENZ; } }

    public global::egrul.nalog.ru.Item2.LICORG LICORG {  get {return rootObject as global::egrul.nalog.ru.Item2.LICORG; } }

    public global::egrul.nalog.ru.Item2.VIDLIC VIDLIC {  get {return rootObject as global::egrul.nalog.ru.Item2.VIDLIC; } }

    public global::egrul.nalog.ru.Item2.SOSTLIC SOSTLIC {  get {return rootObject as global::egrul.nalog.ru.Item2.SOSTLIC; } }

    public global::egrul.nalog.ru.Item2.REGEGRUL REGEGRUL {  get {return rootObject as global::egrul.nalog.ru.Item2.REGEGRUL; } }

    public global::egrul.nalog.ru.Item2.SOSTZAP SOSTZAP {  get {return rootObject as global::egrul.nalog.ru.Item2.SOSTZAP; } }

    public global::egrul.nalog.ru.Item2.UL_OB UL_OB {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_OB; } }

    public global::egrul.nalog.ru.Item2.UL_UPR UL_UPR {  get {return rootObject as global::egrul.nalog.ru.Item2.UL_UPR; } }

    public global::egrul.nalog.ru.Item2.MNS MNS {  get {return rootObject as global::egrul.nalog.ru.Item2.MNS; } }

    public global::egrul.nalog.ru.Item2.PF PF {  get {return rootObject as global::egrul.nalog.ru.Item2.PF; } }

    public global::egrul.nalog.ru.Item2.FSS FSS {  get {return rootObject as global::egrul.nalog.ru.Item2.FSS; } }

    public global::egrul.nalog.ru.Item2.FOMS FOMS {  get {return rootObject as global::egrul.nalog.ru.Item2.FOMS; } }

    public global::egrul.nalog.ru.Item2.ORGAN_MNS ORGAN_MNS {  get {return rootObject as global::egrul.nalog.ru.Item2.ORGAN_MNS; } }

    public global::egrul.nalog.ru.Item2.ORGAN_PF ORGAN_PF {  get {return rootObject as global::egrul.nalog.ru.Item2.ORGAN_PF; } }

    public global::egrul.nalog.ru.Item2.ORGAN_FSS ORGAN_FSS {  get {return rootObject as global::egrul.nalog.ru.Item2.ORGAN_FSS; } }

    public global::egrul.nalog.ru.Item2.ORGAN_FOMS ORGAN_FOMS {  get {return rootObject as global::egrul.nalog.ru.Item2.ORGAN_FOMS; } }

    public global::egrul.nalog.ru.Item2.ACCOUNT ACCOUNT {  get {return rootObject as global::egrul.nalog.ru.Item2.ACCOUNT; } }

    public global::egrul.nalog.ru.Item2.VID_ACCOUNT VID_ACCOUNT {  get {return rootObject as global::egrul.nalog.ru.Item2.VID_ACCOUNT; } }

    public global::egrul.nalog.ru.Item2.TYPE_ACCOUNT TYPE_ACCOUNT {  get {return rootObject as global::egrul.nalog.ru.Item2.TYPE_ACCOUNT; } }
        
        private XRoot() {
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.EGRUL_UL_DATA root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.HEADER root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.USER root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.OKVED root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.REESTR_AO root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.STATUS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_NAME root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.OPF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.NAMEN root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.NAMEI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.LANG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_ADDRESS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ADDRESS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.REGION root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.RAION root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.GOROD root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.NASPUNKT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.STREET root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VIDADR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.CONTACT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.FL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_CAPITAL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VIDCAP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.DOCFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VIDDOK root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_START root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_FINISH root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UCHR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.RUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VIDREG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.REGORG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.OKSM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.IUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UCHRFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.DOLGNFL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.PREDSH root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.PREEM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.LICENZ root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.LICORG root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VIDLIC root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.SOSTLIC root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.REGEGRUL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.SOSTZAP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_OB root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.UL_UPR root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.MNS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.PF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.FSS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.FOMS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ORGAN_MNS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ORGAN_PF root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ORGAN_FSS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ORGAN_FOMS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.VID_ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::egrul.nalog.ru.Item2.TYPE_ACCOUNT root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
