//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.6387
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace F_0503721of01062014
{
    /// <summary>
    /// <para>
    /// Regular expression: (ReportTableRowkey)
    /// </para>
    /// </summary>
    public partial class tableRow : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator tableRow(XElement xe) { return XTypedServices.ToXTypedElement<tableRow>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static tableRow()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportTableRow-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportTableRowkey)
        /// </para>
        /// </summary>
        public tableRow()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportTableRowkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportTableRowkey ReportTableRowkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportTableRow-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportTableRowkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportTableRow-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("tableRow", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static tableRow Load(string xmlFile)
        {
            return XTypedServices.Load<tableRow>(xmlFile);
        }

        public static tableRow Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<tableRow>(xmlFile);
        }

        public static tableRow Parse(string xml)
        {
            return XTypedServices.Parse<tableRow>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<tableRow>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportTableRow-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportTableRowkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectRolekey)
    /// </para>
    /// </summary>
    public partial class subjectRole : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator subjectRole(XElement xe) { return XTypedServices.ToXTypedElement<subjectRole>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static subjectRole()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public subjectRole()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectRolekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("subjectRole", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static subjectRole Load(string xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Parse(string xml)
        {
            return XTypedServices.Parse<subjectRole>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<subjectRole>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (StatesSchemekey)
    /// </para>
    /// </summary>
    public partial class scheme : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator scheme(XElement xe) { return XTypedServices.ToXTypedElement<scheme>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static scheme()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public scheme()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.StatesSchemekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("scheme", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static scheme Load(string xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Parse(string xml)
        {
            return XTypedServices.Parse<scheme>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<scheme>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.StatesSchemekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503721of01062014S1Row+)
    /// </para>
    /// </summary>
    public partial class rows : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.report.F_0503721of01062014S1Row> F_0503721of01062014S1RowField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator rows(XElement xe) { return XTypedServices.ToXTypedElement<rows>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static rows()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503721of01062014S1Row+)
        /// </para>
        /// </summary>
        public rows()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (F_0503721of01062014S1Row+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.report.F_0503721of01062014S1Row> F_0503721of01062014S1Row
        {
            get
            {
                if ((this.F_0503721of01062014S1RowField == null))
                {
                    this.F_0503721of01062014S1RowField = new XTypedList<ru.krista.consolidation.model.report.F_0503721of01062014S1Row>(this, LinqToXsdTypeManager.Instance, XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report"));
                }
                return this.F_0503721of01062014S1RowField;
            }
            set
            {
                if ((value == null))
                {
                    this.F_0503721of01062014S1RowField = null;
                }
                else
                {
                    if ((this.F_0503721of01062014S1RowField == null))
                    {
                        this.F_0503721of01062014S1RowField = XTypedList<ru.krista.consolidation.model.report.F_0503721of01062014S1Row>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.report.F_0503721of01062014S1Row>(this.F_0503721of01062014S1RowField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("rows", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static rows Load(string xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Parse(string xml)
        {
            return XTypedServices.Parse<rows>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<rows>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503721of01062014S1Row));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKTMOkey)
    /// </para>
    /// </summary>
    public partial class req14 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator req14(XElement xe) { return XTypedServices.ToXTypedElement<req14>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static req14()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKTMO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public req14()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKTMOkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("req14", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req14 Load(string xmlFile)
        {
            return XTypedServices.Load<req14>(xmlFile);
        }

        public static req14 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req14>(xmlFile);
        }

        public static req14 Parse(string xml)
        {
            return XTypedServices.Parse<req14>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req14>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKEIkey)
    /// </para>
    /// </summary>
    public partial class req13 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator req13(XElement xe) { return XTypedServices.ToXTypedElement<req13>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static req13()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKEI-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public req13()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKEIkey ClsOKEIkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKEIkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("req13", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req13 Load(string xmlFile)
        {
            return XTypedServices.Load<req13>(xmlFile);
        }

        public static req13 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req13>(xmlFile);
        }

        public static req13 Parse(string xml)
        {
            return XTypedServices.Parse<req13>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req13>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKEIkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportSubject : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportSubject(XElement xe) { return XTypedServices.ToXTypedElement<reportSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportSubject()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportSubject()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportSubject", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSubject Load(string xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Parse(string xml)
        {
            return XTypedServices.Parse<reportSubject>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSubject>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503721of01062014S1)
    /// </para>
    /// </summary>
    public partial class reportSections : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportSections(XElement xe) { return XTypedServices.ToXTypedElement<reportSections>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportSections()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503721of01062014S1)
        /// </para>
        /// </summary>
        public reportSections()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503721of01062014S1)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503721of01062014S1 F_0503721of01062014S1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503721of01062014S1)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportSections", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSections Load(string xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Parse(string xml)
        {
            return XTypedServices.Parse<reportSections>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSections>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503721of01062014S1));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportPeriodPeriodickey)
    /// </para>
    /// </summary>
    public partial class reportPeriodAbstract : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportPeriodAbstract(XElement xe) { return XTypedServices.ToXTypedElement<reportPeriodAbstract>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportPeriodAbstract()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public reportPeriodAbstract()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportPeriodPeriodickey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportPeriodAbstract", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportPeriodAbstract Load(string xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Parse(string xml)
        {
            return XTypedServices.Parse<reportPeriodAbstract>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportPeriodAbstract>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportLevelkey)
    /// </para>
    /// </summary>
    public partial class reportLevel : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportLevel(XElement xe) { return XTypedServices.ToXTypedElement<reportLevel>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportLevel()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportLevel-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public reportLevel()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportLevelkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportLevel", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportLevel Load(string xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Parse(string xml)
        {
            return XTypedServices.Parse<reportLevel>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportLevel>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportKindkey)
    /// </para>
    /// </summary>
    public partial class reportKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportKind(XElement xe) { return XTypedServices.ToXTypedElement<reportKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportKind-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public reportKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportKindkey ReportKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportKindkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportKind", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportKind Load(string xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Parse(string xml)
        {
            return XTypedServices.Parse<reportKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportFormSectionkey)
    /// </para>
    /// </summary>
    public partial class reportFormSection : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportFormSection(XElement xe) { return XTypedServices.ToXTypedElement<reportFormSection>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportFormSection()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportFormSection-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportFormSectionkey)
        /// </para>
        /// </summary>
        public reportFormSection()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportFormSectionkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportFormSectionkey ReportFormSectionkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportFormSection-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportFormSectionkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportFormSection-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportFormSection", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportFormSection Load(string xmlFile)
        {
            return XTypedServices.Load<reportFormSection>(xmlFile);
        }

        public static reportFormSection Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportFormSection>(xmlFile);
        }

        public static reportFormSection Parse(string xml)
        {
            return XTypedServices.Parse<reportFormSection>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportFormSection>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportFormSection-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportFormSectionkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportFormkey)
    /// </para>
    /// </summary>
    public partial class reportForm : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportForm(XElement xe) { return XTypedServices.ToXTypedElement<reportForm>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportForm()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportForm-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportFormkey)
        /// </para>
        /// </summary>
        public reportForm()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportFormkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportFormkey ReportFormkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportForm-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportFormkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportForm", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportForm Load(string xmlFile)
        {
            return XTypedServices.Load<reportForm>(xmlFile);
        }

        public static reportForm Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportForm>(xmlFile);
        }

        public static reportForm Parse(string xml)
        {
            return XTypedServices.Parse<reportForm>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportForm>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportFormkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportConsumer : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportConsumer(XElement xe) { return XTypedServices.ToXTypedElement<reportConsumer>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static reportConsumer()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportConsumer()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportConsumer", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportConsumer Load(string xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Parse(string xml)
        {
            return XTypedServices.Parse<reportConsumer>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportConsumer>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class person : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator person(XElement xe) { return XTypedServices.ToXTypedElement<person>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static person()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public person()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("person", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static person Load(string xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Parse(string xml)
        {
            return XTypedServices.Parse<person>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<person>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503721of01062014HR)
    /// </para>
    /// </summary>
    public partial class headerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator headerReqHolder(XElement xe) { return XTypedServices.ToXTypedElement<headerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static headerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503721of01062014HR)
        /// </para>
        /// </summary>
        public headerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503721of01062014HR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503721of01062014HR F_0503721of01062014HR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503721of01062014HR)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("headerReqHolder", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static headerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<headerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<headerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503721of01062014HR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503721of01062014FR)
    /// </para>
    /// </summary>
    public partial class footerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator footerReqHolder(XElement xe) { return XTypedServices.ToXTypedElement<footerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static footerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503721of01062014FR)
        /// </para>
        /// </summary>
        public footerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503721of01062014FR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503721of01062014FR F_0503721of01062014FR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503721of01062014FR)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("footerReqHolder", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static footerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<footerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<footerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503721of01062014FR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Statekey)
    /// </para>
    /// </summary>
    public partial class docState : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator docState(XElement xe) { return XTypedServices.ToXTypedElement<docState>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static docState()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("State-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public docState()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.Statekey Statekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.Statekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("docState", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static docState Load(string xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Parse(string xml)
        {
            return XTypedServices.Parse<docState>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<docState>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.Statekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey)
    /// </para>
    /// </summary>
    public partial class collectingPeriod : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator collectingPeriod(XElement xe) { return XTypedServices.ToXTypedElement<collectingPeriod>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static collectingPeriod()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public collectingPeriod()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportCollectingPeriodkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("collectingPeriod", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static collectingPeriod Load(string xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Parse(string xml)
        {
            return XTypedServices.Parse<collectingPeriod>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<collectingPeriod>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator author(XElement xe) { return XTypedServices.ToXTypedElement<author>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static author()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public author()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("author", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static author Load(string xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Parse(string xml)
        {
            return XTypedServices.Parse<author>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<author>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ATOkey)
    /// </para>
    /// </summary>
    public partial class ato : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ato(XElement xe) { return XTypedServices.ToXTypedElement<ato>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static ato()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ATO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ato()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ATOkey ATOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ATO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ATOkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ATO-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ato", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ato Load(string xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Parse(string xml)
        {
            return XTypedServices.Parse<ato>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ato>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503721of01062014)
    /// </para>
    /// </summary>
    public partial class Objects : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Objects(XElement xe) { return XTypedServices.ToXTypedElement<Objects>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Objects()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503721of01062014)
        /// </para>
        /// </summary>
        public Objects()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503721of01062014)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503721of01062014 F_0503721of01062014
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503721of01062014)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Objects", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Objects Load(string xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Parse(string xml)
        {
            return XTypedServices.Parse<Objects>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Objects>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503721of01062014));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("tableRow", ""), typeof(/*global::*/tableRow));
            elementDictionary.Add(XName.Get("subjectRole", ""), typeof(/*global::*/subjectRole));
            elementDictionary.Add(XName.Get("scheme", ""), typeof(/*global::*/scheme));
            elementDictionary.Add(XName.Get("rows", ""), typeof(/*global::*/rows));
            elementDictionary.Add(XName.Get("req14", ""), typeof(/*global::*/req14));
            elementDictionary.Add(XName.Get("req13", ""), typeof(/*global::*/req13));
            elementDictionary.Add(XName.Get("reportSubject", ""), typeof(/*global::*/reportSubject));
            elementDictionary.Add(XName.Get("reportSections", ""), typeof(/*global::*/reportSections));
            elementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(/*global::*/reportPeriodAbstract));
            elementDictionary.Add(XName.Get("reportLevel", ""), typeof(/*global::*/reportLevel));
            elementDictionary.Add(XName.Get("reportKind", ""), typeof(/*global::*/reportKind));
            elementDictionary.Add(XName.Get("reportFormSection", ""), typeof(/*global::*/reportFormSection));
            elementDictionary.Add(XName.Get("reportForm", ""), typeof(/*global::*/reportForm));
            elementDictionary.Add(XName.Get("reportConsumer", ""), typeof(/*global::*/reportConsumer));
            elementDictionary.Add(XName.Get("person", ""), typeof(/*global::*/person));
            elementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(/*global::*/headerReqHolder));
            elementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(/*global::*/footerReqHolder));
            elementDictionary.Add(XName.Get("docState", ""), typeof(/*global::*/docState));
            elementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(/*global::*/collectingPeriod));
            elementDictionary.Add(XName.Get("author", ""), typeof(/*global::*/author));
            elementDictionary.Add(XName.Get("ato", ""), typeof(/*global::*/ato));
            elementDictionary.Add(XName.Get("Objects", ""), typeof(/*global::*/Objects));
            elementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(/*global::*/ru.krista.core.docstate.model.meta.StatesSchemekey));
            elementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(/*global::*/ru.krista.core.docstate.model.meta.Statekey));
            elementDictionary.Add(XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report"), typeof(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1Row));
            elementDictionary.Add(XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report"), typeof(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1));
            elementDictionary.Add(XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report"), typeof(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014HR));
            elementDictionary.Add(XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report"), typeof(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014FR));
            elementDictionary.Add(XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report"), typeof(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014));
            elementDictionary.Add(XName.Get("ReportTableRow-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportTableRowkey));
            elementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportSubjectRolekey));
            elementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportSubjectkey));
            elementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey));
            elementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportLevelkey));
            elementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportKindkey));
            elementDictionary.Add(XName.Get("ReportFormSection-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportFormSectionkey));
            elementDictionary.Add(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportFormkey));
            elementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey));
            elementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.Officekey));
            elementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ClsOKTMOkey));
            elementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ClsOKEIkey));
            elementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(/*global::*/ru.krista.budget.model.ATOkey));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("tableRow", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public tableRow tableRow { get { return rootObject as tableRow; } }

        public subjectRole subjectRole { get { return rootObject as subjectRole; } }

        public scheme scheme { get { return rootObject as scheme; } }

        public rows rows { get { return rootObject as rows; } }

        public req14 req14 { get { return rootObject as req14; } }

        public req13 req13 { get { return rootObject as req13; } }

        public reportSubject reportSubject { get { return rootObject as reportSubject; } }

        public reportSections reportSections { get { return rootObject as reportSections; } }

        public reportPeriodAbstract reportPeriodAbstract { get { return rootObject as reportPeriodAbstract; } }

        public reportLevel reportLevel { get { return rootObject as reportLevel; } }

        public reportKind reportKind { get { return rootObject as reportKind; } }

        public reportFormSection reportFormSection { get { return rootObject as reportFormSection; } }

        public reportForm reportForm { get { return rootObject as reportForm; } }

        public reportConsumer reportConsumer { get { return rootObject as reportConsumer; } }

        public person person { get { return rootObject as person; } }

        public headerReqHolder headerReqHolder { get { return rootObject as headerReqHolder; } }

        public footerReqHolder footerReqHolder { get { return rootObject as footerReqHolder; } }

        public docState docState { get { return rootObject as docState; } }

        public collectingPeriod collectingPeriod { get { return rootObject as collectingPeriod; } }

        public author author { get { return rootObject as author; } }

        public ato ato { get { return rootObject as ato; } }

        public Objects Objects { get { return rootObject as Objects; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(tableRow root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req14 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req13 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportFormSection root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportForm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public tableRow tableRow { get { return rootObject as tableRow; } }

        public subjectRole subjectRole { get { return rootObject as subjectRole; } }

        public scheme scheme { get { return rootObject as scheme; } }

        public rows rows { get { return rootObject as rows; } }

        public req14 req14 { get { return rootObject as req14; } }

        public req13 req13 { get { return rootObject as req13; } }

        public reportSubject reportSubject { get { return rootObject as reportSubject; } }

        public reportSections reportSections { get { return rootObject as reportSections; } }

        public reportPeriodAbstract reportPeriodAbstract { get { return rootObject as reportPeriodAbstract; } }

        public reportLevel reportLevel { get { return rootObject as reportLevel; } }

        public reportKind reportKind { get { return rootObject as reportKind; } }

        public reportFormSection reportFormSection { get { return rootObject as reportFormSection; } }

        public reportForm reportForm { get { return rootObject as reportForm; } }

        public reportConsumer reportConsumer { get { return rootObject as reportConsumer; } }

        public person person { get { return rootObject as person; } }

        public headerReqHolder headerReqHolder { get { return rootObject as headerReqHolder; } }

        public footerReqHolder footerReqHolder { get { return rootObject as footerReqHolder; } }

        public docState docState { get { return rootObject as docState; } }

        public collectingPeriod collectingPeriod { get { return rootObject as collectingPeriod; } }

        public author author { get { return rootObject as author; } }

        public ato ato { get { return rootObject as ato; } }

        public Objects Objects { get { return rootObject as Objects; } }

        public /*global::*/ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey { get { return rootObject as /*global::*/ru.krista.core.docstate.model.meta.StatesSchemekey; } }

        public /*global::*/ru.krista.core.docstate.model.meta.Statekey Statekey { get { return rootObject as /*global::*/ru.krista.core.docstate.model.meta.Statekey; } }

        public /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1Row F_0503721of01062014S1Row { get { return rootObject as /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1Row; } }

        public /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1 F_0503721of01062014S1 { get { return rootObject as /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1; } }

        public /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014HR F_0503721of01062014HR { get { return rootObject as /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014HR; } }

        public /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014FR F_0503721of01062014FR { get { return rootObject as /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014FR; } }

        public /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014 F_0503721of01062014 { get { return rootObject as /*global::*/ru.krista.consolidation.model.report.F_0503721of01062014; } }

        public /*global::*/ru.krista.consolidation.model.ReportTableRowkey ReportTableRowkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportTableRowkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportSubjectRolekey; } }

        public /*global::*/ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportSubjectkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey; } }

        public /*global::*/ru.krista.consolidation.model.ReportLevelkey ReportLevelkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportLevelkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportKindkey ReportKindkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportKindkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportFormSectionkey ReportFormSectionkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportFormSectionkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportFormkey ReportFormkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportFormkey; } }

        public /*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey { get { return rootObject as /*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey; } }

        public /*global::*/ru.krista.budget.model.Officekey Officekey { get { return rootObject as /*global::*/ru.krista.budget.model.Officekey; } }

        public /*global::*/ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey { get { return rootObject as /*global::*/ru.krista.budget.model.ClsOKTMOkey; } }

        public /*global::*/ru.krista.budget.model.ClsOKEIkey ClsOKEIkey { get { return rootObject as /*global::*/ru.krista.budget.model.ClsOKEIkey; } }

        public /*global::*/ru.krista.budget.model.ATOkey ATOkey { get { return rootObject as /*global::*/ru.krista.budget.model.ATOkey; } }

        private XRoot()
        {
        }

        public XRoot(tableRow root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req14 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req13 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportFormSection root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportForm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.core.docstate.model.meta.StatesSchemekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.core.docstate.model.meta.Statekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1Row root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014S1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014HR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014FR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.report.F_0503721of01062014 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportTableRowkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportSubjectRolekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportSubjectkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportPeriodPeriodickey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportLevelkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportFormSectionkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportFormkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.consolidation.model.ReportCollectingPeriodkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.Officekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ClsOKTMOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ClsOKEIkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(/*global::*/ru.krista.budget.model.ATOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
    namespace ru.krista.core.docstate.model.meta
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class StatesSchemekey : XTypedElement, IXMetaData
        {

            public static explicit operator StatesSchemekey(XElement xe) { return XTypedServices.ToXTypedElement<StatesSchemekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public StatesSchemekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static StatesSchemekey Load(string xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Parse(string xml)
            {
                return XTypedServices.Parse<StatesSchemekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<StatesSchemekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (scheme)
        /// </para>
        /// </summary>
        public partial class Statekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Statekey(XElement xe) { return XTypedServices.ToXTypedElement<Statekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static Statekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("scheme", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public Statekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public scheme scheme
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("scheme", ""));
                    return ((scheme)(x));
                }
                set
                {
                    this.SetElement(XName.Get("scheme", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("State-key", "ru.krista.core.docstate.model.meta");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Statekey Load(string xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Parse(string xml)
            {
                return XTypedServices.Parse<Statekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Statekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("scheme", ""), typeof(scheme));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public StatesSchemekey StatesSchemekey { get { return rootObject as StatesSchemekey; } }

            public Statekey Statekey { get { return rootObject as Statekey; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(StatesSchemekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Statekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
    namespace ru.krista.consolidation.model.report
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        /// <summary>
        /// <para>
        /// Regular expression: (tableRow)
        /// </para>
        /// </summary>
        public partial class F_0503721of01062014S1Row : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503721of01062014S1Row(XElement xe) { return XTypedServices.ToXTypedElement<F_0503721of01062014S1Row>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static F_0503721of01062014S1Row()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("tableRow", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (tableRow)
            /// </para>
            /// </summary>
            public F_0503721of01062014S1Row()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (tableRow)
            /// </para>
            /// </summary>
            public tableRow tableRow
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("tableRow", ""));
                    return ((tableRow)(x));
                }
                set
                {
                    this.SetElement(XName.Get("tableRow", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col6", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col5
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col5", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col4
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col4", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col3", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col0
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col0", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503721of01062014S1Row", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503721of01062014S1Row Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014S1Row>(xmlFile);
            }

            public static F_0503721of01062014S1Row Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014S1Row>(xmlFile);
            }

            public static F_0503721of01062014S1Row Parse(string xml)
            {
                return XTypedServices.Parse<F_0503721of01062014S1Row>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503721of01062014S1Row>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("tableRow", ""), typeof(tableRow));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportFormSection, rows)
        /// </para>
        /// </summary>
        public partial class F_0503721of01062014S1 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503721of01062014S1(XElement xe) { return XTypedServices.ToXTypedElement<F_0503721of01062014S1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static F_0503721of01062014S1()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportFormSection", "")), new NamedContentModelEntity(XName.Get("rows", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (reportFormSection, rows)
            /// </para>
            /// </summary>
            public F_0503721of01062014S1()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportFormSection, rows)
            /// </para>
            /// </summary>
            public reportFormSection reportFormSection
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportFormSection", ""));
                    return ((reportFormSection)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportFormSection", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportFormSection, rows)
            /// </para>
            /// </summary>
            public rows rows
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("rows", ""));
                    return ((rows)(x));
                }
                set
                {
                    this.SetElement(XName.Get("rows", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503721of01062014S1", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503721of01062014S1 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014S1>(xmlFile);
            }

            public static F_0503721of01062014S1 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014S1>(xmlFile);
            }

            public static F_0503721of01062014S1 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503721of01062014S1>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503721of01062014S1>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reportFormSection", ""), typeof(reportFormSection));
                localElementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (req13, req14)
        /// </para>
        /// </summary>
        public partial class F_0503721of01062014HR : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503721of01062014HR(XElement xe) { return XTypedServices.ToXTypedElement<F_0503721of01062014HR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static F_0503721of01062014HR()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("req13", "")), new NamedContentModelEntity(XName.Get("req14", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (req13, req14)
            /// </para>
            /// </summary>
            public F_0503721of01062014HR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req13, req14)
            /// </para>
            /// </summary>
            public req13 req13
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req13", ""));
                    return ((req13)(x));
                }
                set
                {
                    this.SetElement(XName.Get("req13", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req13, req14)
            /// </para>
            /// </summary>
            public req14 req14
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req14", ""));
                    return ((req14)(x));
                }
                set
                {
                    this.SetElement(XName.Get("req14", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req9
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req9", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req9", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req6", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req4
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req4", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req3", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req15
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req15", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req15", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req12
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req12", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req12", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503721of01062014HR", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503721of01062014HR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014HR>(xmlFile);
            }

            public static F_0503721of01062014HR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014HR>(xmlFile);
            }

            public static F_0503721of01062014HR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503721of01062014HR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503721of01062014HR>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("req13", ""), typeof(req13));
                localElementDictionary.Add(XName.Get("req14", ""), typeof(req14));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class F_0503721of01062014FR : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503721of01062014FR(XElement xe) { return XTypedServices.ToXTypedElement<F_0503721of01062014FR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public F_0503721of01062014FR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503721of01062014FR", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503721of01062014FR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014FR>(xmlFile);
            }

            public static F_0503721of01062014FR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014FR>(xmlFile);
            }

            public static F_0503721of01062014FR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503721of01062014FR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503721of01062014FR>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
        /// </para>
        /// </summary>
        public partial class F_0503721of01062014 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503721of01062014(XElement xe) { return XTypedServices.ToXTypedElement<F_0503721of01062014>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static F_0503721of01062014()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("collectingPeriod", "")), new NamedContentModelEntity(XName.Get("docState", "")), new NamedContentModelEntity(XName.Get("reportConsumer", "")), new NamedContentModelEntity(XName.Get("reportForm", "")), new NamedContentModelEntity(XName.Get("reportSubject", "")), new NamedContentModelEntity(XName.Get("footerReqHolder", "")), new NamedContentModelEntity(XName.Get("headerReqHolder", "")), new NamedContentModelEntity(XName.Get("reportSections", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public F_0503721of01062014()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public collectingPeriod collectingPeriod
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("collectingPeriod", ""));
                    return ((collectingPeriod)(x));
                }
                set
                {
                    this.SetElement(XName.Get("collectingPeriod", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public docState docState
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("docState", ""));
                    return ((docState)(x));
                }
                set
                {
                    this.SetElement(XName.Get("docState", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportConsumer reportConsumer
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportConsumer", ""));
                    return ((reportConsumer)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportConsumer", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportForm reportForm
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportForm", ""));
                    return ((reportForm)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportForm", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSubject reportSubject
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSubject", ""));
                    return ((reportSubject)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportSubject", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public footerReqHolder footerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("footerReqHolder", ""));
                    return ((footerReqHolder)(x));
                }
                set
                {
                    this.SetElement(XName.Get("footerReqHolder", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public headerReqHolder headerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("headerReqHolder", ""));
                    return ((headerReqHolder)(x));
                }
                set
                {
                    this.SetElement(XName.Get("headerReqHolder", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSections reportSections
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSections", ""));
                    return ((reportSections)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportSections", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string updateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("updateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("updateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string stateUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("stateUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("stateUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string formUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("formUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("formUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string endDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("endDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("endDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryYear
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryYear", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string caption
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("caption", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string beginDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("beginDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("beginDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string attachments
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("attachments", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("attachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503721of01062014", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503721of01062014 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014>(xmlFile);
            }

            public static F_0503721of01062014 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503721of01062014>(xmlFile);
            }

            public static F_0503721of01062014 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503721of01062014>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503721of01062014>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(collectingPeriod));
                localElementDictionary.Add(XName.Get("docState", ""), typeof(docState));
                localElementDictionary.Add(XName.Get("reportConsumer", ""), typeof(reportConsumer));
                localElementDictionary.Add(XName.Get("reportForm", ""), typeof(reportForm));
                localElementDictionary.Add(XName.Get("reportSubject", ""), typeof(reportSubject));
                localElementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(footerReqHolder));
                localElementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(headerReqHolder));
                localElementDictionary.Add(XName.Get("reportSections", ""), typeof(reportSections));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public F_0503721of01062014S1Row F_0503721of01062014S1Row { get { return rootObject as F_0503721of01062014S1Row; } }

            public F_0503721of01062014S1 F_0503721of01062014S1 { get { return rootObject as F_0503721of01062014S1; } }

            public F_0503721of01062014HR F_0503721of01062014HR { get { return rootObject as F_0503721of01062014HR; } }

            public F_0503721of01062014FR F_0503721of01062014FR { get { return rootObject as F_0503721of01062014FR; } }

            public F_0503721of01062014 F_0503721of01062014 { get { return rootObject as F_0503721of01062014; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(F_0503721of01062014S1Row root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503721of01062014S1 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503721of01062014HR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503721of01062014FR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503721of01062014 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
    namespace ru.krista.consolidation.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class ReportTableRowkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportTableRowkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportTableRowkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportTableRowkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportTableRow-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportTableRowkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportTableRowkey>(xmlFile);
            }

            public static ReportTableRowkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportTableRowkey>(xmlFile);
            }

            public static ReportTableRowkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportTableRowkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportTableRowkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportSubjectRolekey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportSubjectRolekey(XElement xe) { return XTypedServices.ToXTypedElement<ReportSubjectRolekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportSubjectRolekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectRolekey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectRolekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectRolekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (person, reportLevel, subjectRole)
        /// </para>
        /// </summary>
        public partial class ReportSubjectkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportSubjectkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportSubjectkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ReportSubjectkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("person", "")), new NamedContentModelEntity(XName.Get("reportLevel", "")), new NamedContentModelEntity(XName.Get("subjectRole", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public ReportSubjectkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set
                {
                    this.SetElement(XName.Get("person", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public reportLevel reportLevel
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportLevel", ""));
                    return ((reportLevel)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportLevel", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public subjectRole subjectRole
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("subjectRole", ""));
                    return ((subjectRole)(x));
                }
                set
                {
                    this.SetElement(XName.Get("subjectRole", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubject-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
                localElementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportKind)
        /// </para>
        /// </summary>
        public partial class ReportPeriodPeriodickey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportPeriodPeriodickey(XElement xe) { return XTypedServices.ToXTypedElement<ReportPeriodPeriodickey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ReportPeriodPeriodickey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportKind", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public ReportPeriodPeriodickey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public reportKind reportKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportKind", ""));
                    return ((reportKind)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportKind", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportPeriodPeriodickey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Parse(string xml)
            {
                return XTypedServices.Parse<ReportPeriodPeriodickey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportPeriodPeriodickey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reportKind", ""), typeof(reportKind));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ReportLevelkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportLevelkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportLevelkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportLevelkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportLevel-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportLevelkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportLevelkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportLevelkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportKindkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportKind-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportFormSectionkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportFormSectionkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportFormSectionkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportFormSectionkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportFormSection-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportFormSectionkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportFormSectionkey>(xmlFile);
            }

            public static ReportFormSectionkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportFormSectionkey>(xmlFile);
            }

            public static ReportFormSectionkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportFormSectionkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportFormSectionkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportFormkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportFormkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportFormkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ReportFormkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportForm-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportFormkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportFormkey>(xmlFile);
            }

            public static ReportFormkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportFormkey>(xmlFile);
            }

            public static ReportFormkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportFormkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportFormkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (author, reportPeriodAbstract)
        /// </para>
        /// </summary>
        public partial class ReportCollectingPeriodkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportCollectingPeriodkey(XElement xe) { return XTypedServices.ToXTypedElement<ReportCollectingPeriodkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ReportCollectingPeriodkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("author", "")), new NamedContentModelEntity(XName.Get("reportPeriodAbstract", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public ReportCollectingPeriodkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public author author
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("author", ""));
                    return ((author)(x));
                }
                set
                {
                    this.SetElement(XName.Get("author", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public reportPeriodAbstract reportPeriodAbstract
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportPeriodAbstract", ""));
                    return ((reportPeriodAbstract)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportPeriodAbstract", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportCollectingPeriodkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportCollectingPeriodkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportCollectingPeriodkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("author", ""), typeof(author));
                localElementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public ReportTableRowkey ReportTableRowkey { get { return rootObject as ReportTableRowkey; } }

            public ReportSubjectRolekey ReportSubjectRolekey { get { return rootObject as ReportSubjectRolekey; } }

            public ReportSubjectkey ReportSubjectkey { get { return rootObject as ReportSubjectkey; } }

            public ReportPeriodPeriodickey ReportPeriodPeriodickey { get { return rootObject as ReportPeriodPeriodickey; } }

            public ReportLevelkey ReportLevelkey { get { return rootObject as ReportLevelkey; } }

            public ReportKindkey ReportKindkey { get { return rootObject as ReportKindkey; } }

            public ReportFormSectionkey ReportFormSectionkey { get { return rootObject as ReportFormSectionkey; } }

            public ReportFormkey ReportFormkey { get { return rootObject as ReportFormkey; } }

            public ReportCollectingPeriodkey ReportCollectingPeriodkey { get { return rootObject as ReportCollectingPeriodkey; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(ReportTableRowkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubjectRolekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubjectkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportPeriodPeriodickey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportLevelkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportFormSectionkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportFormkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportCollectingPeriodkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
    namespace ru.krista.budget.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        /// <summary>
        /// <para>
        /// Regular expression: (ato)
        /// </para>
        /// </summary>
        public partial class Officekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Officekey(XElement xe) { return XTypedServices.ToXTypedElement<Officekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static Officekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ato", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public Officekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ato", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Office-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Officekey Load(string xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Parse(string xml)
            {
                return XTypedServices.Parse<Officekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Officekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ClsOKTMOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKTMOkey(XElement xe) { return XTypedServices.ToXTypedElement<ClsOKTMOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ClsOKTMOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsOKTMO-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKTMOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKTMOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKTMOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKEIkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKEIkey(XElement xe) { return XTypedServices.ToXTypedElement<ClsOKEIkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ClsOKEIkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsOKEI-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKEIkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKEIkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKEIkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ATOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ATOkey(XElement xe) { return XTypedServices.ToXTypedElement<ATOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public ATOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ATO-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ATOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Parse(string xml)
            {
                return XTypedServices.Parse<ATOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ATOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public Officekey Officekey { get { return rootObject as Officekey; } }

            public ClsOKTMOkey ClsOKTMOkey { get { return rootObject as ClsOKTMOkey; } }

            public ClsOKEIkey ClsOKEIkey { get { return rootObject as ClsOKEIkey; } }

            public ATOkey ATOkey { get { return rootObject as ATOkey; } }

            private XRootNamespace()
            {
            }

            public XRootNamespace(Officekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKTMOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKEIkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ATOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

}