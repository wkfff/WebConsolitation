//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8745
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace F_0503730of20161201
{

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectRolekey)
    /// </para>
    /// </summary>
    public partial class subjectRole : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator subjectRole(XElement xe)
        {
            return XTypedServices.ToXTypedElement<subjectRole>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static subjectRole()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public subjectRole()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectRolekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("subjectRole", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static subjectRole Load(string xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Parse(string xml)
        {
            return XTypedServices.Parse<subjectRole>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<subjectRole>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (StatesSchemekey)
    /// </para>
    /// </summary>
    public partial class scheme : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator scheme(XElement xe)
        {
            return XTypedServices.ToXTypedElement<scheme>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static scheme()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public scheme()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.StatesSchemekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("scheme", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static scheme Load(string xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Parse(string xml)
        {
            return XTypedServices.Parse<scheme>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<scheme>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.StatesSchemekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503730of20161201S1Row+ | F_0503730of20161201S2Row+)
    /// </para>
    /// </summary>
    public partial class rows : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row> F_0503730of20161201S1RowField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row> F_0503730of20161201S2RowField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator rows(XElement xe)
        {
            return XTypedServices.ToXTypedElement<rows>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static rows()
        {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(
                new NamedContentModelEntity(XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report")),
                new NamedContentModelEntity(XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1Row+ | F_0503730of20161201S2Row+)
        /// </para>
        /// </summary>
        public rows()
        {
        }

        public rows(IEnumerable<ru.krista.consolidation.model.report.F_0503730of20161201S1Row> F_0503730of20161201S1Row)
        {
            this.F_0503730of20161201S1RowField = XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row>.Initialize(
                this,
                LinqToXsdTypeManager.Instance,
                F_0503730of20161201S1Row,
                XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report"));
        }

        public rows(IEnumerable<ru.krista.consolidation.model.report.F_0503730of20161201S2Row> F_0503730of20161201S2Row)
        {
            this.F_0503730of20161201S2RowField = XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row>.Initialize(
                this,
                LinqToXsdTypeManager.Instance,
                F_0503730of20161201S2Row,
                XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report"));
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1Row+ | F_0503730of20161201S2Row+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row> F_0503730of20161201S1Row
        {
            get
            {
                if ((this.F_0503730of20161201S1RowField == null))
                {
                    this.F_0503730of20161201S1RowField = new XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row>(
                        this,
                        LinqToXsdTypeManager.Instance,
                        XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report"));
                }
                return this.F_0503730of20161201S1RowField;
            }
            set
            {
                if ((value == null))
                {
                    this.F_0503730of20161201S1RowField = null;
                }
                else
                {
                    if ((this.F_0503730of20161201S1RowField == null))
                    {
                        this.F_0503730of20161201S1RowField = XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row>.Initialize(
                            this,
                            LinqToXsdTypeManager.Instance,
                            value,
                            XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.report.F_0503730of20161201S1Row>(this.F_0503730of20161201S1RowField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1Row+ | F_0503730of20161201S2Row+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row> F_0503730of20161201S2Row
        {
            get
            {
                if ((this.F_0503730of20161201S2RowField == null))
                {
                    this.F_0503730of20161201S2RowField = new XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row>(
                        this,
                        LinqToXsdTypeManager.Instance,
                        XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report"));
                }
                return this.F_0503730of20161201S2RowField;
            }
            set
            {
                if ((value == null))
                {
                    this.F_0503730of20161201S2RowField = null;
                }
                else
                {
                    if ((this.F_0503730of20161201S2RowField == null))
                    {
                        this.F_0503730of20161201S2RowField = XTypedList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row>.Initialize(
                            this,
                            LinqToXsdTypeManager.Instance,
                            value,
                            XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.report.F_0503730of20161201S2Row>(this.F_0503730of20161201S2RowField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("rows", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static rows Load(string xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Parse(string xml)
        {
            return XTypedServices.Parse<rows>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<rows>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S1Row));
            localElementDictionary.Add(XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S2Row));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class responsibleConsumer : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator responsibleConsumer(XElement xe)
        {
            return XTypedServices.ToXTypedElement<responsibleConsumer>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static responsibleConsumer()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public responsibleConsumer()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("responsibleConsumer", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static responsibleConsumer Load(string xmlFile)
        {
            return XTypedServices.Load<responsibleConsumer>(xmlFile);
        }

        public static responsibleConsumer Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<responsibleConsumer>(xmlFile);
        }

        public static responsibleConsumer Parse(string xml)
        {
            return XTypedServices.Parse<responsibleConsumer>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<responsibleConsumer>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKTMOkey)
    /// </para>
    /// </summary>
    public partial class req13 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator req13(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req13>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req13()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKTMO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public req13()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKTMOkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("req13", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req13 Load(string xmlFile)
        {
            return XTypedServices.Load<req13>(xmlFile);
        }

        public static req13 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req13>(xmlFile);
        }

        public static req13 Parse(string xml)
        {
            return XTypedServices.Parse<req13>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req13>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKEIkey)
    /// </para>
    /// </summary>
    public partial class req12 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator req12(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req12>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req12()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKEI-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public req12()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKEIkey ClsOKEIkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKEIkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("req12", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req12 Load(string xmlFile)
        {
            return XTypedServices.Load<req12>(xmlFile);
        }

        public static req12 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req12>(xmlFile);
        }

        public static req12 Parse(string xml)
        {
            return XTypedServices.Parse<req12>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req12>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKEIkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsGRBSkey)
    /// </para>
    /// </summary>
    public partial class req10 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator req10(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req10>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req10()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsGRBS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public req10()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsGRBSkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("req10", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req10 Load(string xmlFile)
        {
            return XTypedServices.Load<req10>(xmlFile);
        }

        public static req10 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req10>(xmlFile);
        }

        public static req10 Parse(string xml)
        {
            return XTypedServices.Parse<req10>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req10>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class reportSubjectOffice : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportSubjectOffice(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSubjectOffice>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSubjectOffice()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public reportSubjectOffice()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportSubjectOffice", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSubjectOffice Load(string xmlFile)
        {
            return XTypedServices.Load<reportSubjectOffice>(xmlFile);
        }

        public static reportSubjectOffice Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSubjectOffice>(xmlFile);
        }

        public static reportSubjectOffice Parse(string xml)
        {
            return XTypedServices.Parse<reportSubjectOffice>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSubjectOffice>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportSubject : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportSubject(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSubject()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportSubject()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportSubject", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSubject Load(string xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Parse(string xml)
        {
            return XTypedServices.Parse<reportSubject>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSubject>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503730of20161201S1, F_0503730of20161201S2)
    /// </para>
    /// </summary>
    public partial class reportSections : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportSections(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSections>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSections()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report")),
                new NamedContentModelEntity(XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1, F_0503730of20161201S2)
        /// </para>
        /// </summary>
        public reportSections()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1, F_0503730of20161201S2)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503730of20161201S1 F_0503730of20161201S1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503730of20161201S1)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report"), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201S1, F_0503730of20161201S2)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503730of20161201S2 F_0503730of20161201S2
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503730of20161201S2)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportSections", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSections Load(string xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Parse(string xml)
        {
            return XTypedServices.Parse<reportSections>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSections>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S1));
            localElementDictionary.Add(XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S2));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportPeriodPeriodickey)
    /// </para>
    /// </summary>
    public partial class reportPeriodAbstract : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportPeriodAbstract(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportPeriodAbstract>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportPeriodAbstract()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public reportPeriodAbstract()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportPeriodPeriodickey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportPeriodAbstract", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportPeriodAbstract Load(string xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Parse(string xml)
        {
            return XTypedServices.Parse<reportPeriodAbstract>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportPeriodAbstract>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportLevelkey)
    /// </para>
    /// </summary>
    public partial class reportLevel : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportLevel(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportLevel>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportLevel()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportLevel-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public reportLevel()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportLevelkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportLevel", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportLevel Load(string xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Parse(string xml)
        {
            return XTypedServices.Parse<reportLevel>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportLevel>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportKindkey)
    /// </para>
    /// </summary>
    public partial class reportKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportKind(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportKind-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public reportKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportKindkey ReportKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportKindkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportKind", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportKind Load(string xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Parse(string xml)
        {
            return XTypedServices.Parse<reportKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportFormkey)
    /// </para>
    /// </summary>
    public partial class reportForm : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportForm(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportForm>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportForm()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportForm-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportFormkey)
        /// </para>
        /// </summary>
        public reportForm()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportFormkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportFormkey ReportFormkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportForm-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportFormkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportForm", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportForm Load(string xmlFile)
        {
            return XTypedServices.Load<reportForm>(xmlFile);
        }

        public static reportForm Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportForm>(xmlFile);
        }

        public static reportForm Parse(string xml)
        {
            return XTypedServices.Parse<reportForm>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportForm>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportFormkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportConsumer : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator reportConsumer(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportConsumer>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportConsumer()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportConsumer()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("reportConsumer", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportConsumer Load(string xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Parse(string xml)
        {
            return XTypedServices.Parse<reportConsumer>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportConsumer>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Personagekey)
    /// </para>
    /// </summary>
    public partial class personage : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator personage(XElement xe)
        {
            return XTypedServices.ToXTypedElement<personage>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static personage()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Personage-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Personagekey)
        /// </para>
        /// </summary>
        public personage()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Personagekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Personagekey Personagekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Personage-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Personagekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Personage-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("personage", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static personage Load(string xmlFile)
        {
            return XTypedServices.Load<personage>(xmlFile);
        }

        public static personage Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<personage>(xmlFile);
        }

        public static personage Parse(string xml)
        {
            return XTypedServices.Parse<personage>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<personage>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Personage-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Personagekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class person : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator person(XElement xe)
        {
            return XTypedServices.ToXTypedElement<person>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static person()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public person()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("person", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static person Load(string xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Parse(string xml)
        {
            return XTypedServices.Parse<person>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<person>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503730of20161201HR)
    /// </para>
    /// </summary>
    public partial class headerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator headerReqHolder(XElement xe)
        {
            return XTypedServices.ToXTypedElement<headerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static headerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503730of20161201HR)
        /// </para>
        /// </summary>
        public headerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201HR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503730of20161201HR F_0503730of20161201HR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503730of20161201HR)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("headerReqHolder", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static headerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<headerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<headerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201HR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503730of20161201FR)
    /// </para>
    /// </summary>
    public partial class footerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator footerReqHolder(XElement xe)
        {
            return XTypedServices.ToXTypedElement<footerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static footerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503730of20161201FR)
        /// </para>
        /// </summary>
        public footerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201FR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503730of20161201FR F_0503730of20161201FR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503730of20161201FR)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("footerReqHolder", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static footerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<footerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<footerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201FR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (EmployeeKindkey)
    /// </para>
    /// </summary>
    public partial class employeeKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator employeeKind(XElement xe)
        {
            return XTypedServices.ToXTypedElement<employeeKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static employeeKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EmployeeKind-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (EmployeeKindkey)
        /// </para>
        /// </summary>
        public employeeKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EmployeeKindkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.EmployeeKindkey EmployeeKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("EmployeeKind-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.EmployeeKindkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("employeeKind", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static employeeKind Load(string xmlFile)
        {
            return XTypedServices.Load<employeeKind>(xmlFile);
        }

        public static employeeKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<employeeKind>(xmlFile);
        }

        public static employeeKind Parse(string xml)
        {
            return XTypedServices.Parse<employeeKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<employeeKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.EmployeeKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Statekey)
    /// </para>
    /// </summary>
    public partial class docState : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator docState(XElement xe)
        {
            return XTypedServices.ToXTypedElement<docState>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static docState()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("State-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public docState()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.Statekey Statekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.Statekey)(x));
            }
            set
            {
                this.SetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("docState", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static docState Load(string xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Parse(string xml)
        {
            return XTypedServices.Parse<docState>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<docState>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.Statekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey)
    /// </para>
    /// </summary>
    public partial class collectingPeriod : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator collectingPeriod(XElement xe)
        {
            return XTypedServices.ToXTypedElement<collectingPeriod>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static collectingPeriod()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public collectingPeriod()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportCollectingPeriodkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("collectingPeriod", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static collectingPeriod Load(string xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Parse(string xml)
        {
            return XTypedServices.Parse<collectingPeriod>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<collectingPeriod>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator author(XElement xe)
        {
            return XTypedServices.ToXTypedElement<author>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static author()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public author()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("author", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static author Load(string xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Parse(string xml)
        {
            return XTypedServices.Parse<author>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<author>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ATOkey)
    /// </para>
    /// </summary>
    public partial class ato : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ato(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ato>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ato()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ATO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ato()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ATOkey ATOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ATO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ATOkey)(x));
            }
            set
            {
                this.SetElement(XName.Get("ATO-key", "ru.krista.budget.model"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("ato", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ato Load(string xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Parse(string xml)
        {
            return XTypedServices.Parse<ato>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ato>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503730of20161201)
    /// </para>
    /// </summary>
    public partial class Objects : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Objects(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Objects>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Objects()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503730of20161201)
        /// </para>
        /// </summary>
        public Objects()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503730of20161201)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503730of20161201 F_0503730of20161201
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503730of20161201)(x));
            }
            set
            {
                this.SetElement(XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report"), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Objects", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Objects Load(string xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Parse(string xml)
        {
            return XTypedServices.Parse<Objects>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Objects>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            elementDictionary.Add(XName.Get("scheme", ""), typeof(scheme));
            elementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            elementDictionary.Add(XName.Get("responsibleConsumer", ""), typeof(responsibleConsumer));
            elementDictionary.Add(XName.Get("req13", ""), typeof(req13));
            elementDictionary.Add(XName.Get("req12", ""), typeof(req12));
            elementDictionary.Add(XName.Get("req10", ""), typeof(req10));
            elementDictionary.Add(XName.Get("reportSubjectOffice", ""), typeof(reportSubjectOffice));
            elementDictionary.Add(XName.Get("reportSubject", ""), typeof(reportSubject));
            elementDictionary.Add(XName.Get("reportSections", ""), typeof(reportSections));
            elementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            elementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
            elementDictionary.Add(XName.Get("reportKind", ""), typeof(reportKind));
            elementDictionary.Add(XName.Get("reportForm", ""), typeof(reportForm));
            elementDictionary.Add(XName.Get("reportConsumer", ""), typeof(reportConsumer));
            elementDictionary.Add(XName.Get("personage", ""), typeof(personage));
            elementDictionary.Add(XName.Get("person", ""), typeof(person));
            elementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(headerReqHolder));
            elementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(footerReqHolder));
            elementDictionary.Add(XName.Get("employeeKind", ""), typeof(employeeKind));
            elementDictionary.Add(XName.Get("docState", ""), typeof(docState));
            elementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(collectingPeriod));
            elementDictionary.Add(XName.Get("author", ""), typeof(author));
            elementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            elementDictionary.Add(XName.Get("Objects", ""), typeof(Objects));
            elementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.StatesSchemekey));
            elementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.Statekey));
            elementDictionary.Add(
                XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report"),
                typeof(ru.krista.consolidation.model.report.F_0503730of20161201S2Row));
            elementDictionary.Add(XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S2));
            elementDictionary.Add(
                XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report"),
                typeof(ru.krista.consolidation.model.report.F_0503730of20161201S1Row));
            elementDictionary.Add(XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201S1));
            elementDictionary.Add(XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201HR));
            elementDictionary.Add(XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201FR));
            elementDictionary.Add(XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503730of20161201));
            elementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
            elementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
            elementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
            elementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
            elementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportKindkey));
            elementDictionary.Add(XName.Get("ReportForm-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportFormkey));
            elementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
            elementDictionary.Add(XName.Get("Personage-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Personagekey));
            elementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
            elementDictionary.Add(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.EmployeeKindkey));
            elementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
            elementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
            elementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKEIkey));
            elementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
            elementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("subjectRole", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public subjectRole subjectRole
        {
            get
            {
                return rootObject as subjectRole;
            }
        }

        public scheme scheme
        {
            get
            {
                return rootObject as scheme;
            }
        }

        public rows rows
        {
            get
            {
                return rootObject as rows;
            }
        }

        public responsibleConsumer responsibleConsumer
        {
            get
            {
                return rootObject as responsibleConsumer;
            }
        }

        public req13 req13
        {
            get
            {
                return rootObject as req13;
            }
        }

        public req12 req12
        {
            get
            {
                return rootObject as req12;
            }
        }

        public req10 req10
        {
            get
            {
                return rootObject as req10;
            }
        }

        public reportSubjectOffice reportSubjectOffice
        {
            get
            {
                return rootObject as reportSubjectOffice;
            }
        }

        public reportSubject reportSubject
        {
            get
            {
                return rootObject as reportSubject;
            }
        }

        public reportSections reportSections
        {
            get
            {
                return rootObject as reportSections;
            }
        }

        public reportPeriodAbstract reportPeriodAbstract
        {
            get
            {
                return rootObject as reportPeriodAbstract;
            }
        }

        public reportLevel reportLevel
        {
            get
            {
                return rootObject as reportLevel;
            }
        }

        public reportKind reportKind
        {
            get
            {
                return rootObject as reportKind;
            }
        }

        public reportForm reportForm
        {
            get
            {
                return rootObject as reportForm;
            }
        }

        public reportConsumer reportConsumer
        {
            get
            {
                return rootObject as reportConsumer;
            }
        }

        public personage personage
        {
            get
            {
                return rootObject as personage;
            }
        }

        public person person
        {
            get
            {
                return rootObject as person;
            }
        }

        public headerReqHolder headerReqHolder
        {
            get
            {
                return rootObject as headerReqHolder;
            }
        }

        public footerReqHolder footerReqHolder
        {
            get
            {
                return rootObject as footerReqHolder;
            }
        }

        public employeeKind employeeKind
        {
            get
            {
                return rootObject as employeeKind;
            }
        }

        public docState docState
        {
            get
            {
                return rootObject as docState;
            }
        }

        public collectingPeriod collectingPeriod
        {
            get
            {
                return rootObject as collectingPeriod;
            }
        }

        public author author
        {
            get
            {
                return rootObject as author;
            }
        }

        public ato ato
        {
            get
            {
                return rootObject as ato;
            }
        }

        public Objects Objects
        {
            get
            {
                return rootObject as Objects;
            }
        }

        private XRootNamespace()
        {
        }

        public XRootNamespace(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(responsibleConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req13 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req12 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req10 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSubjectOffice root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportForm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(personage root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(employeeKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public subjectRole subjectRole
        {
            get
            {
                return rootObject as subjectRole;
            }
        }

        public scheme scheme
        {
            get
            {
                return rootObject as scheme;
            }
        }

        public rows rows
        {
            get
            {
                return rootObject as rows;
            }
        }

        public responsibleConsumer responsibleConsumer
        {
            get
            {
                return rootObject as responsibleConsumer;
            }
        }

        public req13 req13
        {
            get
            {
                return rootObject as req13;
            }
        }

        public req12 req12
        {
            get
            {
                return rootObject as req12;
            }
        }

        public req10 req10
        {
            get
            {
                return rootObject as req10;
            }
        }

        public reportSubjectOffice reportSubjectOffice
        {
            get
            {
                return rootObject as reportSubjectOffice;
            }
        }

        public reportSubject reportSubject
        {
            get
            {
                return rootObject as reportSubject;
            }
        }

        public reportSections reportSections
        {
            get
            {
                return rootObject as reportSections;
            }
        }

        public reportPeriodAbstract reportPeriodAbstract
        {
            get
            {
                return rootObject as reportPeriodAbstract;
            }
        }

        public reportLevel reportLevel
        {
            get
            {
                return rootObject as reportLevel;
            }
        }

        public reportKind reportKind
        {
            get
            {
                return rootObject as reportKind;
            }
        }

        public reportForm reportForm
        {
            get
            {
                return rootObject as reportForm;
            }
        }

        public reportConsumer reportConsumer
        {
            get
            {
                return rootObject as reportConsumer;
            }
        }

        public personage personage
        {
            get
            {
                return rootObject as personage;
            }
        }

        public person person
        {
            get
            {
                return rootObject as person;
            }
        }

        public headerReqHolder headerReqHolder
        {
            get
            {
                return rootObject as headerReqHolder;
            }
        }

        public footerReqHolder footerReqHolder
        {
            get
            {
                return rootObject as footerReqHolder;
            }
        }

        public employeeKind employeeKind
        {
            get
            {
                return rootObject as employeeKind;
            }
        }

        public docState docState
        {
            get
            {
                return rootObject as docState;
            }
        }

        public collectingPeriod collectingPeriod
        {
            get
            {
                return rootObject as collectingPeriod;
            }
        }

        public author author
        {
            get
            {
                return rootObject as author;
            }
        }

        public ato ato
        {
            get
            {
                return rootObject as ato;
            }
        }

        public Objects Objects
        {
            get
            {
                return rootObject as Objects;
            }
        }

        public ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey
        {
            get
            {
                return rootObject as ru.krista.core.docstate.model.meta.StatesSchemekey;
            }
        }

        public ru.krista.core.docstate.model.meta.Statekey Statekey
        {
            get
            {
                return rootObject as ru.krista.core.docstate.model.meta.Statekey;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201S2Row F_0503730of20161201S2Row
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201S2Row;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201S2 F_0503730of20161201S2
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201S2;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201S1Row F_0503730of20161201S1Row
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201S1Row;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201S1 F_0503730of20161201S1
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201S1;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201HR F_0503730of20161201HR
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201HR;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201FR F_0503730of20161201FR
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201FR;
            }
        }

        public ru.krista.consolidation.model.report.F_0503730of20161201 F_0503730of20161201
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.report.F_0503730of20161201;
            }
        }

        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportSubjectRolekey;
            }
        }

        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportSubjectkey;
            }
        }

        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportPeriodPeriodickey;
            }
        }

        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportLevelkey;
            }
        }

        public ru.krista.consolidation.model.ReportKindkey ReportKindkey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportKindkey;
            }
        }

        public ru.krista.consolidation.model.ReportFormkey ReportFormkey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportFormkey;
            }
        }

        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get
            {
                return rootObject as ru.krista.consolidation.model.ReportCollectingPeriodkey;
            }
        }

        public ru.krista.budget.model.Personagekey Personagekey
        {
            get
            {
                return rootObject as ru.krista.budget.model.Personagekey;
            }
        }

        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                return rootObject as ru.krista.budget.model.Officekey;
            }
        }

        public ru.krista.budget.model.EmployeeKindkey EmployeeKindkey
        {
            get
            {
                return rootObject as ru.krista.budget.model.EmployeeKindkey;
            }
        }

        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                return rootObject as ru.krista.budget.model.Employeekey;
            }
        }

        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get
            {
                return rootObject as ru.krista.budget.model.ClsOKTMOkey;
            }
        }

        public ru.krista.budget.model.ClsOKEIkey ClsOKEIkey
        {
            get
            {
                return rootObject as ru.krista.budget.model.ClsOKEIkey;
            }
        }

        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get
            {
                return rootObject as ru.krista.budget.model.ClsGRBSkey;
            }
        }

        public ru.krista.budget.model.ATOkey ATOkey
        {
            get
            {
                return rootObject as ru.krista.budget.model.ATOkey;
            }
        }

        private XRoot()
        {
        }

        public XRoot(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(responsibleConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req13 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req12 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req10 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSubjectOffice root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportForm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(personage root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(employeeKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.core.docstate.model.meta.StatesSchemekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.core.docstate.model.meta.Statekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201S2Row root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201S2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201S1Row root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201S1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201HR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201FR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503730of20161201 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportSubjectRolekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportSubjectkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportPeriodPeriodickey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportLevelkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportFormkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportCollectingPeriodkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Personagekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Officekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.EmployeeKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Employeekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKTMOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKEIkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsGRBSkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ATOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    namespace ru.krista.core.docstate.model.meta
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;

        using Xml.Schema.Linq;


        public partial class StatesSchemekey : XTypedElement, IXMetaData
        {

            public static explicit operator StatesSchemekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<StatesSchemekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public StatesSchemekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static StatesSchemekey Load(string xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Parse(string xml)
            {
                return XTypedServices.Parse<StatesSchemekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<StatesSchemekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (scheme)
        /// </para>
        /// </summary>
        public partial class Statekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Statekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Statekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Statekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("scheme", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public Statekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public scheme scheme
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("scheme", ""));
                    return ((scheme)(x));
                }
                set
                {
                    this.SetElement(XName.Get("scheme", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("State-key", "ru.krista.core.docstate.model.meta");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Statekey Load(string xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Parse(string xml)
            {
                return XTypedServices.Parse<Statekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Statekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("scheme", ""), typeof(scheme));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public StatesSchemekey StatesSchemekey
            {
                get
                {
                    return rootObject as StatesSchemekey;
                }
            }

            public Statekey Statekey
            {
                get
                {
                    return rootObject as Statekey;
                }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(StatesSchemekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Statekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.consolidation.model.report
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;

        using Xml.Schema.Linq;


        public partial class F_0503730of20161201S2Row : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503730of20161201S2Row(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201S2Row>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503730of20161201S2Row()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string tableRowName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("tableRowName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string tableRowId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("tableRowId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col6", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col16
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col16", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col15
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col15", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col15", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col14
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col14", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col14", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col13
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col13", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col13", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col12
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col12", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col12", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col11", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col10
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col10", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col10", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col0
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col0", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201S2Row", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201S2Row Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S2Row>(xmlFile);
            }

            public static F_0503730of20161201S2Row Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S2Row>(xmlFile);
            }

            public static F_0503730of20161201S2Row Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201S2Row>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201S2Row>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (rows)
        /// </para>
        /// </summary>
        public partial class F_0503730of20161201S2 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503730of20161201S2(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201S2>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503730of20161201S2()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rows", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public F_0503730of20161201S2()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public rows rows
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("rows", ""));
                    return ((rows)(x));
                }
                set
                {
                    this.SetElement(XName.Get("rows", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormSectionId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormSectionId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormSectionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string checkData
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkData", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("checkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201S2", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201S2 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S2>(xmlFile);
            }

            public static F_0503730of20161201S2 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S2>(xmlFile);
            }

            public static F_0503730of20161201S2 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201S2>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201S2>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class F_0503730of20161201S1Row : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503730of20161201S1Row(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201S1Row>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503730of20161201S1Row()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string tableRowName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("tableRowName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string tableRowId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("tableRowId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col6", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col17
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col17", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col17", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col16
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col16", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col15
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col15", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col15", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col14
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col14", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col14", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col13
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col13", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col13", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col12
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col12", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col12", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col11", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col0
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col0", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("col0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201S1Row", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201S1Row Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S1Row>(xmlFile);
            }

            public static F_0503730of20161201S1Row Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S1Row>(xmlFile);
            }

            public static F_0503730of20161201S1Row Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201S1Row>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201S1Row>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (rows)
        /// </para>
        /// </summary>
        public partial class F_0503730of20161201S1 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503730of20161201S1(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201S1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503730of20161201S1()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rows", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public F_0503730of20161201S1()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public rows rows
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("rows", ""));
                    return ((rows)(x));
                }
                set
                {
                    this.SetElement(XName.Get("rows", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormSectionId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormSectionId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormSectionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string checkData
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkData", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("checkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201S1", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201S1 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S1>(xmlFile);
            }

            public static F_0503730of20161201S1 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201S1>(xmlFile);
            }

            public static F_0503730of20161201S1 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201S1>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201S1>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (req10, req12, req13)
        /// </para>
        /// </summary>
        public partial class F_0503730of20161201HR : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503730of20161201HR(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201HR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503730of20161201HR()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("req10", "")),
                    new NamedContentModelEntity(XName.Get("req12", "")),
                    new NamedContentModelEntity(XName.Get("req13", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (req10, req12, req13)
            /// </para>
            /// </summary>
            public F_0503730of20161201HR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req12, req13)
            /// </para>
            /// </summary>
            public req10 req10
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req10", ""));
                    return ((req10)(x));
                }
                set
                {
                    this.SetElement(XName.Get("req10", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req12, req13)
            /// </para>
            /// </summary>
            public req12 req12
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req12", ""));
                    return ((req12)(x));
                }
                set
                {
                    this.SetElement(XName.Get("req12", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req12, req13)
            /// </para>
            /// </summary>
            public req13 req13
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req13", ""));
                    return ((req13)(x));
                }
                set
                {
                    this.SetElement(XName.Get("req13", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req9
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req9", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req9", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req8
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req8", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req5
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req5", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req3", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req15
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req15", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req15", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req14
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req14", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req14", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req11", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201HR", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201HR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201HR>(xmlFile);
            }

            public static F_0503730of20161201HR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201HR>(xmlFile);
            }

            public static F_0503730of20161201HR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201HR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201HR>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("req10", ""), typeof(req10));
                localElementDictionary.Add(XName.Get("req12", ""), typeof(req12));
                localElementDictionary.Add(XName.Get("req13", ""), typeof(req13));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class F_0503730of20161201FR : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503730of20161201FR(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201FR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503730of20161201FR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req8
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req8", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req7
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req7", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req7", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req6", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req5
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req5", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req4
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req4", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req3", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req11", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201FR", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201FR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201FR>(xmlFile);
            }

            public static F_0503730of20161201FR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201FR>(xmlFile);
            }

            public static F_0503730of20161201FR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201FR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201FR>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
        /// </para>
        /// </summary>
        public partial class F_0503730of20161201 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator F_0503730of20161201(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503730of20161201>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503730of20161201()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("collectingPeriod", "")),
                    new NamedContentModelEntity(XName.Get("docState", "")),
                    new NamedContentModelEntity(XName.Get("reportConsumer", "")),
                    new NamedContentModelEntity(XName.Get("reportForm", "")),
                    new NamedContentModelEntity(XName.Get("reportSubject", "")),
                    new NamedContentModelEntity(XName.Get("reportSubjectOffice", "")),
                    new NamedContentModelEntity(XName.Get("responsibleConsumer", "")),
                    new NamedContentModelEntity(XName.Get("footerReqHolder", "")),
                    new NamedContentModelEntity(XName.Get("headerReqHolder", "")),
                    new NamedContentModelEntity(XName.Get("reportSections", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public F_0503730of20161201()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public collectingPeriod collectingPeriod
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("collectingPeriod", ""));
                    return ((collectingPeriod)(x));
                }
                set
                {
                    this.SetElement(XName.Get("collectingPeriod", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public docState docState
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("docState", ""));
                    return ((docState)(x));
                }
                set
                {
                    this.SetElement(XName.Get("docState", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportConsumer reportConsumer
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportConsumer", ""));
                    return ((reportConsumer)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportConsumer", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportForm reportForm
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportForm", ""));
                    return ((reportForm)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportForm", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSubject reportSubject
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSubject", ""));
                    return ((reportSubject)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportSubject", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSubjectOffice reportSubjectOffice
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSubjectOffice", ""));
                    return ((reportSubjectOffice)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportSubjectOffice", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public responsibleConsumer responsibleConsumer
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("responsibleConsumer", ""));
                    return ((responsibleConsumer)(x));
                }
                set
                {
                    this.SetElement(XName.Get("responsibleConsumer", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public footerReqHolder footerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("footerReqHolder", ""));
                    return ((footerReqHolder)(x));
                }
                set
                {
                    this.SetElement(XName.Get("footerReqHolder", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public headerReqHolder headerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("headerReqHolder", ""));
                    return ((headerReqHolder)(x));
                }
                set
                {
                    this.SetElement(XName.Get("headerReqHolder", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportForm, reportSubject, reportSubjectOffice, responsibleConsumer, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSections reportSections
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSections", ""));
                    return ((reportSections)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportSections", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string warningCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("warningCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("warningCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string updateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("updateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("updateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string stateUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("stateUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("stateUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string signStatus
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signStatus", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("signStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string signCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("signCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string signCheckDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signCheckDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("signCheckDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string requiredSignCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("requiredSignCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("requiredSignCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string reportFormName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string reportFormId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string reportFormCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string reportFormClassName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormClassName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("reportFormClassName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string isEmpty
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("isEmpty", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("isEmpty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string freeSignCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("freeSignCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("freeSignCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string formUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("formUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("formUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string fillingSourceNote
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("fillingSourceNote", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("fillingSourceNote", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string fillingSource
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("fillingSource", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("fillingSource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string evalDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("evalDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("evalDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string errorCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("errorCount", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("errorCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string endDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("endDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("endDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryYear
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryYear", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string checkDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("checkDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string caption
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("caption", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string beginDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("beginDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("beginDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string attachments
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("attachments", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("attachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("F_0503730of20161201", "ru.krista.consolidation.model.report");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503730of20161201 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201>(xmlFile);
            }

            public static F_0503730of20161201 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503730of20161201>(xmlFile);
            }

            public static F_0503730of20161201 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503730of20161201>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503730of20161201>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(collectingPeriod));
                localElementDictionary.Add(XName.Get("docState", ""), typeof(docState));
                localElementDictionary.Add(XName.Get("reportConsumer", ""), typeof(reportConsumer));
                localElementDictionary.Add(XName.Get("reportForm", ""), typeof(reportForm));
                localElementDictionary.Add(XName.Get("reportSubject", ""), typeof(reportSubject));
                localElementDictionary.Add(XName.Get("reportSubjectOffice", ""), typeof(reportSubjectOffice));
                localElementDictionary.Add(XName.Get("responsibleConsumer", ""), typeof(responsibleConsumer));
                localElementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(footerReqHolder));
                localElementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(headerReqHolder));
                localElementDictionary.Add(XName.Get("reportSections", ""), typeof(reportSections));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public F_0503730of20161201S2Row F_0503730of20161201S2Row
            {
                get
                {
                    return rootObject as F_0503730of20161201S2Row;
                }
            }

            public F_0503730of20161201S2 F_0503730of20161201S2
            {
                get
                {
                    return rootObject as F_0503730of20161201S2;
                }
            }

            public F_0503730of20161201S1Row F_0503730of20161201S1Row
            {
                get
                {
                    return rootObject as F_0503730of20161201S1Row;
                }
            }

            public F_0503730of20161201S1 F_0503730of20161201S1
            {
                get
                {
                    return rootObject as F_0503730of20161201S1;
                }
            }

            public F_0503730of20161201HR F_0503730of20161201HR
            {
                get
                {
                    return rootObject as F_0503730of20161201HR;
                }
            }

            public F_0503730of20161201FR F_0503730of20161201FR
            {
                get
                {
                    return rootObject as F_0503730of20161201FR;
                }
            }

            public F_0503730of20161201 F_0503730of20161201
            {
                get
                {
                    return rootObject as F_0503730of20161201;
                }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(F_0503730of20161201S2Row root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201S2 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201S1Row root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201S1 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201HR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201FR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503730of20161201 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.consolidation.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;

        using Xml.Schema.Linq;


        public partial class ReportSubjectRolekey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportSubjectRolekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportSubjectRolekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportSubjectRolekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectRolekey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectRolekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectRolekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (person, reportLevel, subjectRole)
        /// </para>
        /// </summary>
        public partial class ReportSubjectkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportSubjectkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportSubjectkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportSubjectkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("person", "")),
                    new NamedContentModelEntity(XName.Get("reportLevel", "")),
                    new NamedContentModelEntity(XName.Get("subjectRole", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public ReportSubjectkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set
                {
                    this.SetElement(XName.Get("person", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public reportLevel reportLevel
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportLevel", ""));
                    return ((reportLevel)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportLevel", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public subjectRole subjectRole
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("subjectRole", ""));
                    return ((subjectRole)(x));
                }
                set
                {
                    this.SetElement(XName.Get("subjectRole", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportSubject-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
                localElementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportKind)
        /// </para>
        /// </summary>
        public partial class ReportPeriodPeriodickey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportPeriodPeriodickey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportPeriodPeriodickey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportPeriodPeriodickey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportKind", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public ReportPeriodPeriodickey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public reportKind reportKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportKind", ""));
                    return ((reportKind)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportKind", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportPeriodPeriodickey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Parse(string xml)
            {
                return XTypedServices.Parse<ReportPeriodPeriodickey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportPeriodPeriodickey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reportKind", ""), typeof(reportKind));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ReportLevelkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportLevelkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportLevelkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportLevelkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportLevel-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportLevelkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportLevelkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportLevelkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportKindkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportKind-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportFormkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportFormkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportFormkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportFormkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string displayCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("displayCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("displayCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportForm-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportFormkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportFormkey>(xmlFile);
            }

            public static ReportFormkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportFormkey>(xmlFile);
            }

            public static ReportFormkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportFormkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportFormkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (author, reportPeriodAbstract)
        /// </para>
        /// </summary>
        public partial class ReportCollectingPeriodkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ReportCollectingPeriodkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportCollectingPeriodkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportCollectingPeriodkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("author", "")), new NamedContentModelEntity(XName.Get("reportPeriodAbstract", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public ReportCollectingPeriodkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public author author
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("author", ""));
                    return ((author)(x));
                }
                set
                {
                    this.SetElement(XName.Get("author", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public reportPeriodAbstract reportPeriodAbstract
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportPeriodAbstract", ""));
                    return ((reportPeriodAbstract)(x));
                }
                set
                {
                    this.SetElement(XName.Get("reportPeriodAbstract", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportCollectingPeriodkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportCollectingPeriodkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportCollectingPeriodkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("author", ""), typeof(author));
                localElementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public ReportSubjectRolekey ReportSubjectRolekey
            {
                get
                {
                    return rootObject as ReportSubjectRolekey;
                }
            }

            public ReportSubjectkey ReportSubjectkey
            {
                get
                {
                    return rootObject as ReportSubjectkey;
                }
            }

            public ReportPeriodPeriodickey ReportPeriodPeriodickey
            {
                get
                {
                    return rootObject as ReportPeriodPeriodickey;
                }
            }

            public ReportLevelkey ReportLevelkey
            {
                get
                {
                    return rootObject as ReportLevelkey;
                }
            }

            public ReportKindkey ReportKindkey
            {
                get
                {
                    return rootObject as ReportKindkey;
                }
            }

            public ReportFormkey ReportFormkey
            {
                get
                {
                    return rootObject as ReportFormkey;
                }
            }

            public ReportCollectingPeriodkey ReportCollectingPeriodkey
            {
                get
                {
                    return rootObject as ReportCollectingPeriodkey;
                }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(ReportSubjectRolekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubjectkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportPeriodPeriodickey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportLevelkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportFormkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportCollectingPeriodkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.budget.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;

        using Xml.Schema.Linq;


        public partial class Personagekey : XTypedElement, IXMetaData
        {

            public static explicit operator Personagekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Personagekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public Personagekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Personage-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Personagekey Load(string xmlFile)
            {
                return XTypedServices.Load<Personagekey>(xmlFile);
            }

            public static Personagekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Personagekey>(xmlFile);
            }

            public static Personagekey Parse(string xml)
            {
                return XTypedServices.Parse<Personagekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Personagekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ato)
        /// </para>
        /// </summary>
        public partial class Officekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Officekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Officekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Officekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ato", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public Officekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ato", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string inn
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("inn", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("inn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Office-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Officekey Load(string xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Parse(string xml)
            {
                return XTypedServices.Parse<Officekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Officekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class EmployeeKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator EmployeeKindkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<EmployeeKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public EmployeeKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("EmployeeKind-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static EmployeeKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<EmployeeKindkey>(xmlFile);
            }

            public static EmployeeKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<EmployeeKindkey>(xmlFile);
            }

            public static EmployeeKindkey Parse(string xml)
            {
                return XTypedServices.Parse<EmployeeKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<EmployeeKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (employeeKind, person, personage)
        /// </para>
        /// </summary>
        public partial class Employeekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Employeekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Employeekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Employeekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("employeeKind", "")),
                    new NamedContentModelEntity(XName.Get("person", "")),
                    new NamedContentModelEntity(XName.Get("personage", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (employeeKind, person, personage)
            /// </para>
            /// </summary>
            public Employeekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (employeeKind, person, personage)
            /// </para>
            /// </summary>
            public employeeKind employeeKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("employeeKind", ""));
                    return ((employeeKind)(x));
                }
                set
                {
                    this.SetElement(XName.Get("employeeKind", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (employeeKind, person, personage)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set
                {
                    this.SetElement(XName.Get("person", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (employeeKind, person, personage)
            /// </para>
            /// </summary>
            public personage personage
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("personage", ""));
                    return ((personage)(x));
                }
                set
                {
                    this.SetElement(XName.Get("personage", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string rank
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("rank", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("rank", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Employee-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Employeekey Load(string xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Parse(string xml)
            {
                return XTypedServices.Parse<Employeekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Employeekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("employeeKind", ""), typeof(employeeKind));
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("personage", ""), typeof(personage));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ClsOKTMOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKTMOkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKTMOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKTMOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsOKTMO-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKTMOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKTMOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKTMOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKEIkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKEIkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKEIkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKEIkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsOKEI-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKEIkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKEIkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKEIkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsGRBSkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsGRBSkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsGRBSkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsGRBSkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ClsGRBS-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsGRBSkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsGRBSkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsGRBSkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ATOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ATOkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ATOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ATOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("ATO-key", "ru.krista.budget.model");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Element;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ATOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Parse(string xml)
            {
                return XTypedServices.Parse<ATOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ATOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedElement rootObject;


            public Personagekey Personagekey
            {
                get
                {
                    return rootObject as Personagekey;
                }
            }

            public Officekey Officekey
            {
                get
                {
                    return rootObject as Officekey;
                }
            }

            public EmployeeKindkey EmployeeKindkey
            {
                get
                {
                    return rootObject as EmployeeKindkey;
                }
            }

            public Employeekey Employeekey
            {
                get
                {
                    return rootObject as Employeekey;
                }
            }

            public ClsOKTMOkey ClsOKTMOkey
            {
                get
                {
                    return rootObject as ClsOKTMOkey;
                }
            }

            public ClsOKEIkey ClsOKEIkey
            {
                get
                {
                    return rootObject as ClsOKEIkey;
                }
            }

            public ClsGRBSkey ClsGRBSkey
            {
                get
                {
                    return rootObject as ClsGRBSkey;
                }
            }

            public ATOkey ATOkey
            {
                get
                {
                    return rootObject as ATOkey;
                }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(Personagekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Officekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(EmployeeKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Employeekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKTMOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKEIkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsGRBSkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ATOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get
                {
                    return doc;
                }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
}