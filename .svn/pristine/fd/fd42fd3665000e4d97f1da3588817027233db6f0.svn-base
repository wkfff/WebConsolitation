//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Krista.FM.RIA.Extensions.E86N.Presentation.Views {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Krista.FM.RIA.Extensions.E86N.Presentation.Views.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.AnnualBalanceItfSettingsView&apos;);
        ///
        ///E86n.View.AnnualBalanceItfSettingsView =
        ///    {
        ///        getPartDoc: function () {
        ///            var val = window.Settings.getSelectionModel().getSelected().data.RefPartDoc;
        ///            if (!val) val = -1;
        ///            return val;
        ///        },
        ///        
        ///        reloadLP: function () {
        ///            window.DetailsLP.reload();
        ///        },
        ///        
        ///        RowSelect: function (grid) {
        ///            var btn = Ext.getCmp(grid + &apos;RemoveRecordBtn&apos;);
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AnnualBalanceItfSettingsView {
            get {
                return ResourceManager.GetString("AnnualBalanceItfSettingsView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.AnnualBalanceView&apos;);
        ///
        ///E86n.View.AnnualBalanceView =
        ///    {
        ///        Save: function () {
        ///            window.E86n.View.AnnualBalanceView.submitForm(&apos;HeadAttribute&apos;);
        ///        },
        ///
        ///        Refresh: function () {
        ///            window.HeadAttributeStore.reload();
        ///        },
        ///
        ///        submitForm: function (formId) {
        ///            Ext.getCmp(formId).form.submit({
        ///                waitMsg: &apos;Сохранение...&apos;,
        ///                success: function (form, action) {
        ///                    if (action.resu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AnnualBalanceView {
            get {
                return ResourceManager.GetString("AnnualBalanceView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //функция формирования маски кода
        ///var buildMask = function (v, mask, left) {
        ///    if (String(mask).length != 0) {
        ///        var i = 0;
        ///        var mskval = &quot;&quot;;
        ///        var count = 0;
        ///        while (i &lt; String(mask).length) {
        ///            if (String(mask).charAt(i) == &quot;#&quot;) count++;
        ///            i++;
        ///        };
        ///        
        ///        for (i = 0; i &lt; count - String(v).length; i++)
        ///            mskval += &quot;0&quot;;
        ///
        ///        // определяем добавлять нехватающие 0ли с начала или с конца
        ///        if (left == undefined) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeMaskBuilder {
            get {
                return ResourceManager.GetString("CodeMaskBuilder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.DiverseInfoView&apos;);
        ///
        ///E86n.View.DiverseInfoView =
        ///    {
        ///        RowSelect: function (record) {
        ///            if (record.dirty) {
        ///                //Запись изменена и не сохранена!
        ///                window.PaymentDetailsTargets.setDisabled(true);
        ///            } else {
        ///                //Запись в порядке, открываем детализацию!
        ///                window.PaymentDetailsTargets.setDisabled(false);
        ///                eval(&apos;PaymentDetailsTargetsStore&apos;).reload();
        ///            }
        ///        },
        ///
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DiverseInfoView {
            get {
                return ResourceManager.GetString("DiverseInfoView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.Control&apos;);
        ///E86n.Control.DocsDetailControl =
        ///    {
        ///        setUploadSize: function (el, id1, id2) {
        ///            var size = 0;
        ///            for (var num1 = 0; num1 &lt; el.files.length; num1++) {
        ///                var file = el.files[num1];
        ///                //alert(file.name+&quot; &quot;+file.type+&quot; &quot;+file.size);
        ///                size += file.size;
        ///            }
        ///            document.querySelector(&quot;#&quot; + id1).textContent = el.files.length;
        ///            document.querySelector(&quot;#&quot; + id2).textContent = Math. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DocsDetailControl {
            get {
                return ResourceManager.GetString("DocsDetailControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*globals _comma_separated_list_of_variables_*/
        ///Ext.ns(&apos;E86n.View.Documents&apos;);
        ///
        ///E86n.View.Documents.Grid =
        ///    {
        ///        getRowClass: function (record) {
        ///            switch (record.data.State) {
        ///            case &quot;Создан&quot;:
        ///            case &quot;&apos;Значение не указано&apos;&quot;:
        ///                return &apos;not_active-row&apos;;
        ///            case &quot;На рассмотрении&quot;:
        ///                return &apos;under_advisement-row&apos;;
        ///            case &quot;Экспортирован&quot;:
        ///                return &apos;is_exported-row&apos;;
        ///            case &quot;Завершено&quot;:
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DocumentsView {
            get {
                return ResourceManager.GetString("DocumentsView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .under_advisement-row { background-color: #F2EB9C; }
        ///
        ///.not_active-row { background-color: #FF9F9A; }
        ///
        ///.is_processed-row { background-color: #C8FFC8; }
        ///
        ///.is_exported-row { background-color: #448C44; }.
        /// </summary>
        internal static string DocumentsViewStyle {
            get {
                return ResourceManager.GetString("DocumentsViewStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workbench.extensions.HandBooks = {
        ///    //функция обработки выбора строки(значения)
        ///    onSelectRow: function () { Ext.MessageBox.alert(&apos;Ахтунг!&apos;, &apos;Функция не определена&apos;, 1); },
        ///    //функция вызова справочников с произвольной обработкой выбора
        ///    showHandBookWhd: function (bookObjectKey, title, fn, filter) {
        ///        window.Workbench.extensions.HandBooks.onSelectRow = fn;
        ///        var wnd = Ext.getCmp(&apos;HBWnd&apos;);
        ///        if (!wnd)
        ///            Ext.MessageBox.alert(&apos;Ошибка&apos;, &apos;Не найдено окно: HBWnd&apos;, 1) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HandBooks {
            get {
                return ResourceManager.GetString("HandBooks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///
        ///E86n.View.InfControlMeasures =
        ///    {
        ///        //требуется ли вызывать контроллер
        ///        update: true,
        ///
        ///        DataChanged: function (checkBox, store) {
        ///            window.E86n.View.InfControlMeasures.update = false;
        ///            var cb = Ext.getCmp(checkBox);
        ///            var record = store.getAt(0);
        ///            if (record) {
        ///                cb.setValue(record.get(checkBox));
        ///            } else {
        ///                cb.setValue(false);
        ///            }
        ///            window.E86n.V [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InfControlMeasuresView {
            get {
                return ResourceManager.GetString("InfControlMeasuresView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //получение значений для фильтра
        ///var getFilter = function (fld) {
        ///    var val;
        ///    switch (fld) {
        ///        case &apos;PPO&apos;:
        ///            val = RefOrgPPOFlt.getValue();
        ///            if (val != &apos;&apos;)
        ///             return val; 
        ///            else
        ///             return -1;
        ///        case &apos;GRBS&apos;:
        ///            val = RefOrgGRBSFlt.getValue();
        ///            if (val != &apos;&apos;)
        ///             return val; 
        ///            else
        ///             return -1; 
        ///        default:
        ///            return -1;
        ///    }
        ///};
        ///
        ///Ext.ns(&apos;E86n.View.OGSView&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OGSView {
            get {
                return ResourceManager.GetString("OGSView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.PassportView&apos;);
        ///
        ///E86n.View.PassportView =
        ///    {
        ///        RowSelect: function(grid) {
        ///            var btn = Ext.getCmp(grid + &apos;RemoveRecordBtn&apos;);
        ///            if (btn != undefined) {
        ///                btn.enable();
        ///            }
        ///        },
        ///
        ///        RowDeselect: function(grid) {
        ///            var btn = Ext.getCmp(grid + &apos;RemoveRecordBtn&apos;);
        ///            if (!Ext.getCmp(grid).hasSelection() &amp;&amp; btn != undefined) {
        ///                btn.disable();
        ///            }
        ///        },
        ///
        ///        Store [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PassportView {
            get {
                return ResourceManager.GetString("PassportView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.Pfhd2017View&apos;);
        ///
        ///function checkVal(value) {
        ///    if (value) {
        ///        return value;
        ///    }
        ///    return 0;
        ///};
        ///
        ///E86n.View.Pfhd2017View =
        ///    {
        ///        // табы по которым ничего не загружаем(исключаемые)
        ///        // todo вынести в общий функционал
        ///        excludeTabsOnReload: [&apos;PlanPaymentIndexTabPanel&apos;, &apos;ActionGrantTabPanel&apos;],
        ///
        ///        // todo вынести в общий функционал
        ///        reloadDetail: function (item) {
        ///            if (item) {
        ///                var activeTab = item.getActiv [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Pfhd2017View {
            get {
                return ResourceManager.GetString("Pfhd2017View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.PfhdView&apos;);
        ///E86n.View.PfhdView =
        ///    {
        ///        SetReadOnlyPfhd: function(readOnly, recId) {
        ///            window.btnPfhdSave.setDisabled(readOnly);
        ///            window.E86n.Control.StateToolBar.SetReadOnlyFormPanel(&apos;frmPfhd1&apos;, readOnly);
        ///            window.E86n.Control.StateToolBar.SetReadOnlyFormPanel(&apos;frmPfhd2&apos;, readOnly);
        ///            window.E86n.Control.StateToolBar.SetReadOnlyFormPanel(&apos;frmPfhd3&apos;, readOnly);
        ///
        ///            /*window.ActionGrant1.setReadOnly(true);*/
        ///
        ///            w [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PfhdView {
            get {
                return ResourceManager.GetString("PfhdView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.ResultsOfActivityView&apos;);
        ///
        ///E86n.View.ResultsOfActivityView.Common =
        ///    {
        ///        reloadDetail: function () {
        ///            var activeTab = window.DetailTabPanel.getActiveTab();
        ///
        ///            if (activeTab.id == &apos;MembersOfStaff&apos;) {
        ///                window.MembersOfStaffStore.reload();
        ///            }
        ///
        ///            if (activeTab.id == &apos;FinNFinAssets&apos;) {
        ///                window.FinNFinAssetsStore.reload();
        ///            }
        ///
        ///            if (activeTab.id == &apos;Cash&apos;) {
        ///                window [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ResultsOfActivityView {
            get {
                return ResourceManager.GetString("ResultsOfActivityView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.Control&apos;);
        ///
        ///E86n.View.Control.SearchComboboxControl = {
        ///    getGridActiveRecord: function (grid) {
        ///        if (grid.getSelectionModel() instanceof Ext.grid.RowSelectionModel) {
        ///            return grid.getSelectionModel().getSelected();
        ///        } else {
        ///            return grid.getSelectionModel().selection.record;
        ///        }
        ///    },
        ///
        ///    getClearTrigger: function (triggers) {
        ///        return this.getTriggerByTag(triggers, &quot;TriggerClear&quot;);
        ///    },
        ///
        ///    getTriggerByTag: function (t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SearchComboboxControl {
            get {
                return ResourceManager.GetString("SearchComboboxControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///
        ///function reloadDetail() {
        ///    var activeTab = window.DetailTabPanel.getActiveTab();
        ///
        ///    //Обновляем детализацию и сбрасываем выделение 
        ///    activeTab.reload();
        ///    activeTab.getSelectionModel().clearSelections();
        ///}
        ///
        ///E86n.View.Service2016 =
        ///    {
        ///        UpdateView: function () {
        ///            if (window.Service2016.getSelectionModel().hasSelection()) {
        ///                if (typeof window.Service2016RemoveRecordBtn !== &quot;undefined&quot;)
        ///                    window.Service2016Remov [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Service2016View {
            get {
                return ResourceManager.GetString("Service2016View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///
        ///function reloadDetail() {
        ///    var activeTab = window.DetailTabPanel.getActiveTab();
        ///
        ///    if (activeTab.id == &apos;Consumer&apos;) {
        ///        window.ConsumerRemoveRecordBtn.setDisabled(true);
        ///    }
        ///
        ///    if (activeTab.id == &apos;Characteristic&apos;) {
        ///        window.CharacteristicRemoveRecordBtn.setDisabled(true);
        ///    }
        ///
        ///    if (activeTab.id == &apos;Provider&apos;) {
        ///        window.ProviderRemoveRecordBtn.setDisabled(true);
        ///    }
        ///
        ///    //Обновляем детализацию и сбрасываем выделение 
        ///    activeTab. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServicesView {
            get {
                return ResourceManager.GetString("ServicesView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.SmetaView&apos;);
        ///E86n.View.SmetaView =
        ///    {
        ///        //формирование динамического фильтра для Бюджета
        ///        getFlt: function() {
        ///            var val = window.gpSmetaDetail.getSelectionModel().getSelected().data.RefBudgetID;
        ///            if (!val) return &apos;(REFTYPEKBK=10)&apos;;
        ///            else return &apos;(REFTYPEKBK=10) and (REFBUDGET=&apos; + val + &apos;)&apos;;
        ///        },
        ///
        ///        docStoreLoad: function(store) {
        ///            var cm = window.gpSmetaDetail.getColumnModel();
        ///            var year = store. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SmetaView {
            get {
                return ResourceManager.GetString("SmetaView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.StartDoc&apos;);
        ///
        /////получение значений для фильтра
        ///var getFilter = function (fld) {
        ///    var val;
        ///    switch (fld) {
        ///    case &apos;PPO&apos;:
        ///        val = window.RefOrgPPOFlt.getValue();
        ///        if (val != &apos;&apos;) {
        ///            return val;
        ///        } else {
        ///            return -1;
        ///        }
        ///    case &apos;GRBS&apos;:
        ///        val = window.RefOrgGRBSFlt.getValue();
        ///        if (val != &apos;&apos;) {
        ///            return val;
        ///        } else {
        ///            return -1;
        ///        }
        ///    case &apos;YF&apos;:
        ///        val = window.cb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartDocView {
            get {
                return ResourceManager.GetString("StartDocView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///E86n.View.StateSystem =
        ///{
        ///    getMasterID: function (gridName) {
        ///        var grid = Ext.getCmp(gridName);
        ///        if (grid.getSelectionModel().hasSelection()) {
        ///            var row = grid.getSelectionModel().getSelected();
        ///            return row.data.ID;
        ///        } else return -1;
        ///    },
        ///
        ///    RowSelect: function (part, record) {
        ///        if (record.dirty) {
        ///            //Запись изменена и не сохранена!
        ///            switch (part) {
        ///                case &apos;MasterGrid&apos;:
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StateSystemView {
            get {
                return ResourceManager.GetString("StateSystemView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///// todo вынести в общий функционал
        ///var getMasterID = function (gridName) {
        ///    var grid = window.Ext.getCmp(gridName);
        ///    if (grid.getSelectionModel().hasSelection()) {
        ///        var row = grid.getSelectionModel().getSelected();
        ///        return row.data.ID;
        ///    } else return -1;
        ///};
        ///
        ///E86n.View.StateTask2016 =
        ///    {
        ///        RowSelect: function (record) {
        ///            if (record.dirty) {
        ///                //Запись изменена и не сохранена!
        ///                window.DetailTabPanel.set [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StateTask2016View {
            get {
                return ResourceManager.GetString("StateTask2016View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///var getMasterID = function(gridName) {
        ///    var grid = window.Ext.getCmp(gridName);
        ///    if (grid.getSelectionModel().hasSelection()) {
        ///        var row = grid.getSelectionModel().getSelected();
        ///        return row.data.ID;
        ///    } else return -1;
        ///};
        ///
        ///function reloadDetail() {
        ///    var activeTab = window.DetailTabPanel.getActiveTab();
        ///
        ///    if (activeTab.id == &apos;ConsumerCategory&apos;) {
        ///        window.ConsumerCategoryStore.reload();
        ///    }
        ///
        ///    if (activeTab.id == &apos;IndicatorsOfService [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StateTaskView {
            get {
                return ResourceManager.GetString("StateTaskView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.Control&apos;);
        ///E86n.Control.StateToolBar =
        ///    {
        ///        // функция закрытия документа с параметрами readOnly, recId
        ///        ReadOnlyDocHandler: {},
        ///
        ///        showNoteWin: function (docId, error) {
        ///
        ///            var myProxy = new Ext.data.HttpProxy({
        ///                url: &apos;/StartDoc/&apos;,
        ///                api: {
        ///                    read: { url: &apos;/StartDoc/GetNote&apos;, method: &apos;GET&apos; },
        ///                    update: &apos;/StartDoc/SetNote&apos;
        ///                },
        ///                timeout: 60000
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StateToolBarControl {
            get {
                return ResourceManager.GetString("StateToolBarControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HB = {
        ///    // Возвращает объект рабочей области главного окна
        ///    getWorkbench: function () {
        ///        return top.Workbench;
        ///    },
        ///    // поле(колонка грида) куда нужно записать значения
        ///    Field: {},
        ///    // грид вызвавший справочник
        ///    Grid: {}
        ///};
        ///
        /////обработчик ввыбора строки для поля-триггера
        ///function SelectRowFT(record, lookupVal) {
        ///    var idFld = Ext.getCmp(HB.Field.substring(0, HB.Field.length - 4));
        ///    var nameFld = Ext.getCmp(HB.Field);
        ///    nameFld.setValue(lookupVal);
        ///    idFld.s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StdHandBooks {
            get {
                return ResourceManager.GetString("StdHandBooks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function CalculateSumm(store, field, summfld) {
        ///    eval(summfld).setValue(Ext.util.Format.number(eval(store).sum(field), &apos;0,000.00&apos;) + &apos; руб.&apos;);
        ///};
        ///.
        /// </summary>
        internal static string SummFn {
            get {
                return ResourceManager.GetString("SummFn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View&apos;);
        ///
        ///E86n.View.UIBuilders = {
        ///    appliedDocumentGridSelectRow: function (record, documentForm) {
        ///        var isExternalFiles = !(record.data.UrlExternal === &apos;&apos; || record.data.UrlExternal === null || record.data.UrlExternal === &apos;undefined&apos;);
        ///        documentForm.items.map.externalFiles.items.map.externalFileDownload.setText(record.data.UrlExternal);
        ///        documentForm.items.map.externalFiles.items.map.externalFileDownload.setUrl(record.data.UrlExternal);
        ///
        ///        documentForm.item [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UIBuilders {
            get {
                return ResourceManager.GetString("UIBuilders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ext.ns(&apos;E86n.View.Control&apos;);
        ///
        ///E86n.View.Control.UiExtensions = {
        ///    getGridActiveRecord: function (grid) {
        ///        if (grid.getSelectionModel() instanceof Ext.grid.RowSelectionModel) {
        ///            return grid.getSelectionModel().getSelected();
        ///        } else {
        ///            return grid.getSelectionModel().selection.record;
        ///        }
        ///    },
        ///
        ///    getClearTrigger: function (triggers) {
        ///        return this.getTriggerByTag(triggers, &quot;TriggerClear&quot;);
        ///    },
        ///
        ///    getTriggerByTag: function (triggers,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UiExtensions {
            get {
                return ResourceManager.GetString("UiExtensions", resourceCulture);
            }
        }
    }
}
