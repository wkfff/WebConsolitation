//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5420
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using www.roskazna.ru.eb.domain.common.@base;
    using www.roskazna.ru.eb.domain.common;
    using www.roskazna.ru.eb.domain.common.applied;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (RuClsPrEcAcs_Code, RuClsPrEcAcs_Name)
    /// </para>
    /// </summary>
    public partial class tdepregistry_okpd_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_okpd_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_okpd_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_okpd_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RuClsPrEcAcs_Code", "")), new NamedContentModelEntity(XName.Get("RuClsPrEcAcs_Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RuClsPrEcAcs_Code, RuClsPrEcAcs_Name)
        /// </para>
        /// </summary>
        public tdepregistry_okpd_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuClsPrEcAcs_Code, RuClsPrEcAcs_Name)
        /// </para>
        /// </summary>
        public string RuClsPrEcAcs_Code {
            get {
                XElement x = this.GetElement(XName.Get("RuClsPrEcAcs_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RuClsPrEcAcs_Code", ""), value, "RuClsPrEcAcs_Code", global::www.roskazna.ru.eb.domain.common.applied.tText1_12.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuClsPrEcAcs_Code, RuClsPrEcAcs_Name)
        /// </para>
        /// </summary>
        public string RuClsPrEcAcs_Name {
            get {
                XElement x = this.GetElement(XName.Get("RuClsPrEcAcs_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RuClsPrEcAcs_Name", ""), value, "RuClsPrEcAcs_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_okpd_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_okpd_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RuClsPrEcAcs_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RuClsPrEcAcs_Name", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RuClsEcActs_Code, RuClsEcActs_Name)
    /// </para>
    /// </summary>
    public partial class tdepregistry_okved_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_okved_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_okved_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_okved_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RuClsEcActs_Code", "")), new NamedContentModelEntity(XName.Get("RuClsEcActs_Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RuClsEcActs_Code, RuClsEcActs_Name)
        /// </para>
        /// </summary>
        public tdepregistry_okved_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuClsEcActs_Code, RuClsEcActs_Name)
        /// </para>
        /// </summary>
        public string RuClsEcActs_Code {
            get {
                XElement x = this.GetElement(XName.Get("RuClsEcActs_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RuClsEcActs_Code", ""), value, "RuClsEcActs_Code", global::www.roskazna.ru.eb.domain.common.applied.tText1_8.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuClsEcActs_Code, RuClsEcActs_Name)
        /// </para>
        /// </summary>
        public string RuClsEcActs_Name {
            get {
                XElement x = this.GetElement(XName.Get("RuClsEcActs_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RuClsEcActs_Name", ""), value, "RuClsEcActs_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_okved_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_okved_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RuClsEcActs_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RuClsEcActs_Name", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CsmCtgy_Code, CsmCtgy_Name)
    /// </para>
    /// </summary>
    public partial class tdepregistry_conscat_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_conscat_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_conscat_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_conscat_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CsmCtgy_Code", "")), new NamedContentModelEntity(XName.Get("CsmCtgy_Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CsmCtgy_Code, CsmCtgy_Name)
        /// </para>
        /// </summary>
        public tdepregistry_conscat_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CsmCtgy_Code, CsmCtgy_Name)
        /// </para>
        /// </summary>
        public string CsmCtgy_Code {
            get {
                XElement x = this.GetElement(XName.Get("CsmCtgy_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CsmCtgy_Code", ""), value, "CsmCtgy_Code", global::www.roskazna.ru.eb.domain.common.applied.tConsumercategorycode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CsmCtgy_Code, CsmCtgy_Name)
        /// </para>
        /// </summary>
        public string CsmCtgy_Name {
            get {
                XElement x = this.GetElement(XName.Get("CsmCtgy_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("CsmCtgy_Name", ""), value, "CsmCtgy_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_conscat_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_conscat_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CsmCtgy_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("CsmCtgy_Name", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (QltyInd_Name, QltyInd_Code, QltyInd_Units?)
    /// </para>
    /// </summary>
    public partial class tdepregistry_qind_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_qind_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_qind_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_qind_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("QltyInd_Name", "")), new NamedContentModelEntity(XName.Get("QltyInd_Code", "")), new NamedContentModelEntity(XName.Get("QltyInd_Units", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (QltyInd_Name, QltyInd_Code, QltyInd_Units?)
        /// </para>
        /// </summary>
        public tdepregistry_qind_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QltyInd_Name, QltyInd_Code, QltyInd_Units?)
        /// </para>
        /// </summary>
        public string QltyInd_Name {
            get {
                XElement x = this.GetElement(XName.Get("QltyInd_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("QltyInd_Name", ""), value, "QltyInd_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QltyInd_Name, QltyInd_Code, QltyInd_Units?)
        /// </para>
        /// </summary>
        public string QltyInd_Code {
            get {
                XElement x = this.GetElement(XName.Get("QltyInd_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("QltyInd_Code", ""), value, "QltyInd_Code", global::www.roskazna.ru.eb.domain.common.applied.tQltyIndCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (QltyInd_Name, QltyInd_Code, QltyInd_Units?)
        /// </para>
        /// </summary>
        public string QltyInd_Units {
            get {
                XElement x = this.GetElement(XName.Get("QltyInd_Units", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("QltyInd_Units", ""), value, "QltyInd_Units", global::www.roskazna.ru.eb.domain.common.applied.tName127.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_qind_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_qind_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("QltyInd_Name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("QltyInd_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("QltyInd_Units", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VolInd_Code, VolInd_Name, VolInd_Units)
    /// </para>
    /// </summary>
    public partial class tdepregistry_vind_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_vind_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_vind_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_vind_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VolInd_Code", "")), new NamedContentModelEntity(XName.Get("VolInd_Name", "")), new NamedContentModelEntity(XName.Get("VolInd_Units", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VolInd_Code, VolInd_Name, VolInd_Units)
        /// </para>
        /// </summary>
        public tdepregistry_vind_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolInd_Code, VolInd_Name, VolInd_Units)
        /// </para>
        /// </summary>
        public string VolInd_Code {
            get {
                XElement x = this.GetElement(XName.Get("VolInd_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VolInd_Code", ""), value, "VolInd_Code", global::www.roskazna.ru.eb.domain.common.applied.tVolumeindicatorcode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolInd_Code, VolInd_Name, VolInd_Units)
        /// </para>
        /// </summary>
        public string VolInd_Name {
            get {
                XElement x = this.GetElement(XName.Get("VolInd_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VolInd_Name", ""), value, "VolInd_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VolInd_Code, VolInd_Name, VolInd_Units)
        /// </para>
        /// </summary>
        public string VolInd_Units {
            get {
                XElement x = this.GetElement(XName.Get("VolInd_Units", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("VolInd_Units", ""), value, "VolInd_Units", global::www.roskazna.ru.eb.domain.common.applied.tText1_127.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_vind_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_vind_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VolInd_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VolInd_Name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VolInd_Units", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
    /// </para>
    /// </summary>
    public partial class tdepreginsttninfo_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepreginsttninfo_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepreginsttninfo_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepreginsttninfo_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("code", "")), new NamedContentModelEntity(XName.Get("name", "")), new NamedContentModelEntity(XName.Get("shortname", "")), new NamedContentModelEntity(XName.Get("okopf", "")), new NamedContentModelEntity(XName.Get("inn", "")), new NamedContentModelEntity(XName.Get("regreasoncode", "")), new NamedContentModelEntity(XName.Get("datereg", "")), new NamedContentModelEntity(XName.Get("OKVED", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public tdepreginsttninfo_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string code {
            get {
                XElement x = this.GetElement(XName.Get("code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("code", ""), value, "code", global::www.roskazna.ru.eb.domain.common.applied.tInstCode19.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", ""), value, "name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string shortname {
            get {
                XElement x = this.GetElement(XName.Get("shortname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("shortname", ""), value, "shortname", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string okopf {
            get {
                XElement x = this.GetElement(XName.Get("okopf", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okopf", ""), value, "okopf", global::www.roskazna.ru.eb.domain.common.applied.tokopf.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", ""), value, "inn", global::www.roskazna.ru.eb.domain.common.applied.tinn.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string regreasoncode {
            get {
                XElement x = this.GetElement(XName.Get("regreasoncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regreasoncode", ""), value, "regreasoncode", global::www.roskazna.ru.eb.domain.common.applied.tkpp.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> datereg {
            get {
                XElement x = this.GetElement(XName.Get("datereg", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("datereg", ""), value, "datereg", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, name, shortname?, okopf, inn, regreasoncode, datereg?, OKVED?)
        /// </para>
        /// </summary>
        public string OKVED {
            get {
                XElement x = this.GetElement(XName.Get("OKVED", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("OKVED", ""), value, "OKVED", global::www.roskazna.ru.eb.domain.common.applied.tName8000.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepreginsttninfo_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepreginsttninfo_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("shortname", ""), typeof(string));
            localElementDictionary.Add(XName.Get("okopf", ""), typeof(string));
            localElementDictionary.Add(XName.Get("inn", ""), typeof(string));
            localElementDictionary.Add(XName.Get("regreasoncode", ""), typeof(string));
            localElementDictionary.Add(XName.Get("datereg", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("OKVED", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
    /// </para>
    /// </summary>
    public partial class tdepregistry_la_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_la_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_la_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_la_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LglAct_Knd", "")), new NamedContentModelEntity(XName.Get("LglAct_LANumber", "")), new NamedContentModelEntity(XName.Get("LglAct_Name", "")), new NamedContentModelEntity(XName.Get("LglAct_ApprovedBy", "")), new NamedContentModelEntity(XName.Get("LglAct_EffectiveFrom", "")), new NamedContentModelEntity(XName.Get("LglAct_ApprvdAt", "")), new NamedContentModelEntity(XName.Get("dtend", "")), new NamedContentModelEntity(XName.Get("MJnumber", "")), new NamedContentModelEntity(XName.Get("MJregdate", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public tdepregistry_la_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public string LglAct_Knd {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_Knd", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_Knd", ""), value, "LglAct_Knd", global::www.roskazna.ru.eb.domain.common.applied.tName127.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public string LglAct_LANumber {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_LANumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_LANumber", ""), value, "LglAct_LANumber", global::www.roskazna.ru.eb.domain.common.applied.tLAnumber.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public string LglAct_Name {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_Name", ""), value, "LglAct_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public string LglAct_ApprovedBy {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_ApprovedBy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_ApprovedBy", ""), value, "LglAct_ApprovedBy", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> LglAct_EffectiveFrom {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_EffectiveFrom", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_EffectiveFrom", ""), value, "LglAct_EffectiveFrom", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> LglAct_ApprvdAt {
            get {
                XElement x = this.GetElement(XName.Get("LglAct_ApprvdAt", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("LglAct_ApprvdAt", ""), value, "LglAct_ApprvdAt", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> dtend {
            get {
                XElement x = this.GetElement(XName.Get("dtend", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("dtend", ""), value, "dtend", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public string MJnumber {
            get {
                XElement x = this.GetElement(XName.Get("MJnumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MJnumber", ""), value, "MJnumber", global::www.roskazna.ru.eb.domain.common.applied.tLAnumber.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LglAct_Knd?, LglAct_LANumber?, LglAct_Name, LglAct_ApprovedBy?, LglAct_EffectiveFrom?, LglAct_ApprvdAt?, dtend?, MJnumber?, MJregdate?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> MJregdate {
            get {
                XElement x = this.GetElement(XName.Get("MJregdate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("MJregdate", ""), value, "MJregdate", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_la_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_la_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("LglAct_Knd", ""), typeof(string));
            localElementDictionary.Add(XName.Get("LglAct_LANumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("LglAct_Name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("LglAct_ApprovedBy", ""), typeof(string));
            localElementDictionary.Add(XName.Get("LglAct_EffectiveFrom", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("LglAct_ApprvdAt", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("dtend", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("MJnumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("MJregdate", ""), typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SvcPaid_GID?, SvcPaid_Code, SvcPaid_Name)
    /// </para>
    /// </summary>
    public partial class tdepregistry_paid_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_paid_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_paid_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_paid_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SvcPaid_GID", "")), new NamedContentModelEntity(XName.Get("SvcPaid_Code", "")), new NamedContentModelEntity(XName.Get("SvcPaid_Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SvcPaid_GID?, SvcPaid_Code, SvcPaid_Name)
        /// </para>
        /// </summary>
        public tdepregistry_paid_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SvcPaid_GID?, SvcPaid_Code, SvcPaid_Name)
        /// </para>
        /// </summary>
        public string SvcPaid_GID {
            get {
                XElement x = this.GetElement(XName.Get("SvcPaid_GID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcPaid_GID", ""), value, "SvcPaid_GID", global::www.roskazna.ru.eb.domain.common.applied.tGID.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SvcPaid_GID?, SvcPaid_Code, SvcPaid_Name)
        /// </para>
        /// </summary>
        public string SvcPaid_Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcPaid_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcPaid_Code", ""), value, "SvcPaid_Code", global::www.roskazna.ru.eb.domain.common.applied.tPaidcode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SvcPaid_GID?, SvcPaid_Code, SvcPaid_Name)
        /// </para>
        /// </summary>
        public string SvcPaid_Name {
            get {
                XElement x = this.GetElement(XName.Get("SvcPaid_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcPaid_Name", ""), value, "SvcPaid_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_127.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_paid_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_paid_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SvcPaid_GID", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcPaid_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcPaid_Name", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GID?, Code, Name)
    /// </para>
    /// </summary>
    public partial class tDEPREGISTRY_IK_ITEM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tDEPREGISTRY_IK_ITEM(XElement xe) { return XTypedServices.ToXTypedElement<tDEPREGISTRY_IK_ITEM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tDEPREGISTRY_IK_ITEM() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GID", "")), new NamedContentModelEntity(XName.Get("Code", "")), new NamedContentModelEntity(XName.Get("Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GID?, Code, Name)
        /// </para>
        /// </summary>
        public tDEPREGISTRY_IK_ITEM() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GID?, Code, Name)
        /// </para>
        /// </summary>
        public string GID {
            get {
                XElement x = this.GetElement(XName.Get("GID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("GID", ""), value, "GID", global::www.roskazna.ru.eb.domain.common.applied.tGID.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GID?, Code, Name)
        /// </para>
        /// </summary>
        public string Code {
            get {
                XElement x = this.GetElement(XName.Get("Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Code", ""), value, "Code", global::www.roskazna.ru.eb.domain.common.applied.tInstitutionkindcode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GID?, Code, Name)
        /// </para>
        /// </summary>
        public string Name {
            get {
                XElement x = this.GetElement(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Name", ""), value, "Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tDEPREGISTRY_IK_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tDEPREGISTRY_IK_ITEM>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GID", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Name", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_okpd_ITEM*)
    /// </para>
    /// </summary>
    public partial class tdepregistry_okpd : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_okpd_ITEM> depregistry_okpd_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_okpd(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_okpd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_okpd() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_okpd_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_okpd_ITEM*)
        /// </para>
        /// </summary>
        public tdepregistry_okpd() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_okpd_ITEM*)
        /// </para>
        /// </summary>
        public IList<tdepregistry_okpd_ITEM> depregistry_okpd_ITEM {
            get {
                if ((this.depregistry_okpd_ITEMField == null)) {
                    this.depregistry_okpd_ITEMField = new XTypedList<tdepregistry_okpd_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_okpd_ITEM", ""));
                }
                return this.depregistry_okpd_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_okpd_ITEMField = null;
                }
                else {
                    if ((this.depregistry_okpd_ITEMField == null)) {
                        this.depregistry_okpd_ITEMField = XTypedList<tdepregistry_okpd_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_okpd_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_okpd_ITEM>(this.depregistry_okpd_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_okpd", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_okpd>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_okpd_ITEM", ""), typeof(tdepregistry_okpd_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_okved_ITEM*)
    /// </para>
    /// </summary>
    public partial class tdepregistry_okved : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_okved_ITEM> depregistry_okved_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_okved(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_okved>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_okved() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_okved_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_okved_ITEM*)
        /// </para>
        /// </summary>
        public tdepregistry_okved() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_okved_ITEM*)
        /// </para>
        /// </summary>
        public IList<tdepregistry_okved_ITEM> depregistry_okved_ITEM {
            get {
                if ((this.depregistry_okved_ITEMField == null)) {
                    this.depregistry_okved_ITEMField = new XTypedList<tdepregistry_okved_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_okved_ITEM", ""));
                }
                return this.depregistry_okved_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_okved_ITEMField = null;
                }
                else {
                    if ((this.depregistry_okved_ITEMField == null)) {
                        this.depregistry_okved_ITEMField = XTypedList<tdepregistry_okved_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_okved_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_okved_ITEM>(this.depregistry_okved_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_okved", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_okved>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_okved_ITEM", ""), typeof(tdepregistry_okved_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_conscat_ITEM*)
    /// </para>
    /// </summary>
    public partial class tdepregistry_conscat : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_conscat_ITEM> depregistry_conscat_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_conscat(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_conscat>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_conscat() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_conscat_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_conscat_ITEM*)
        /// </para>
        /// </summary>
        public tdepregistry_conscat() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_conscat_ITEM*)
        /// </para>
        /// </summary>
        public IList<tdepregistry_conscat_ITEM> depregistry_conscat_ITEM {
            get {
                if ((this.depregistry_conscat_ITEMField == null)) {
                    this.depregistry_conscat_ITEMField = new XTypedList<tdepregistry_conscat_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_conscat_ITEM", ""));
                }
                return this.depregistry_conscat_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_conscat_ITEMField = null;
                }
                else {
                    if ((this.depregistry_conscat_ITEMField == null)) {
                        this.depregistry_conscat_ITEMField = XTypedList<tdepregistry_conscat_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_conscat_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_conscat_ITEM>(this.depregistry_conscat_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_conscat", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_conscat>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_conscat_ITEM", ""), typeof(tdepregistry_conscat_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_qind_ITEM*)
    /// </para>
    /// </summary>
    public partial class tdepregistry_qind : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_qind_ITEM> depregistry_qind_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_qind(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_qind>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_qind() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_qind_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_qind_ITEM*)
        /// </para>
        /// </summary>
        public tdepregistry_qind() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_qind_ITEM*)
        /// </para>
        /// </summary>
        public IList<tdepregistry_qind_ITEM> depregistry_qind_ITEM {
            get {
                if ((this.depregistry_qind_ITEMField == null)) {
                    this.depregistry_qind_ITEMField = new XTypedList<tdepregistry_qind_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_qind_ITEM", ""));
                }
                return this.depregistry_qind_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_qind_ITEMField = null;
                }
                else {
                    if ((this.depregistry_qind_ITEMField == null)) {
                        this.depregistry_qind_ITEMField = XTypedList<tdepregistry_qind_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_qind_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_qind_ITEM>(this.depregistry_qind_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_qind", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_qind>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_qind_ITEM", ""), typeof(tdepregistry_qind_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_vind_ITEM+)
    /// </para>
    /// </summary>
    public partial class tdepregistry_vind : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_vind_ITEM> depregistry_vind_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_vind(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_vind>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_vind() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_vind_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_vind_ITEM+)
        /// </para>
        /// </summary>
        public tdepregistry_vind() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_vind_ITEM+)
        /// </para>
        /// </summary>
        public IList<tdepregistry_vind_ITEM> depregistry_vind_ITEM {
            get {
                if ((this.depregistry_vind_ITEMField == null)) {
                    this.depregistry_vind_ITEMField = new XTypedList<tdepregistry_vind_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_vind_ITEM", ""));
                }
                return this.depregistry_vind_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_vind_ITEMField = null;
                }
                else {
                    if ((this.depregistry_vind_ITEMField == null)) {
                        this.depregistry_vind_ITEMField = XTypedList<tdepregistry_vind_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_vind_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_vind_ITEM>(this.depregistry_vind_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_vind", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_vind>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_vind_ITEM", ""), typeof(tdepregistry_vind_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depreginsttninfo_ITEM+)
    /// </para>
    /// </summary>
    public partial class tdepreginsttninfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepreginsttninfo_ITEM> depreginsttninfo_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepreginsttninfo(XElement xe) { return XTypedServices.ToXTypedElement<tdepreginsttninfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepreginsttninfo() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depreginsttninfo_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depreginsttninfo_ITEM+)
        /// </para>
        /// </summary>
        public tdepreginsttninfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depreginsttninfo_ITEM+)
        /// </para>
        /// </summary>
        public IList<tdepreginsttninfo_ITEM> depreginsttninfo_ITEM {
            get {
                if ((this.depreginsttninfo_ITEMField == null)) {
                    this.depreginsttninfo_ITEMField = new XTypedList<tdepreginsttninfo_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depreginsttninfo_ITEM", ""));
                }
                return this.depreginsttninfo_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depreginsttninfo_ITEMField = null;
                }
                else {
                    if ((this.depreginsttninfo_ITEMField == null)) {
                        this.depreginsttninfo_ITEMField = XTypedList<tdepreginsttninfo_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depreginsttninfo_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepreginsttninfo_ITEM>(this.depreginsttninfo_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepreginsttninfo", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepreginsttninfo>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depreginsttninfo_ITEM", ""), typeof(tdepreginsttninfo_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_la_ITEM*)
    /// </para>
    /// </summary>
    public partial class tdepregistry_la : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_la_ITEM> depregistry_la_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_la(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_la>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_la() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_la_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_la_ITEM*)
        /// </para>
        /// </summary>
        public tdepregistry_la() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_la_ITEM*)
        /// </para>
        /// </summary>
        public IList<tdepregistry_la_ITEM> depregistry_la_ITEM {
            get {
                if ((this.depregistry_la_ITEMField == null)) {
                    this.depregistry_la_ITEMField = new XTypedList<tdepregistry_la_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_la_ITEM", ""));
                }
                return this.depregistry_la_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_la_ITEMField = null;
                }
                else {
                    if ((this.depregistry_la_ITEMField == null)) {
                        this.depregistry_la_ITEMField = XTypedList<tdepregistry_la_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_la_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_la_ITEM>(this.depregistry_la_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_la", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_la>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_la_ITEM", ""), typeof(tdepregistry_la_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (depregistry_paid_ITEM+)
    /// </para>
    /// </summary>
    public partial class tdepregistry_paid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tdepregistry_paid_ITEM> depregistry_paid_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tdepregistry_paid(XElement xe) { return XTypedServices.ToXTypedElement<tdepregistry_paid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tdepregistry_paid() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("depregistry_paid_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (depregistry_paid_ITEM+)
        /// </para>
        /// </summary>
        public tdepregistry_paid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (depregistry_paid_ITEM+)
        /// </para>
        /// </summary>
        public IList<tdepregistry_paid_ITEM> depregistry_paid_ITEM {
            get {
                if ((this.depregistry_paid_ITEMField == null)) {
                    this.depregistry_paid_ITEMField = new XTypedList<tdepregistry_paid_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("depregistry_paid_ITEM", ""));
                }
                return this.depregistry_paid_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.depregistry_paid_ITEMField = null;
                }
                else {
                    if ((this.depregistry_paid_ITEMField == null)) {
                        this.depregistry_paid_ITEMField = XTypedList<tdepregistry_paid_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("depregistry_paid_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tdepregistry_paid_ITEM>(this.depregistry_paid_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tdepregistry_paid", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tdepregistry_paid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("depregistry_paid_ITEM", ""), typeof(tdepregistry_paid_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DEPREGISTRY_IK_ITEM*)
    /// </para>
    /// </summary>
    public partial class tDEPREGISTRY_IK : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tDEPREGISTRY_IK_ITEM> DEPREGISTRY_IK_ITEMField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tDEPREGISTRY_IK(XElement xe) { return XTypedServices.ToXTypedElement<tDEPREGISTRY_IK>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tDEPREGISTRY_IK() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DEPREGISTRY_IK_ITEM", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DEPREGISTRY_IK_ITEM*)
        /// </para>
        /// </summary>
        public tDEPREGISTRY_IK() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DEPREGISTRY_IK_ITEM*)
        /// </para>
        /// </summary>
        public IList<tDEPREGISTRY_IK_ITEM> DEPREGISTRY_IK_ITEM {
            get {
                if ((this.DEPREGISTRY_IK_ITEMField == null)) {
                    this.DEPREGISTRY_IK_ITEMField = new XTypedList<tDEPREGISTRY_IK_ITEM>(this, LinqToXsdTypeManager.Instance, XName.Get("DEPREGISTRY_IK_ITEM", ""));
                }
                return this.DEPREGISTRY_IK_ITEMField;
            }
            set {
                if ((value == null)) {
                    this.DEPREGISTRY_IK_ITEMField = null;
                }
                else {
                    if ((this.DEPREGISTRY_IK_ITEMField == null)) {
                        this.DEPREGISTRY_IK_ITEMField = XTypedList<tDEPREGISTRY_IK_ITEM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DEPREGISTRY_IK_ITEM", ""));
                    }
                    else {
                        XTypedServices.SetList<tDEPREGISTRY_IK_ITEM>(this.DEPREGISTRY_IK_ITEMField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tDEPREGISTRY_IK", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tDEPREGISTRY_IK>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DEPREGISTRY_IK_ITEM", ""), typeof(tDEPREGISTRY_IK_ITEM));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Dictionary
    /// </para>
    /// <para>
    /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
    /// </para>
    /// </summary>
    public partial class tEPGU_SvcListDepReg : global::www.roskazna.ru.eb.domain.common.tFormular, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tEPGU_SvcListDepReg(XElement xe) { return XTypedServices.ToXTypedElement<tEPGU_SvcListDepReg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tEPGU_SvcListDepReg() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("extra-data", "")), new NamedContentModelEntity(XName.Get("regrnumber", "")), new NamedContentModelEntity(XName.Get("RegrNumber_1To42", "")), new NamedContentModelEntity(XName.Get("ProjectVersion", "")), new NamedContentModelEntity(XName.Get("EffectiveFrom", "")), new NamedContentModelEntity(XName.Get("EffectiveBefore", "")), new NamedContentModelEntity(XName.Get("inst_code", "")), new NamedContentModelEntity(XName.Get("name", "")), new NamedContentModelEntity(XName.Get("shortname", "")), new NamedContentModelEntity(XName.Get("ppocode", "")), new NamedContentModelEntity(XName.Get("pponame", "")), new NamedContentModelEntity(XName.Get("okopf", "")), new NamedContentModelEntity(XName.Get("inn", "")), new NamedContentModelEntity(XName.Get("regreasoncode", "")), new NamedContentModelEntity(XName.Get("datereg", "")), new NamedContentModelEntity(XName.Get("SvcRegrNumber", "")), new NamedContentModelEntity(XName.Get("SvcKind_Code", "")), new NamedContentModelEntity(XName.Get("SvcKind_Name", "")), new NamedContentModelEntity(XName.Get("Belong210FL", "")), new NamedContentModelEntity(XName.Get("NcsrlyBelong210FL", "")), new NamedContentModelEntity(XName.Get("ActDomnCode", "")), new NamedContentModelEntity(XName.Get("ActDomnName", "")), new NamedContentModelEntity(XName.Get("SvcCnts1Code", "")), new NamedContentModelEntity(XName.Get("SvcCnts2Code", "")), new NamedContentModelEntity(XName.Get("SvcCnts3Code", "")), new NamedContentModelEntity(XName.Get("ServiceContentsName1", "")), new NamedContentModelEntity(XName.Get("ServiceContentsName2", "")), new NamedContentModelEntity(XName.Get("ServiceContentsName3", "")), new NamedContentModelEntity(XName.Get("SvcTerms1Code", "")), new NamedContentModelEntity(XName.Get("SvcTerms2Code", "")), new NamedContentModelEntity(XName.Get("ServiceTermsName1", "")), new NamedContentModelEntity(XName.Get("ServiceTermsName2", "")), new NamedContentModelEntity(XName.Get("Name_Code", "")), new NamedContentModelEntity(XName.Get("Name_Name", "")), new NamedContentModelEntity(XName.Get("SvcCnts1CodeVal", "")), new NamedContentModelEntity(XName.Get("SvcCnts2CodeVal", "")), new NamedContentModelEntity(XName.Get("SvcCnts3CodeVal", "")), new NamedContentModelEntity(XName.Get("SvcCntsName1Val", "")), new NamedContentModelEntity(XName.Get("SvcCntsName2Val", "")), new NamedContentModelEntity(XName.Get("SvcCntsName3Val", "")), new NamedContentModelEntity(XName.Get("SvcTerms1CodeVal", "")), new NamedContentModelEntity(XName.Get("SvcTerms2CodeVal", "")), new NamedContentModelEntity(XName.Get("SvcTermsName1Val", "")), new NamedContentModelEntity(XName.Get("SvcTermsName2Val", "")), new NamedContentModelEntity(XName.Get("BPGUEffFrom", "")), new NamedContentModelEntity(XName.Get("BPGUEffBefore", "")), new NamedContentModelEntity(XName.Get("isactual", "")), new NamedContentModelEntity(XName.Get("GUID", "")), new NamedContentModelEntity(XName.Get("depregistry_okpd", "")), new NamedContentModelEntity(XName.Get("depregistry_okved", "")), new NamedContentModelEntity(XName.Get("depregistry_conscat", "")), new NamedContentModelEntity(XName.Get("depregistry_qind", "")), new NamedContentModelEntity(XName.Get("depregistry_vind", "")), new NamedContentModelEntity(XName.Get("depreginsttninfo", "")), new NamedContentModelEntity(XName.Get("depregistry_la", "")), new NamedContentModelEntity(XName.Get("depregistry_paid", "")), new NamedContentModelEntity(XName.Get("DEPREGISTRY_IK", "")), new NamedContentModelEntity(XName.Get("DICT_BASE", "")));
        }
        
        /// <summary>
        /// <para>
        /// Dictionary
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tEPGU_SvcListDepReg() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string regrnumber {
            get {
                XElement x = this.GetElement(XName.Get("regrnumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regrnumber", ""), value, "regrnumber", global::www.roskazna.ru.eb.domain.common.applied.tRegrNumberVPGU45.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string RegrNumber_1To42 {
            get {
                XElement x = this.GetElement(XName.Get("RegrNumber_1To42", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("RegrNumber_1To42", ""), value, "RegrNumber_1To42", global::www.roskazna.ru.eb.domain.common.applied.tRegrNumberVPGU42.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ProjectVersion {
            get {
                XElement x = this.GetElement(XName.Get("ProjectVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ProjectVersion", ""), value, "ProjectVersion", global::www.roskazna.ru.eb.domain.common.applied.tProjVersion.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.DateTime EffectiveFrom {
            get {
                XElement x = this.GetElement(XName.Get("EffectiveFrom", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("EffectiveFrom", ""), value, "EffectiveFrom", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> EffectiveBefore {
            get {
                XElement x = this.GetElement(XName.Get("EffectiveBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("EffectiveBefore", ""), value, "EffectiveBefore", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string inst_code {
            get {
                XElement x = this.GetElement(XName.Get("inst_code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inst_code", ""), value, "inst_code", global::www.roskazna.ru.eb.domain.common.applied.tInstCode19.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string name {
            get {
                XElement x = this.GetElement(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("name", ""), value, "name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string shortname {
            get {
                XElement x = this.GetElement(XName.Get("shortname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("shortname", ""), value, "shortname", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ppocode {
            get {
                XElement x = this.GetElement(XName.Get("ppocode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ppocode", ""), value, "ppocode", global::www.roskazna.ru.eb.domain.common.applied.toktmo.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string pponame {
            get {
                XElement x = this.GetElement(XName.Get("pponame", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("pponame", ""), value, "pponame", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string okopf {
            get {
                XElement x = this.GetElement(XName.Get("okopf", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("okopf", ""), value, "okopf", global::www.roskazna.ru.eb.domain.common.applied.tokopf.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                XElement x = this.GetElement(XName.Get("inn", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("inn", ""), value, "inn", global::www.roskazna.ru.eb.domain.common.applied.tinn.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string regreasoncode {
            get {
                XElement x = this.GetElement(XName.Get("regreasoncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("regreasoncode", ""), value, "regreasoncode", global::www.roskazna.ru.eb.domain.common.applied.tkpp.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> datereg {
            get {
                XElement x = this.GetElement(XName.Get("datereg", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("datereg", ""), value, "datereg", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcRegrNumber {
            get {
                XElement x = this.GetElement(XName.Get("SvcRegrNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcRegrNumber", ""), value, "SvcRegrNumber", global::www.roskazna.ru.eb.domain.common.applied.tRegrNumberEPGU23.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcKind_Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcKind_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcKind_Code", ""), value, "SvcKind_Code", global::www.roskazna.ru.eb.domain.common.applied.tCode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcKind_Name {
            get {
                XElement x = this.GetElement(XName.Get("SvcKind_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcKind_Name", ""), value, "SvcKind_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public bool Belong210FL {
            get {
                XElement x = this.GetElement(XName.Get("Belong210FL", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Belong210FL", ""), value, "Belong210FL", global::www.roskazna.ru.eb.domain.common.applied.tLogical.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public bool NcsrlyBelong210FL {
            get {
                XElement x = this.GetElement(XName.Get("NcsrlyBelong210FL", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("NcsrlyBelong210FL", ""), value, "NcsrlyBelong210FL", global::www.roskazna.ru.eb.domain.common.applied.tLogical.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ActDomnCode {
            get {
                XElement x = this.GetElement(XName.Get("ActDomnCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ActDomnCode", ""), value, "ActDomnCode", global::www.roskazna.ru.eb.domain.common.applied.tActivitydomaincode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ActDomnName {
            get {
                XElement x = this.GetElement(XName.Get("ActDomnName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ActDomnName", ""), value, "ActDomnName", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts1Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts1Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts1Code", ""), value, "SvcCnts1Code", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts2Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts2Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts2Code", ""), value, "SvcCnts2Code", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts3Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts3Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts3Code", ""), value, "SvcCnts3Code", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName1 {
            get {
                XElement x = this.GetElement(XName.Get("ServiceContentsName1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ServiceContentsName1", ""), value, "ServiceContentsName1", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName2 {
            get {
                XElement x = this.GetElement(XName.Get("ServiceContentsName2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ServiceContentsName2", ""), value, "ServiceContentsName2", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName3 {
            get {
                XElement x = this.GetElement(XName.Get("ServiceContentsName3", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ServiceContentsName3", ""), value, "ServiceContentsName3", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms1Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcTerms1Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTerms1Code", ""), value, "SvcTerms1Code", global::www.roskazna.ru.eb.domain.common.applied.tTermsofservicecode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms2Code {
            get {
                XElement x = this.GetElement(XName.Get("SvcTerms2Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTerms2Code", ""), value, "SvcTerms2Code", global::www.roskazna.ru.eb.domain.common.applied.tTermsofservicecode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceTermsName1 {
            get {
                XElement x = this.GetElement(XName.Get("ServiceTermsName1", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ServiceTermsName1", ""), value, "ServiceTermsName1", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceTermsName2 {
            get {
                XElement x = this.GetElement(XName.Get("ServiceTermsName2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("ServiceTermsName2", ""), value, "ServiceTermsName2", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string Name_Code {
            get {
                XElement x = this.GetElement(XName.Get("Name_Code", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Name_Code", ""), value, "Name_Code", global::www.roskazna.ru.eb.domain.common.applied.tServicenamecode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string Name_Name {
            get {
                XElement x = this.GetElement(XName.Get("Name_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Name_Name", ""), value, "Name_Name", global::www.roskazna.ru.eb.domain.common.applied.tText1_2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts1CodeVal {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts1CodeVal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts1CodeVal", ""), value, "SvcCnts1CodeVal", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts2CodeVal {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts2CodeVal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts2CodeVal", ""), value, "SvcCnts2CodeVal", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts3CodeVal {
            get {
                XElement x = this.GetElement(XName.Get("SvcCnts3CodeVal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCnts3CodeVal", ""), value, "SvcCnts3CodeVal", global::www.roskazna.ru.eb.domain.common.applied.tcontentscode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName1Val {
            get {
                XElement x = this.GetElement(XName.Get("SvcCntsName1Val", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCntsName1Val", ""), value, "SvcCntsName1Val", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName2Val {
            get {
                XElement x = this.GetElement(XName.Get("SvcCntsName2Val", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCntsName2Val", ""), value, "SvcCntsName2Val", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName3Val {
            get {
                XElement x = this.GetElement(XName.Get("SvcCntsName3Val", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcCntsName3Val", ""), value, "SvcCntsName3Val", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms1CodeVal {
            get {
                XElement x = this.GetElement(XName.Get("SvcTerms1CodeVal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTerms1CodeVal", ""), value, "SvcTerms1CodeVal", global::www.roskazna.ru.eb.domain.common.applied.tServicetermsvaluecode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms2CodeVal {
            get {
                XElement x = this.GetElement(XName.Get("SvcTerms2CodeVal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTerms2CodeVal", ""), value, "SvcTerms2CodeVal", global::www.roskazna.ru.eb.domain.common.applied.tServicetermsvaluecode.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTermsName1Val {
            get {
                XElement x = this.GetElement(XName.Get("SvcTermsName1Val", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTermsName1Val", ""), value, "SvcTermsName1Val", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTermsName2Val {
            get {
                XElement x = this.GetElement(XName.Get("SvcTermsName2Val", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SvcTermsName2Val", ""), value, "SvcTermsName2Val", global::www.roskazna.ru.eb.domain.common.applied.tName2000.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.DateTime BPGUEffFrom {
            get {
                XElement x = this.GetElement(XName.Get("BPGUEffFrom", ""));
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("BPGUEffFrom", ""), value, "BPGUEffFrom", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> BPGUEffBefore {
            get {
                XElement x = this.GetElement(XName.Get("BPGUEffBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("BPGUEffBefore", ""), value, "BPGUEffBefore", global::www.roskazna.ru.eb.domain.common.applied.tDateType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> isactual {
            get {
                XElement x = this.GetElement(XName.Get("isactual", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("isactual", ""), value, "isactual", global::www.roskazna.ru.eb.domain.common.applied.tLogical.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string GUID {
            get {
                XElement x = this.GetElement(XName.Get("GUID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("GUID", ""), value, "GUID", global::www.roskazna.ru.eb.domain.common.applied.tText1_127.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_okpd depregistry_okpd {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_okpd", ""));
                return ((tdepregistry_okpd)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_okpd", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_okved depregistry_okved {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_okved", ""));
                return ((tdepregistry_okved)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_okved", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_conscat depregistry_conscat {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_conscat", ""));
                return ((tdepregistry_conscat)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_conscat", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_qind depregistry_qind {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_qind", ""));
                return ((tdepregistry_qind)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_qind", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_vind depregistry_vind {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_vind", ""));
                return ((tdepregistry_vind)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_vind", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepreginsttninfo depreginsttninfo {
            get {
                XElement x = this.GetElement(XName.Get("depreginsttninfo", ""));
                return ((tdepreginsttninfo)(x));
            }
            set {
                this.SetElement(XName.Get("depreginsttninfo", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_la depregistry_la {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_la", ""));
                return ((tdepregistry_la)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_la", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_paid depregistry_paid {
            get {
                XElement x = this.GetElement(XName.Get("depregistry_paid", ""));
                return ((tdepregistry_paid)(x));
            }
            set {
                this.SetElement(XName.Get("depregistry_paid", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tDEPREGISTRY_IK DEPREGISTRY_IK {
            get {
                XElement x = this.GetElement(XName.Get("DEPREGISTRY_IK", ""));
                return ((tDEPREGISTRY_IK)(x));
            }
            set {
                this.SetElement(XName.Get("DEPREGISTRY_IK", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tDICT_BASE DICT_BASE {
            get {
                XElement x = this.GetElement(XName.Get("DICT_BASE", ""));
                return ((tDICT_BASE)(x));
            }
            set {
                this.SetElement(XName.Get("DICT_BASE", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tEPGU_SvcListDepReg", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tEPGU_SvcListDepReg>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("extra-data", ""), typeof(www.roskazna.ru.eb.domain.common.extraData));
            localElementDictionary.Add(XName.Get("regrnumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("RegrNumber_1To42", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ProjectVersion", ""), typeof(string));
            localElementDictionary.Add(XName.Get("EffectiveFrom", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("EffectiveBefore", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("inst_code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("shortname", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ppocode", ""), typeof(string));
            localElementDictionary.Add(XName.Get("pponame", ""), typeof(string));
            localElementDictionary.Add(XName.Get("okopf", ""), typeof(string));
            localElementDictionary.Add(XName.Get("inn", ""), typeof(string));
            localElementDictionary.Add(XName.Get("regreasoncode", ""), typeof(string));
            localElementDictionary.Add(XName.Get("datereg", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("SvcRegrNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcKind_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcKind_Name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Belong210FL", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("NcsrlyBelong210FL", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("ActDomnCode", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ActDomnName", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts1Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts2Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts3Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ServiceContentsName1", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ServiceContentsName2", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ServiceContentsName3", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTerms1Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTerms2Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ServiceTermsName1", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ServiceTermsName2", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Name_Code", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Name_Name", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts1CodeVal", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts2CodeVal", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCnts3CodeVal", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCntsName1Val", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCntsName2Val", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcCntsName3Val", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTerms1CodeVal", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTerms2CodeVal", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTermsName1Val", ""), typeof(string));
            localElementDictionary.Add(XName.Get("SvcTermsName2Val", ""), typeof(string));
            localElementDictionary.Add(XName.Get("BPGUEffFrom", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("BPGUEffBefore", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("isactual", ""), typeof(bool));
            localElementDictionary.Add(XName.Get("GUID", ""), typeof(string));
            localElementDictionary.Add(XName.Get("depregistry_okpd", ""), typeof(tdepregistry_okpd));
            localElementDictionary.Add(XName.Get("depregistry_okved", ""), typeof(tdepregistry_okved));
            localElementDictionary.Add(XName.Get("depregistry_conscat", ""), typeof(tdepregistry_conscat));
            localElementDictionary.Add(XName.Get("depregistry_qind", ""), typeof(tdepregistry_qind));
            localElementDictionary.Add(XName.Get("depregistry_vind", ""), typeof(tdepregistry_vind));
            localElementDictionary.Add(XName.Get("depreginsttninfo", ""), typeof(tdepreginsttninfo));
            localElementDictionary.Add(XName.Get("depregistry_la", ""), typeof(tdepregistry_la));
            localElementDictionary.Add(XName.Get("depregistry_paid", ""), typeof(tdepregistry_paid));
            localElementDictionary.Add(XName.Get("DEPREGISTRY_IK", ""), typeof(tDEPREGISTRY_IK));
            localElementDictionary.Add(XName.Get("DICT_BASE", ""), typeof(tDICT_BASE));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Dictionary
    /// </para>
    /// <para>
    /// Regular expression: (extradata?)
    /// </para>
    /// </summary>
    public partial class tDICT_BASE : global::www.roskazna.ru.eb.domain.common.tFormular, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator tDICT_BASE(XElement xe) { return XTypedServices.ToXTypedElement<tDICT_BASE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tDICT_BASE() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("extra-data", "")));
        }
        
        /// <summary>
        /// <para>
        /// Dictionary
        /// </para>
        /// <para>
        /// Regular expression: (extradata?)
        /// </para>
        /// </summary>
        public tDICT_BASE() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tDICT_BASE", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tDICT_BASE>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("extra-data", ""), typeof(www.roskazna.ru.eb.domain.common.extraData));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Dictionary
    /// </para>
    /// </summary>
    public partial class EPGU_SvcListDepReg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private tEPGU_SvcListDepReg ContentField;
        
         public static explicit operator EPGU_SvcListDepReg(XElement xe) { return XTypedServices.ToXTypedElement<EPGU_SvcListDepReg, tEPGU_SvcListDepReg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Dictionary
        /// </para>
        /// </summary>
        public EPGU_SvcListDepReg() {
            SetInnerType(new tEPGU_SvcListDepReg());
        }
        
        /// <summary>
        /// <para>
        /// Dictionary
        /// </para>
        /// </summary>
        public EPGU_SvcListDepReg(tEPGU_SvcListDepReg content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public tEPGU_SvcListDepReg Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string regrnumber {
            get {
                return this.ContentField.regrnumber;
            }
            set {
                this.ContentField.regrnumber = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string RegrNumber_1To42 {
            get {
                return this.ContentField.RegrNumber_1To42;
            }
            set {
                this.ContentField.RegrNumber_1To42 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ProjectVersion {
            get {
                return this.ContentField.ProjectVersion;
            }
            set {
                this.ContentField.ProjectVersion = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.DateTime EffectiveFrom {
            get {
                return this.ContentField.EffectiveFrom;
            }
            set {
                this.ContentField.EffectiveFrom = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> EffectiveBefore {
            get {
                return this.ContentField.EffectiveBefore;
            }
            set {
                this.ContentField.EffectiveBefore = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string inst_code {
            get {
                return this.ContentField.inst_code;
            }
            set {
                this.ContentField.inst_code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string shortname {
            get {
                return this.ContentField.shortname;
            }
            set {
                this.ContentField.shortname = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ppocode {
            get {
                return this.ContentField.ppocode;
            }
            set {
                this.ContentField.ppocode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string pponame {
            get {
                return this.ContentField.pponame;
            }
            set {
                this.ContentField.pponame = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string okopf {
            get {
                return this.ContentField.okopf;
            }
            set {
                this.ContentField.okopf = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string inn {
            get {
                return this.ContentField.inn;
            }
            set {
                this.ContentField.inn = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string regreasoncode {
            get {
                return this.ContentField.regreasoncode;
            }
            set {
                this.ContentField.regreasoncode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> datereg {
            get {
                return this.ContentField.datereg;
            }
            set {
                this.ContentField.datereg = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcRegrNumber {
            get {
                return this.ContentField.SvcRegrNumber;
            }
            set {
                this.ContentField.SvcRegrNumber = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcKind_Code {
            get {
                return this.ContentField.SvcKind_Code;
            }
            set {
                this.ContentField.SvcKind_Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcKind_Name {
            get {
                return this.ContentField.SvcKind_Name;
            }
            set {
                this.ContentField.SvcKind_Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public bool Belong210FL {
            get {
                return this.ContentField.Belong210FL;
            }
            set {
                this.ContentField.Belong210FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public bool NcsrlyBelong210FL {
            get {
                return this.ContentField.NcsrlyBelong210FL;
            }
            set {
                this.ContentField.NcsrlyBelong210FL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ActDomnCode {
            get {
                return this.ContentField.ActDomnCode;
            }
            set {
                this.ContentField.ActDomnCode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ActDomnName {
            get {
                return this.ContentField.ActDomnName;
            }
            set {
                this.ContentField.ActDomnName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts1Code {
            get {
                return this.ContentField.SvcCnts1Code;
            }
            set {
                this.ContentField.SvcCnts1Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts2Code {
            get {
                return this.ContentField.SvcCnts2Code;
            }
            set {
                this.ContentField.SvcCnts2Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts3Code {
            get {
                return this.ContentField.SvcCnts3Code;
            }
            set {
                this.ContentField.SvcCnts3Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName1 {
            get {
                return this.ContentField.ServiceContentsName1;
            }
            set {
                this.ContentField.ServiceContentsName1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName2 {
            get {
                return this.ContentField.ServiceContentsName2;
            }
            set {
                this.ContentField.ServiceContentsName2 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceContentsName3 {
            get {
                return this.ContentField.ServiceContentsName3;
            }
            set {
                this.ContentField.ServiceContentsName3 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms1Code {
            get {
                return this.ContentField.SvcTerms1Code;
            }
            set {
                this.ContentField.SvcTerms1Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms2Code {
            get {
                return this.ContentField.SvcTerms2Code;
            }
            set {
                this.ContentField.SvcTerms2Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceTermsName1 {
            get {
                return this.ContentField.ServiceTermsName1;
            }
            set {
                this.ContentField.ServiceTermsName1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string ServiceTermsName2 {
            get {
                return this.ContentField.ServiceTermsName2;
            }
            set {
                this.ContentField.ServiceTermsName2 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string Name_Code {
            get {
                return this.ContentField.Name_Code;
            }
            set {
                this.ContentField.Name_Code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string Name_Name {
            get {
                return this.ContentField.Name_Name;
            }
            set {
                this.ContentField.Name_Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts1CodeVal {
            get {
                return this.ContentField.SvcCnts1CodeVal;
            }
            set {
                this.ContentField.SvcCnts1CodeVal = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts2CodeVal {
            get {
                return this.ContentField.SvcCnts2CodeVal;
            }
            set {
                this.ContentField.SvcCnts2CodeVal = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCnts3CodeVal {
            get {
                return this.ContentField.SvcCnts3CodeVal;
            }
            set {
                this.ContentField.SvcCnts3CodeVal = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName1Val {
            get {
                return this.ContentField.SvcCntsName1Val;
            }
            set {
                this.ContentField.SvcCntsName1Val = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName2Val {
            get {
                return this.ContentField.SvcCntsName2Val;
            }
            set {
                this.ContentField.SvcCntsName2Val = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcCntsName3Val {
            get {
                return this.ContentField.SvcCntsName3Val;
            }
            set {
                this.ContentField.SvcCntsName3Val = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms1CodeVal {
            get {
                return this.ContentField.SvcTerms1CodeVal;
            }
            set {
                this.ContentField.SvcTerms1CodeVal = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTerms2CodeVal {
            get {
                return this.ContentField.SvcTerms2CodeVal;
            }
            set {
                this.ContentField.SvcTerms2CodeVal = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTermsName1Val {
            get {
                return this.ContentField.SvcTermsName1Val;
            }
            set {
                this.ContentField.SvcTermsName1Val = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string SvcTermsName2Val {
            get {
                return this.ContentField.SvcTermsName2Val;
            }
            set {
                this.ContentField.SvcTermsName2Val = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.DateTime BPGUEffFrom {
            get {
                return this.ContentField.BPGUEffFrom;
            }
            set {
                this.ContentField.BPGUEffFrom = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> BPGUEffBefore {
            get {
                return this.ContentField.BPGUEffBefore;
            }
            set {
                this.ContentField.BPGUEffBefore = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public System.Nullable<bool> isactual {
            get {
                return this.ContentField.isactual;
            }
            set {
                this.ContentField.isactual = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public string GUID {
            get {
                return this.ContentField.GUID;
            }
            set {
                this.ContentField.GUID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_okpd depregistry_okpd {
            get {
                return this.ContentField.depregistry_okpd;
            }
            set {
                this.ContentField.depregistry_okpd = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_okved depregistry_okved {
            get {
                return this.ContentField.depregistry_okved;
            }
            set {
                this.ContentField.depregistry_okved = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_conscat depregistry_conscat {
            get {
                return this.ContentField.depregistry_conscat;
            }
            set {
                this.ContentField.depregistry_conscat = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_qind depregistry_qind {
            get {
                return this.ContentField.depregistry_qind;
            }
            set {
                this.ContentField.depregistry_qind = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_vind depregistry_vind {
            get {
                return this.ContentField.depregistry_vind;
            }
            set {
                this.ContentField.depregistry_vind = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepreginsttninfo depreginsttninfo {
            get {
                return this.ContentField.depreginsttninfo;
            }
            set {
                this.ContentField.depreginsttninfo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_la depregistry_la {
            get {
                return this.ContentField.depregistry_la;
            }
            set {
                this.ContentField.depregistry_la = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tdepregistry_paid depregistry_paid {
            get {
                return this.ContentField.depregistry_paid;
            }
            set {
                this.ContentField.depregistry_paid = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tDEPREGISTRY_IK DEPREGISTRY_IK {
            get {
                return this.ContentField.DEPREGISTRY_IK;
            }
            set {
                this.ContentField.DEPREGISTRY_IK = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (extradata?, regrnumber, RegrNumber_1To42, ProjectVersion?, EffectiveFrom, EffectiveBefore?, inst_code, name, shortname?, ppocode?, pponame?, okopf, inn, regreasoncode, datereg?, SvcRegrNumber, SvcKind_Code, SvcKind_Name, Belong210FL, NcsrlyBelong210FL, ActDomnCode, ActDomnName, SvcCnts1Code?, SvcCnts2Code?, SvcCnts3Code?, ServiceContentsName1?, ServiceContentsName2?, ServiceContentsName3?, SvcTerms1Code?, SvcTerms2Code?, ServiceTermsName1?, ServiceTermsName2?, Name_Code, Name_Name, SvcCnts1CodeVal?, SvcCnts2CodeVal?, SvcCnts3CodeVal?, SvcCntsName1Val?, SvcCntsName2Val?, SvcCntsName3Val?, SvcTerms1CodeVal?, SvcTerms2CodeVal?, SvcTermsName1Val?, SvcTermsName2Val?, BPGUEffFrom, BPGUEffBefore?, isactual?, GUID, depregistry_okpd?, depregistry_okved?, depregistry_conscat?, depregistry_qind?, depregistry_vind, depreginsttninfo, depregistry_la?, depregistry_paid, DEPREGISTRY_IK?, DICT_BASE?)
        /// </para>
        /// </summary>
        public tDICT_BASE DICT_BASE {
            get {
                return this.ContentField.DICT_BASE;
            }
            set {
                this.ContentField.DICT_BASE = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EPGU_SvcListDepReg", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EPGU_SvcListDepReg Load(string xmlFile) {
            return XTypedServices.Load<EPGU_SvcListDepReg, tEPGU_SvcListDepReg>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EPGU_SvcListDepReg Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EPGU_SvcListDepReg, tEPGU_SvcListDepReg>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EPGU_SvcListDepReg Parse(string xml) {
            return XTypedServices.Parse<EPGU_SvcListDepReg, tEPGU_SvcListDepReg>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new EPGU_SvcListDepReg(((tEPGU_SvcListDepReg)(this.Content.Clone())));
        }
        
        private void SetInnerType(tEPGU_SvcListDepReg ContentField) {
            this.ContentField = ((tEPGU_SvcListDepReg)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("tdepregistry_okpd_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_okpd_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_okved_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_okved_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_conscat_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_conscat_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_qind_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_qind_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_vind_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_vind_ITEM));
            typeDictionary.Add(XName.Get("tdepreginsttninfo_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepreginsttninfo_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_la_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_la_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_paid_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_paid_ITEM));
            typeDictionary.Add(XName.Get("tDEPREGISTRY_IK_ITEM", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tDEPREGISTRY_IK_ITEM));
            typeDictionary.Add(XName.Get("tdepregistry_okpd", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_okpd));
            typeDictionary.Add(XName.Get("tdepregistry_okved", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_okved));
            typeDictionary.Add(XName.Get("tdepregistry_conscat", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_conscat));
            typeDictionary.Add(XName.Get("tdepregistry_qind", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_qind));
            typeDictionary.Add(XName.Get("tdepregistry_vind", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_vind));
            typeDictionary.Add(XName.Get("tdepreginsttninfo", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepreginsttninfo));
            typeDictionary.Add(XName.Get("tdepregistry_la", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_la));
            typeDictionary.Add(XName.Get("tdepregistry_paid", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tdepregistry_paid));
            typeDictionary.Add(XName.Get("tDEPREGISTRY_IK", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tDEPREGISTRY_IK));
            typeDictionary.Add(XName.Get("tEPGU_SvcListDepReg", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tEPGU_SvcListDepReg));
            typeDictionary.Add(XName.Get("tDICT_BASE", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tDICT_BASE));
            typeDictionary.Add(XName.Get("tFormular", "http://www.roskazna.ru/eb/domain/common"), typeof(global::www.roskazna.ru.eb.domain.common.tFormular));
            typeDictionary.Add(XName.Get("extraData", "http://www.roskazna.ru/eb/domain/common"), typeof(global::www.roskazna.ru.eb.domain.common.extraData));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("EPGU_SvcListDepReg", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular"), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.EPGU_SvcListDepReg));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.EPGU_SvcListDepReg), typeof(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.tEPGU_SvcListDepReg));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("EPGU_SvcListDepReg", "http://www.roskazna.ru/eb/domain/EPGU_SvcListDepReg/formular")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public EPGU_SvcListDepReg EPGU_SvcListDepReg {  get {return rootObject as EPGU_SvcListDepReg; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(EPGU_SvcListDepReg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.EPGU_SvcListDepReg EPGU_SvcListDepReg {  get {return rootObject as global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.EPGU_SvcListDepReg; } }
        
        private XRoot() {
        }
        
        public XRoot(global::www.roskazna.ru.eb.domain.EPGU_SvcListDepReg.formular.EPGU_SvcListDepReg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
