using System;
using System.Collections.Generic;
using System.Data;

namespace Krista.FM.Server.DataPumps.FNSRF1Pump
{

    // ФНС РФ - 0001 - Форма 4-НМ (коды классификаторов)
    public partial class FNSRF1PumpModule : CorrectedPumpModuleBase
    {

        #region Задолженность.ФНС

        private Dictionary<int, List<int>> GetArrearsCodes2005()
        {
            Dictionary<int, List<int>> codes = new Dictionary<int, List<int>>();
            codes.Add(0, new List<int>(new int[] {
                1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160,
                1170, 1180, 1190, 1200, 1210, 1225, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320 }));
            codes.Add(1, new List<int>(new int[] {
                2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110, 2120, 2135, 2140, 2150, 2160,
                2170, 2180, 2190, 2200, 2210, 2220, 2230 }));
            codes.Add(2, new List<int>(new int[] {
                2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2501, 2502, 2503, 2504, 2505,
                2506, 2510, 2520, 2521, 2522, 2523, 2524, 2525, 2526 }));
            codes.Add(3, new List<int>(new int[] {
                3010, 3020, 3030, 3040, 3050, 3060, 3070, 3080, 3090, 3100, 3110, 3120, 3130 }));
            codes.Add(4, new List<int>(new int[] { 3200 }));
            codes.Add(5, new List<int>(new int[] {
                4010, 4020, 4040, 4050, 4060, 4070, 4130, 4140, 4150, 4160, 4170, 4180, 4190, 4200, 4210, 4220,
                4230, 4240, 4250, 4310, 4320, 4330, 4340, 4350, 4360, 4370, 4380, 4390, 4400 }));
            codes.Add(6, new List<int>(new int[] { 4600, 4610, 4620, 4630 }));
            codes.Add(7, new List<int>(new int[] {
                5010, 5020, 5030, 5040, 5050, 5060, 5120, 5130, 5140, 5150, 5160, 5170, 5180, 5190, 5200, 5210,
                5220, 5230, 5240, 5300, 5310, 5320, 5330, 5340, 5350, 5360, 5370, 5380, 5390 }));
            codes.Add(8, new List<int>(new int[] { 5600, 5610 }));
            codes.Add(9, new List<int>(new int[] {
                6010, 6020, 6030, 6040, 6050, 6110, 6120, 6130, 6140, 6150, 6160, 6170, 6180, 6190, 6200, 6210,
                6220, 6280, 6290, 6300, 6310, 6320, 6330, 6340, 6350, 6360, 6370 }));
            return codes;
        }

        private Dictionary<int, List<int>> GetArrearsCodes2006()
        {
            Dictionary<int, List<int>> codes = new Dictionary<int, List<int>>();
            codes.Add(0, new List<int>(new int[] {
                1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170,
                1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260 }));
            codes.Add(1, new List<int>(new int[] {
                2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110, 2120, 2130, 2140, 2150, 2160, 2170,
                2180, 2190, 2200, 2210, 2220, 2230 }));
            codes.Add(2, new List<int>(new int[] {
                2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2510, 2520, 2530, 2540, 2550, 2560,
                2570, 2580, 2590, 2600, 2610, 2620, 2630, 2640, 2650, 2660, 2670, 2680, 2690, 2700, 2710, 2720, 2730,
                2740, 2750, 2760, 2770, 2780, 2790, 2800, 2810, 2820, 2830, 2840, 2850, 2860, 2870, 2880 }));
            codes.Add(3, new List<int>(new int[] {
                3010, 3020, 3030, 3040, 3050, 3060, 3070, 3080, 3090, 3100, 3110, 3120, 3130, 3140, 3150, 3160, 3170 }));
            codes.Add(4, new List<int>(new int[] { 3200 }));
            codes.Add(5, new List<int>(new int[] {
                4010, 4020, 4040, 4050, 4060, 4070, 4080, 4090, 4100, 4110, 4120, 4130, 4140, 4150, 4160, 4170, 4180,
                4190, 4200, 4210, 4220, 4230, 4240, 4250, 4260, 4270, 4280, 4290, 4300, 4310, 4320, 4330, 4340, 4350,
                4360 }));
            codes.Add(6, new List<int>(new int[] { 4600, 4610, 4620, 4630 }));
            codes.Add(7, new List<int>(new int[] {
                5010, 5020, 5030, 5040, 5050, 5060, 5070, 5080, 5090, 5100, 5110, 5120, 5130, 5140, 5150, 5160, 5170,
                5180, 5190, 5200, 5210, 5220, 5230, 5240, 5250, 5260, 5270, 5280, 5290, 5300, 5310, 5320, 5330, 5340,
                5350 }));
            codes.Add(8, new List<int>(new int[] { 5600, 5610 }));
            codes.Add(9, new List<int>(new int[] {
                6010, 6020, 6030, 6040, 6050, 6060, 6070, 6080, 6090, 6100, 6110, 6120, 6130, 6140, 6150, 6160, 6170,
                6180, 6190, 6200, 6210, 6220, 6230, 6240, 6250, 6260, 6270, 6280, 6290, 6300, 6310, 6320, 6330 }));
            return codes;
        }

        private Dictionary<int, List<int>> GetArrearsCodes2009()
        {
            Dictionary<int, List<int>> codes = new Dictionary<int, List<int>>();
            codes.Add(0, new List<int>(new int[] {
                1010, 1015, 1020, 1025, 1030, 1040, 1045, 1050, 1060, 1070, 1080, 1090, 1100, 1120, 1130, 1140,
                1150, 1160, 1170, 1180, 1181, 1185, 1190, 1200, 1201, 1210, 1220, 1230, 1240, 1250, 1260, 1270,
                1280, 1290, 1300 }));
            codes.Add(1, new List<int>(new int[] {
                2010, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2090, 2100, 2110, 2120, 2130, 2140, 2150, 2151,
                2155, 2160, 2170, 2171, 2180, 2190, 2200, 2210, 2215, 2216, 2217, 2218, 2220, 2230 }));
            codes.Add(2, new List<int>(new int[] {
                2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2510, 2520, 2530, 2540, 2550,
                2560, 2570, 2580, 2590, 2600, 2610, 2620, 2630, 2640, 2650, 2660, 2670, 2680, 2690, 2700, 2710,
                2720, 2730, 2740, 2750, 2760, 2770, 2780, 2790, 2800, 2810, 2820, 2830, 2840, 2850, 2860, 2870,
                2880, 2900, 2910, 2920, 2930, 2940 }));
            codes.Add(3, new List<int>(new int[] {
                3010, 3015, 3020, 3025, 3026, 3030, 3040, 3050, 3051, 3060, 3061, 3070, 3075, 3076, 3077, 3078,
                3080, 3090, 3100, 3105, 3110, 3120, 3130, 3131, 3140, 3141, 3150, 3155, 3156, 3157, 3158, 3160,
                3170 }));
            codes.Add(4, new List<int>(new int[] { 3200 }));
            codes.Add(5, new List<int>(new int[] {
                4010, 4015, 4020, 4025, 4040, 4050, 4055, 4060, 4070, 4080, 4090, 4100, 4110, 4120, 4121, 4125,
                4130, 4140, 4141, 4150, 4160, 4170, 4180, 4185, 4186, 4187, 4188, 4190, 4200, 4210, 4215, 4220,
                4230, 4240, 4250, 4260, 4270, 4280, 4281, 4285, 4290, 4300, 4301, 4310, 4320, 4330, 4340, 4345,
                4346, 4347, 4348, 4350, 4360 }));
            codes.Add(6, new List<int>(new int[] { 4600, 4610, 4620, 4630 }));
            codes.Add(7, new List<int>(new int[] {
                5010, 5015, 5020, 5025, 5030, 5040, 5045, 5050, 5060, 5070, 5080, 5090, 5100, 5110, 5111, 5115,
                5120, 5130, 5131, 5140, 5150, 5160, 5170, 5175, 5176, 5177, 5178, 5180, 5190, 5200, 5205, 5210,
                5220, 5230, 5240, 5250, 5260, 5270, 5271, 5275, 5280, 5290, 5291, 5300, 5310, 5320, 5330, 5335,
                5336, 5337, 5338, 5340, 5350 }));
            codes.Add(8, new List<int>(new int[] { 5600, 5610 }));
            codes.Add(9, new List<int>(new int[] {
                6010, 6015, 6020, 6025, 6030, 6040, 6045, 6050, 6060, 6070, 6080, 6090, 6100, 6101, 6105, 6110,
                6120, 6121, 6130, 6140, 6150, 6160, 6165, 6166, 6167, 6168, 6170, 6180, 6190, 6195, 6200, 6210,
                6220, 6230, 6240, 6250, 6251, 6255, 6260, 6270, 6271, 6280, 6290, 6300, 6310, 6315, 6316, 6317,
                6318, 6320, 6330 }));
            return codes;
        }

        private Dictionary<int, List<int>> GetArrearsCodes2010()
        {
            Dictionary<int, List<int>> codes = new Dictionary<int, List<int>>();
            codes.Add(0, new List<int>(new int[] {
                1010, 1015, 1020, 1025, 1030, 1040, 1045, 1050, 1060, 1070, 1080, 1090, 1100, 1120, 1130, 1140,
                1150, 1160, 1170, 1180, 1181, 1185, 1190, 1200, 1201, 1210, 1220, 1230, 1240, 1250, 1260, 1265,
                1270, 1280, 1290, 1300 }));
            codes.Add(1, new List<int>(new int[] {
                2010, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2090, 2100, 2110, 2120, 2130, 2140, 2150, 2151,
                2155, 2160, 2170, 2171, 2180, 2190, 2200, 2210, 2215, 2216, 2217, 2218, 2220, 2230, 2240 }));
            codes.Add(2, new List<int>(new int[] {
                2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2510, 2520, 2530, 2540, 2550,
                2560, 2570, 2580, 2590, 2600, 2610, 2615, 2620, 2630, 2635, 2640, 2650, 2655, 2660, 2670, 2680,
                2690, 2700, 2710, 2720, 2730, 2740, 2750, 2760, 2770, 2780, 2790, 2800, 2810, 2820, 2830, 2835,
                2840, 2850, 2855, 2860, 2870, 2875, 2880, 2900, 2910, 2920, 2925, 2930, 2940, 2950, 2960 }));
            codes.Add(3, new List<int>(new int[] {
                3010, 3015, 3020, 3025, 3026, 3030, 3040, 3050, 3051, 3060, 3061, 3070, 3075, 3076, 3077, 3078,
                3080, 3090, 3100, 3105, 3110, 3120, 3130, 3131, 3140, 3141, 3150, 3155, 3156, 3157, 3158, 3160,
                3170, 3175, 3176 }));
            codes.Add(4, new List<int>(new int[] { 3200 }));
            codes.Add(5, new List<int>(new int[] {
                4010, 4015, 4020, 4025, 4040, 4050, 4055, 4060, 4070, 4080, 4090, 4100, 4110, 4120, 4121, 4125,
                4130, 4140, 4141, 4150, 4160, 4170, 4180, 4185, 4186, 4187, 4188, 4190, 4200, 4210, 4215, 4220,
                4230, 4240, 4250, 4260, 4270, 4280, 4281, 4285, 4290, 4300, 4301, 4310, 4320, 4330, 4340, 4345,
                4346, 4347, 4348, 4350, 4360, 4365, 4366 }));
            codes.Add(6, new List<int>(new int[] { 4600, 4610, 4620, 4630 }));
            codes.Add(7, new List<int>(new int[] {
                5010, 5015, 5020, 5025, 5030, 5040, 5045, 5050, 5060, 5070, 5080, 5090, 5100, 5110, 5111, 5115,
                5120, 5130, 5131, 5140, 5150, 5160, 5170, 5175, 5176, 5177, 5178, 5180, 5190, 5200, 5205, 5210,
                5220, 5230, 5240, 5250, 5260, 5270, 5271, 5275, 5280, 5290, 5291, 5300, 5310, 5320, 5330, 5335,
                5336, 5337, 5338, 5340, 5350, 5355, 5356 }));
            codes.Add(8, new List<int>(new int[] { 5600, 5610 }));
            return codes;
        }

        private Dictionary<int, List<int>> GetArrearsCodes2011()
        {
            Dictionary<int, List<int>> codes = new Dictionary<int, List<int>>();
            codes.Add(0, new List<int>(new int[] {
                1010, 1015, 1020, 1025, 1030, 1040, 1045, 1050, 1060, 1070, 1080, 1090, 1100, 1120, 1130, 1140,
                1150, 1160, 1170, 1180, 1181, 1185, 1190, 1200, 1201, 1210, 1220, 1230, 1240, 1250, 1260, 1265,
                1270, 1280, 1290, 1300 }));
            codes.Add(1, new List<int>(new int[] {
                2010, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2090, 2100, 2110, 2120, 2130, 2140, 2150, 2151,
                2155, 2160, 2170, 2171, 2180, 2190, 2200, 2210, 2215, 2216, 2217, 2218, 2220, 2230, 2240 }));
            codes.Add(2, new List<int>(new int[] {
                2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2510, 2520, 2530, 2540, 2550,
                2560, 2570, 2580, 2590, 2600, 2610, 2616, 2620, 2621, 2630, 2635, 2636, 2640, 2641, 2650, 2655,
                2656, 2660, 2661, 2670, 2680, 2690, 2700, 2710, 2720, 2730, 2740, 2750, 2760, 2770, 2780, 2790,
                2800, 2810, 2820, 2830, 2836, 2840, 2841, 2850, 2855, 2856, 2860, 2861, 2870, 2875, 2876, 2880,
                2881 , 2900, 2910, 2920, 2925, 2930, 2940, 2950, 2960 }));
            codes.Add(3, new List<int>(new int[] {
                3010, 3015, 3020, 3025, 3026, 3030, 3040, 3050, 3051, 3060, 3061, 3070, 3075, 3076, 3077, 3078,
                3080, 3090, 3100, 3105, 3110, 3120, 3130, 3131, 3140, 3141, 3150, 3155, 3156, 3157, 3158, 3160,
                3170, 3175, 3176 }));
            codes.Add(4, new List<int>(new int[] { 3200 }));
            codes.Add(5, new List<int>(new int[] {
                4010, 4015, 4020, 4025, 4040, 4050, 4055, 4060, 4070, 4080, 4090, 4100, 4110, 4120, 4121, 4125,
                4130, 4140, 4141, 4150, 4160, 4170, 4180, 4185, 4186, 4187, 4188, 4190, 4200, 4210, 4215, 4220,
                4230, 4240, 4250, 4260, 4270, 4280, 4281, 4285, 4290, 4300, 4301, 4310, 4320, 4330, 4340, 4345,
                4346, 4347, 4348, 4350, 4360, 4365, 4366 }));
            codes.Add(6, new List<int>(new int[] { 4600, 4610, 4620, 4630 }));
            codes.Add(7, new List<int>(new int[] {
                5010, 5015, 5020, 5025, 5030, 5040, 5045, 5050, 5060, 5070, 5080, 5090, 5100, 5110, 5111, 5115,
                5120, 5130, 5131, 5140, 5150, 5160, 5170, 5175, 5176, 5177, 5178, 5180, 5190, 5200, 5205, 5210,
                5220, 5230, 5240, 5250, 5260, 5270, 5271, 5275, 5280, 5290, 5291, 5300, 5310, 5320, 5330, 5335,
                5336, 5337, 5338, 5340, 5350, 5355, 5356 }));
            codes.Add(8, new List<int>(new int[] { 5600, 5610 }));
            return codes;
        }

        private Dictionary<int, List<int>> GetArrearsCodes()
        {
            if (this.DataSource.Year >= 2011)
                return GetArrearsCodes2011();
            else if (this.DataSource.Year >= 2010)
                return GetArrearsCodes2010();
            else if (this.DataSource.Year >= 2009)
                return GetArrearsCodes2009();
            else if (this.DataSource.Year >= 2006)
                return GetArrearsCodes2006();
            else
                return GetArrearsCodes2005();
        }

        #endregion Задолженность.ФНС

        #region Доходы.Группы ФНС

        private Dictionary<int, int[]> GetIncomesMappings2005()
        {
            Dictionary<int, int[]> mappings = new Dictionary<int, int[]>();
            mappings.Add(0, new int[] { 3, 0, 4, 100000000, 5, 101000000, 6, 101010000, 7, 102000000, 8, 103000000, 
                9, 103010000, 10, 104000000, 11, 200000000, 12, 300000000, 13, 400000000 });
            mappings.Add(1, new int[] { 3, 0, 4, 0, 5, 0, 6, 100000000, 7, 101000000, 8, 101010000, 9, 102000000,
                10, 103000000, 11, 103010000, 12, 104000000, 13, 200000000, 14, 300000000, 15, 400000000 });
            mappings.Add(2, new int[] { 3, 0, 4, 0, 5, 0, 6, 0 });
            mappings.Add(3, new int[] { 3, 104010000, 4, 104010100, 5, 104010101, 6, 104010102, 7, 104010200, 8, 104010300,
                9, 104010400, 10, 104010500, 11, 104010600, 12, 104010700, 13, 104010800, 14, 104010900, 15, 104011000,
                16, 104011100, 17, 104011101, 18, 104011102, 19, 104011103, 20, 104011200, 21, 104011201, 22, 104011202,
                23, 104011203, 24, 104011300, 25, 104011400, 26, 104011401, 27, 104011402, 28, 104011403 });
            mappings.Add(4, new int[] { 3, 0 });
            mappings.Add(5, new int[] { 3, 105000000, 4, 105010000, 5, 105020000, 6, 105030000, 7, 105040000 });
            mappings.Add(6, new int[] { 3, 0 });
            mappings.Add(7, new int[] { 3, 106010000, 4, 106020000, 5, 106030000, 6, 106040000 });
            mappings.Add(8, new int[] { 3, 0 });
            mappings.Add(9, new int[] { 3, 107010000, 4, 107010100, 5, 107010200 });
            return mappings;
        }

        private Dictionary<int, int[]> GetIncomesMappings2006()
        {
            Dictionary<int, int[]> mappings = new Dictionary<int, int[]>();
            mappings.Add(0, new int[] { 3, 0, 4, 100000000, 5, 101000000, 6, 101010000, 7, 102000000, 8, 102010000,
                9, 103000000, 10, 103010000, 11, 104000000, 12, 200000000, 13, 300000000, 14, 400000000 });
            mappings.Add(1, new int[] { 3, 0, 4, 0, 5, 0, 6, 100000000, 7, 101000000, 8, 101010000, 9, 102000000,
                10, 102010000, 11, 103000000, 12, 103010000, 13, 104000000, 14, 200000000, 15, 300000000, 16, 400000000 });
            mappings.Add(2, new int[] { 3, 0, 4, 0, 5, 0, 6, 0 });
            mappings.Add(3, new int[] { 3, 104010000, 4, 104010100, 5, 104010101, 6, 104010102, 7, 104010200, 8, 104010300,
                9, 104010400, 10, 104010401, 11, 104010402, 12, 104010500, 13, 104010600, 14, 104010700, 15, 104010800,
                16, 104010900, 17, 104011000, 18, 104011100, 19, 104011200, 20, 104011300, 21, 104011400, 22, 104011401,
                23, 104011402, 24, 104011403 });
            mappings.Add(4, new int[] { 3, 0 });
            mappings.Add(5, new int[] { 3, 105000000, 4, 105010000, 5, 105020000, 6, 105030000, 7, 105040000 });
            mappings.Add(6, new int[] { 3, 0 });
            if (this.DataSource.Year > 2006)
                mappings.Add(7, new int[] { 3, 106000000, 4, 106010000, 5, 106020000, 6, 106030000, 7, 106040000 });
            else
                mappings.Add(7, new int[] { 3, 106010000, 4, 106020000, 5, 106030000, 6, 106040000 });
            mappings.Add(8, new int[] { 3, 0 });
            if (this.DataSource.Year < 2010)
                mappings.Add(9, new int[] { 3, 107010000, 4, 107010100, 5, 107010200 });
            return mappings;
        }

        private Dictionary<int, int[]> GetIncomesMappingsSvod()
        {
            Dictionary<int, int[]> mappings = new Dictionary<int, int[]>();
            mappings.Add(0, new int[] { 2, 0, 3, 100000000, 4, 101000000, 5, 101010000, 6, 102000000, 7, 102010000,
                8, 103000000, 9, 103010000, 10, 104000000, 11, 200000000, 12, 300000000, 13, 400000000 });
            mappings.Add(1, new int[] { 2, 0, 3, 0, 4, 0, 5, 100000000, 6, 101000000, 7, 101010000, 8, 102000000,
                9, 102010000, 10, 103000000, 11, 103010000, 12, 104000000, 13, 200000000, 14, 300000000, 15, 400000000 });
            if (((this.DataSource.Year==2011) && (this.DataSource.Month==12)) ||
                (this.DataSource.Year>2011))
                mappings.Add(2, new int[] { 3, 0, 4, 0, 5, 0,});//II.I
            else mappings.Add(2, new int[] { 4, 0, 5, 0, 6, 0});//II.I
            //раздел 3 часть 11
            mappings.Add(3, new int[] { 2, 104010000, 3, 104010100, 4, 104010101, 5, 104010102, 6, 104010200, 7, 104010300,
                8, 104010400, 9, 104010401, 10, 104010402, 11, 104010500});
            mappings.Add(4, new int[] { 2, 0 });
            mappings.Add(5, new int[] { 2, 105000000, 3, 105010000, 4, 105020000, 5, 105030000, 6, 105040000 });
            mappings.Add(6, new int[] { 2, 0 , 3, 0, 4, 0, 5, 0});
            mappings.Add(7, new int[] { 2, 106000000, 3, 106010000, 4, 106020000, 5, 106030000, 6, 106040000 });
            mappings.Add(8, new int[] { 2, 0, 3, 0 });
            //раздел 3 часть 21
            mappings.Add(9, new int[] { 2, 104010600, 3, 104010700, 4, 104010800,
                5, 104010900, 6, 104011000, 7, 104011100, 8, 104011200, 9, 104011300});
            //раздел 3 часть 31
            mappings.Add(10, new int[] { 2, 104011400, 3, 104011401, 4, 104011402, 5, 104011403 });
            return mappings;
        }

        private Dictionary<int, int[]> GetIncomesMappings()
        {
            if (isSvod)
                return GetIncomesMappingsSvod();
            else if (this.DataSource.Year >= 2006)
                return GetIncomesMappings2006();
            else
                return GetIncomesMappings2005();
        }

        #region Соотношение кодов классификатора "Задолженность" и показателей классификатора "Доходы"

        private int[] incomesByArrearsMapping2005 = new int[] {
            2490, 104020000, 2500, 104020000, 2510, 104020000, 2520, 104020000,
            2501, 301000000, 2502, 301000000, 2521, 301000000, 2522, 301000000,
            2503, 104020100, 2504, 104020100, 2523, 104020100, 2524, 104020100,
            2505, 103010300, 2506, 103010300, 2525, 103010300, 2526, 103010300 };

        private int[] incomesByArrearsMapping2006 = new int[] {
            2490, 103020000, 2500, 103020000, 2690, 103020000, 2700, 103020000,
            2510, 103030000, 2520, 103030000, 2710, 103030000, 2720, 103030000,
            2530, 103010100, 2540, 103010100, 2730, 103010100, 2740, 103010100,
            2550, 103010200, 2560, 103010200, 2750, 103010200, 2760, 103010200,
            2670, 103010300, 2680, 103010300, 2770, 103010300, 2780, 103010300,
            2570, 104020000, 2580, 104020000, 2790, 104020000, 2800, 104020000,
            2590, 104020100, 2600, 104020100, 2810, 104020100, 2820, 104020100,
            2610, 201000000, 2620, 201000000, 2830, 201000000, 2840, 201000000,
            2630, 202000000, 2640, 202000000, 2850, 202000000, 2860, 202000000,
            2650, 301000000, 2660, 301000000, 2870, 301000000, 2880, 301000000 };

        private int[] incomesByArrearsMapping2010 = new int[] {
            2490, 103020000, 2500, 103020000, 2690, 103020000, 2700, 103020000,
            2510, 103030000, 2520, 103030000, 2710, 103030000, 2720, 103030000,
            2530, 103010100, 2540, 103010100, 2730, 103010100, 2740, 103010100,
            2550, 103010200, 2560, 103010200, 2750, 103010200, 2760, 103010200,
            2670, 103010300, 2680, 103010300, 2770, 103010300, 2780, 103010300,
            2570, 104020000, 2580, 104020000, 2790, 104020000, 2800, 104020000,
            2590, 104020100, 2600, 104020100, 2810, 104020100, 2820, 104020100,
            2960, 107010000,
            2610, 201000000, 2615, 201000000, 2620, 201000000, 2830, 201000000, 2835, 201000000, 2840, 201000000,
            2630, 202000000, 2635, 202000000, 2640, 202000000, 2850, 202000000, 2855, 202000000, 2860, 202000000,
            2650, 301000000, 2660, 301000000, 2870, 301000000, 2875, 301000000, 2880, 301000000 };

        private int[] incomesByArrearsMapping2010_4 = new int[] {
            2490, 103020000, 2500, 103020000, 2690, 103020000, 2700, 103020000,
            2510, 103030000, 2520, 103030000, 2710, 103030000, 2720, 103030000,
            2530, 103010100, 2540, 103010100, 2730, 103010100, 2740, 103010100,
            2550, 103010200, 2560, 103010200, 2750, 103010200, 2760, 103010200,
            2670, 103010300, 2680, 103010300, 2770, 103010300, 2780, 103010300,
            2570, 104020000, 2580, 104020000, 2790, 104020000, 2800, 104020000,
            2590, 104020100, 2600, 104020100, 2810, 104020100, 2820, 104020100,
            2960, 107010000,
            2620, 201000000, 2830, 201000000, 2835, 201000000, 2840, 201000000,
            2630, 202000000, 2635, 202000000, 2640, 202000000, 2850, 202000000, 2855, 202000000, 2860, 202000000,
            2650, 301000000, 2655, 301000000, 2660, 301000000, 2870, 301000000, 2875, 301000000, 2880, 301000000,
            2615, 302000000, 2610, -1 };

        private int[] incomesByArrearsMapping2011 = new int[] {
            2490, 103020000, 2500, 103020000, 2690, 103020000, 2700, 103020000,
            2510, 103030000, 2520, 103030000, 2710, 103030000, 2720, 103030000,
            2530, 103010100, 2540, 103010100, 2730, 103010100, 2740, 103010100,
            2550, 103010200, 2560, 103010200, 2750, 103010200, 2760, 103010200,
            2670, 103010300, 2680, 103010300, 2770, 103010300, 2780, 103010300,
            2570, 104020000, 2580, 104020000, 2790, 104020000, 2800, 104020000,
            2590, 104020100, 2600, 104020100, 2810, 104020100, 2820, 104020100,
            2960, 107010000,
            2620, 201000000, 2621, 201000000, 2840, 201000000, 2841, 201000000,
            2630, 202000000, 2635, 202000000, 2636, 202000000, 2640, 202000000, 2641, 202000000,
            2850, 202000000, 2855, 202000000, 2856, 202000000, 2860, 202000000, 2861, 202000000,
            2650, 301000000, 2655, 301000000, 2656, 301000000, 2660, 301000000, 2661, 301000000,
            2870, 301000000, 2875, 301000000, 2876, 301000000, 2880, 301000000, 2881, 301000000,
            2610, 302000000, 2616, 302000000, 2830, 302000000, 2836, 302000000 };

        private int[] incomesByArrearsMappingSvod = new int[] {
            2490, 103020000, 2500, 103020000, 2690, 103020000, 2700, 103020000,
            2510, 103030000, 2520, 103030000, 2710, 103030000, 2720, 103030000,
            2530, 103010100, 2540, 103010100, 2730, 103010100, 2740, 103010100,
            2550, 103010200, 2560, 103010200, 2750, 103010200, 2760, 103010200,
            2670, 103010300, 2680, 103010300, 2770, 103010300, 2780, 103010300,
            2570, 104020000, 2580, 104020000, 2790, 104020000, 2800, 104020000,
            2590, 104020100, 2600, 104020100, 2810, 104020100, 2820, 104020100,
            2960, 107010000,
            2620, 201000000, 2621, 201000000, 2840, 201000000, 2841, 201000000,
            2630, 202000000, 2635, 202000000, 2636, 202000000, 2640, 202000000, 2641, 202000000,
            2850, 202000000, 2855, 202000000, 2856, 202000000, 2860, 202000000, 2861, 202000000,
            2650, 301000000, 2655, 301000000, 2656, 301000000, 2660, 301000000, 2661, 301000000,
            2870, 301000000, 2875, 301000000, 2876, 301000000, 2880, 301000000, 2881, 301000000,
            2610, 302000000, 2616, 302000000, 2830, 302000000, 2836, 302000000 };

        #endregion Соотношение кодов классификатора "Задолженность" и показателей классификатора "Доходы"

        #endregion Доходы.Группы ФНС

        #region Вспомогательные функции

        private string[] GetSectionsNames()
        {
            List<string> names = new List<string>();
            names.Add("Раздел I. Задолженность по налогам и сборам в бюджетную систему Российской Федерации");
            names.Add("Раздел II. Задолженность по уплате пеней и налоговых санкций в бюджетную систему Российской Федерации");
            names.Add("Раздел II.I. СПРАВОЧНО");
            names.Add("Раздел III. Задолженность по акцизам (из разделов I и II)");
            names.Add("Раздел III.I. СПРАВОЧНО");
            names.Add("Раздел IV. Задолженность по единому социальному налогу");
            names.Add("Раздел IV.I. СПРАВОЧНО");
            names.Add("Раздел V. Задолженность по платежам в государственные внебюджетные фонды");
            names.Add("Раздел V.I. СПРАВОЧНО");
            if (this.DataSource.Year < 2010)
                names.Add("Раздел VI. Задолженность по взносам на обязательное пенсионное страхование в Российской Федерации, зачисляемые в Пенсионный фонд Российской Федерации");
            return names.ToArray();
        }

        private int GetSectionIndex(string cellValue)
        {
            if (cellValue.Contains("РАЗДЕЛ III.I"))
                return 4;
            else if (cellValue.Contains("РАЗДЕЛ III"))
                return 3;
            else if (cellValue.Contains("РАЗДЕЛ II.I"))
                return 2;
            else if (cellValue.Contains("РАЗДЕЛ II"))
                return 1;
            else if (cellValue.Contains("РАЗДЕЛ IV.I"))
                return 6;
            else if (cellValue.Contains("РАЗДЕЛ IV"))
                return 5;
            else if (cellValue.Contains("РАЗДЕЛ I"))
                return 0;
            else if (cellValue.Contains("РАЗДЕЛ VI"))
                return 9;
            else if (cellValue.Contains("РАЗДЕЛ V.I"))
                return 8;
            else if (cellValue.Contains("РАЗДЕЛ V"))
                return 7;
            return -1;
        }

        private void FillArrearsParentIds()
        {
            arrearsParentIds = new int[sectionNames.GetLength(0)];
            for (int i = 0; i < arrearsParentIds.GetLength(0); i++)
                arrearsParentIds[i] = 0;

            // получаем родительские записи задолженностей (с кодом = 0)
            DataRow[] arrearsRows = dsArrears.Tables[0].Select("CODE = 0");
            foreach (DataRow arrearsRow in arrearsRows)
            {
                string sectionName = arrearsRow["NAME"].ToString().ToUpper();
                int index = GetSectionIndex(sectionName);
                if (index == -1)
                    continue;
                arrearsParentIds[index] = Convert.ToInt32(arrearsRow["ID"]);
            }
            for (int i = 0; i < arrearsParentIds.GetLength(0); i++)
            {
                if (arrearsParentIds[i] <= 0)
                {
                    object[] mapping = new object[] { "CODE", 0, "NAME", sectionNames[i], "SOURCEID", arrearsSourceId };
                    arrearsParentIds[i] = PumpRow(dsArrears.Tables[0], clsArrears, mapping);
                }
            }
        }

        private void FillIncomesRefs()
        {
            int sectionsCount = incomesMappings.Count;
            for (int index = 0; index < sectionsCount; index++)
            {
                int count = incomesMappings[index].Length;
                for (int i = 0; i < count; i += 2)
                {
                    string code = incomesMappings[index][i + 1].ToString();
                    incomesMappings[index][i + 1] = FindCachedRow(incomesCache, code, nullIncomes);
                }
            }
        }

        private void FillIncomesByArrears()
        {
            int[] mapping;
            if (this.isSvod)
                mapping = incomesByArrearsMappingSvod;
            if (this.DataSource.Year >= 2011)
                mapping = incomesByArrearsMapping2011;
            else if (this.DataSource.Year >= 2010)
            {
                if (this.DataSource.Month >= 4)
                    mapping = incomesByArrearsMapping2010_4;
                else
                    mapping = incomesByArrearsMapping2010;
            }
            else if (this.DataSource.Year >= 2006)
                mapping = incomesByArrearsMapping2006;
            else
                mapping = incomesByArrearsMapping2005;

            incomesByArrears.Clear();
            int count = mapping.GetLength(0);
            for (int i = 0; i < count; i += 2)
            {
                if (mapping[i + 1] == -1)
                    incomesByArrears.Add(mapping[i], nullIncomes);
                else
                    incomesByArrears.Add(mapping[i], mapping[i + 1]);
            }
        }

        private void InitAuxStructures()
        {
            sectionNames = GetSectionsNames();
            arrearsCodes = GetArrearsCodes();
            incomesMappings = GetIncomesMappings();
            FillArrearsParentIds();
            FillIncomesRefs();
            FillIncomesByArrears();
        }

        private int GetArrearsParentId(int sectionIndex)
        {
            return arrearsParentIds[sectionIndex];
        }

        private int GetSectionIndexByArrearsCode(int arrearsCode)
        {
            foreach (int index in arrearsCodes.Keys)
            {
                if (arrearsCodes[index].Contains(arrearsCode))
                    return index;
            }
            return -1;
        }

        private int GetRefIncomes(int index, int arrearsCode)
        {
            int refIncomes = incomesMappings[sectionIndex][index + 1];
            if (sectionIndex == 2)
                refIncomes = GetRefIncomesByArrears(arrearsCode, refIncomes);
            return refIncomes;
        }

        private int GetRefIncomesByArrears(int arrearsCode, int defaultValue)
        {
            int incomesCode = GetIncomesCodeByArrears(arrearsCode);
            if (incomesCode == nullIncomes)
                defaultValue = nullIncomes;
            return FindCachedRow(incomesCache, incomesCode.ToString(), defaultValue);
        }

        private int GetIncomesCodeByArrears(int arrearsCode)
        {
            if (incomesByArrears.ContainsKey(arrearsCode))
                return incomesByArrears[arrearsCode];
            return 0;
        }

        #endregion Вспомогательные функции

    }

}
