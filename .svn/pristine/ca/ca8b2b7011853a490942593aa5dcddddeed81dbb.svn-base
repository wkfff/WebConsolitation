//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5420
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace F_0503130of20150101
{
    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectRolekey)
    /// </para>
    /// </summary>
    public partial class subjectRole : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator subjectRole(XElement xe)
        {
            return XTypedServices.ToXTypedElement<subjectRole>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static subjectRole()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public subjectRole()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectRolekey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectRolekey)(x));
            }
            set { this.SetElement(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("subjectRole", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static subjectRole Load(string xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<subjectRole>(xmlFile);
        }

        public static subjectRole Parse(string xml)
        {
            return XTypedServices.Parse<subjectRole>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<subjectRole>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (StatesSchemekey)
    /// </para>
    /// </summary>
    public partial class scheme : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator scheme(XElement xe)
        {
            return XTypedServices.ToXTypedElement<scheme>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static scheme()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public scheme()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StatesSchemekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.StatesSchemekey)(x));
            }
            set { this.SetElement(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("scheme", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static scheme Load(string xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<scheme>(xmlFile);
        }

        public static scheme Parse(string xml)
        {
            return XTypedServices.Parse<scheme>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<scheme>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.StatesSchemekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503130of20150101S1Row+ | F_0503130of20150101S2Row+)
    /// </para>
    /// </summary>
    public partial class rows : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row> F_0503130of20150101S1RowField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row> F_0503130of20150101S2RowField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator rows(XElement xe)
        {
            return XTypedServices.ToXTypedElement<rows>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static rows()
        {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(
                new NamedContentModelEntity(XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report")),
                new NamedContentModelEntity(XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1Row+ | F_0503130of20150101S2Row+)
        /// </para>
        /// </summary>
        public rows()
        {
        }

        public rows(IEnumerable<ru.krista.consolidation.model.report.F_0503130of20150101S1Row> F_0503130of20150101S1Row)
        {
            this.F_0503130of20150101S1RowField = XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row>.Initialize(
                this,
                LinqToXsdTypeManager.Instance,
                F_0503130of20150101S1Row,
                XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"));
        }

        public rows(IEnumerable<ru.krista.consolidation.model.report.F_0503130of20150101S2Row> F_0503130of20150101S2Row)
        {
            this.F_0503130of20150101S2RowField = XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row>.Initialize(
                this,
                LinqToXsdTypeManager.Instance,
                F_0503130of20150101S2Row,
                XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"));
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1Row+ | F_0503130of20150101S2Row+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row> F_0503130of20150101S1Row
        {
            get
            {
                if ((this.F_0503130of20150101S1RowField == null))
                {
                    this.F_0503130of20150101S1RowField = new XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row>(
                        this,
                        LinqToXsdTypeManager.Instance,
                        XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"));
                }
                return this.F_0503130of20150101S1RowField;
            }
            set
            {
                if ((value == null))
                {
                    this.F_0503130of20150101S1RowField = null;
                }
                else
                {
                    if ((this.F_0503130of20150101S1RowField == null))
                    {
                        this.F_0503130of20150101S1RowField = XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row>.Initialize(
                            this,
                            LinqToXsdTypeManager.Instance,
                            value,
                            XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.report.F_0503130of20150101S1Row>(this.F_0503130of20150101S1RowField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1Row+ | F_0503130of20150101S2Row+)
        /// </para>
        /// </summary>
        public IList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row> F_0503130of20150101S2Row
        {
            get
            {
                if ((this.F_0503130of20150101S2RowField == null))
                {
                    this.F_0503130of20150101S2RowField = new XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row>(
                        this,
                        LinqToXsdTypeManager.Instance,
                        XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"));
                }
                return this.F_0503130of20150101S2RowField;
            }
            set
            {
                if ((value == null))
                {
                    this.F_0503130of20150101S2RowField = null;
                }
                else
                {
                    if ((this.F_0503130of20150101S2RowField == null))
                    {
                        this.F_0503130of20150101S2RowField = XTypedList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row>.Initialize(
                            this,
                            LinqToXsdTypeManager.Instance,
                            value,
                            XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.consolidation.model.report.F_0503130of20150101S2Row>(this.F_0503130of20150101S2RowField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("rows", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static rows Load(string xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<rows>(xmlFile);
        }

        public static rows Parse(string xml)
        {
            return XTypedServices.Parse<rows>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<rows>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S1Row));
            localElementDictionary.Add(XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S2Row));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class responsibleSubject : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator responsibleSubject(XElement xe)
        {
            return XTypedServices.ToXTypedElement<responsibleSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static responsibleSubject()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public responsibleSubject()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set { this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("responsibleSubject", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static responsibleSubject Load(string xmlFile)
        {
            return XTypedServices.Load<responsibleSubject>(xmlFile);
        }

        public static responsibleSubject Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<responsibleSubject>(xmlFile);
        }

        public static responsibleSubject Parse(string xml)
        {
            return XTypedServices.Parse<responsibleSubject>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<responsibleSubject>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class responsibleConsumer : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator responsibleConsumer(XElement xe)
        {
            return XTypedServices.ToXTypedElement<responsibleConsumer>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static responsibleConsumer()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public responsibleConsumer()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set { this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("responsibleConsumer", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static responsibleConsumer Load(string xmlFile)
        {
            return XTypedServices.Load<responsibleConsumer>(xmlFile);
        }

        public static responsibleConsumer Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<responsibleConsumer>(xmlFile);
        }

        public static responsibleConsumer Parse(string xml)
        {
            return XTypedServices.Parse<responsibleConsumer>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<responsibleConsumer>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKEIkey)
    /// </para>
    /// </summary>
    public partial class req9 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator req9(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req9>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req9()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKEI-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public req9()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKEIkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKEIkey ClsOKEIkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKEIkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("req9", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req9 Load(string xmlFile)
        {
            return XTypedServices.Load<req9>(xmlFile);
        }

        public static req9 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req9>(xmlFile);
        }

        public static req9 Parse(string xml)
        {
            return XTypedServices.Parse<req9>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req9>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKEIkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Budgetkey)
    /// </para>
    /// </summary>
    public partial class req6 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator req6(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req6>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req6()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Budget-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public req6()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Budgetkey Budgetkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Budget-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Budgetkey)(x));
            }
            set { this.SetElement(XName.Get("Budget-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("req6", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req6 Load(string xmlFile)
        {
            return XTypedServices.Load<req6>(xmlFile);
        }

        public static req6 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req6>(xmlFile);
        }

        public static req6 Parse(string xml)
        {
            return XTypedServices.Parse<req6>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req6>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Budget-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Budgetkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsGRBSkey)
    /// </para>
    /// </summary>
    public partial class req5 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator req5(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req5>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req5()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsGRBS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public req5()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsGRBSkey)(x));
            }
            set { this.SetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("req5", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req5 Load(string xmlFile)
        {
            return XTypedServices.Load<req5>(xmlFile);
        }

        public static req5 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req5>(xmlFile);
        }

        public static req5 Parse(string xml)
        {
            return XTypedServices.Parse<req5>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req5>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKTMOkey)
    /// </para>
    /// </summary>
    public partial class req10 : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator req10(XElement xe)
        {
            return XTypedServices.ToXTypedElement<req10>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static req10()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKTMO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public req10()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKTMOkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("req10", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static req10 Load(string xmlFile)
        {
            return XTypedServices.Load<req10>(xmlFile);
        }

        public static req10 Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<req10>(xmlFile);
        }

        public static req10 Parse(string xml)
        {
            return XTypedServices.Parse<req10>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<req10>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class reportSubjectOffice : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportSubjectOffice(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSubjectOffice>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSubjectOffice()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public reportSubjectOffice()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set { this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportSubjectOffice", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSubjectOffice Load(string xmlFile)
        {
            return XTypedServices.Load<reportSubjectOffice>(xmlFile);
        }

        public static reportSubjectOffice Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSubjectOffice>(xmlFile);
        }

        public static reportSubjectOffice Parse(string xml)
        {
            return XTypedServices.Parse<reportSubjectOffice>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSubjectOffice>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportSubject : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportSubject(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSubject()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportSubject()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set { this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportSubject", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSubject Load(string xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSubject>(xmlFile);
        }

        public static reportSubject Parse(string xml)
        {
            return XTypedServices.Parse<reportSubject>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSubject>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503130of20150101S1, F_0503130of20150101S2)
    /// </para>
    /// </summary>
    public partial class reportSections : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportSections(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportSections>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportSections()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report")),
                new NamedContentModelEntity(XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1, F_0503130of20150101S2)
        /// </para>
        /// </summary>
        public reportSections()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1, F_0503130of20150101S2)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503130of20150101S1 F_0503130of20150101S1
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503130of20150101S1)(x));
            }
            set { this.SetElement(XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report"), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101S1, F_0503130of20150101S2)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503130of20150101S2 F_0503130of20150101S2
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503130of20150101S2)(x));
            }
            set { this.SetElement(XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportSections", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportSections Load(string xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportSections>(xmlFile);
        }

        public static reportSections Parse(string xml)
        {
            return XTypedServices.Parse<reportSections>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportSections>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S1));
            localElementDictionary.Add(XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S2));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportPeriodPeriodickey)
    /// </para>
    /// </summary>
    public partial class reportPeriodAbstract : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportPeriodAbstract(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportPeriodAbstract>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportPeriodAbstract()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public reportPeriodAbstract()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportPeriodPeriodickey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportPeriodPeriodickey)(x));
            }
            set { this.SetElement(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportPeriodAbstract", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportPeriodAbstract Load(string xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportPeriodAbstract>(xmlFile);
        }

        public static reportPeriodAbstract Parse(string xml)
        {
            return XTypedServices.Parse<reportPeriodAbstract>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportPeriodAbstract>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportLevelkey)
    /// </para>
    /// </summary>
    public partial class reportLevel : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportLevel(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportLevel>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportLevel()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportLevel-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public reportLevel()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportLevelkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportLevelkey)(x));
            }
            set { this.SetElement(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportLevel", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportLevel Load(string xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportLevel>(xmlFile);
        }

        public static reportLevel Parse(string xml)
        {
            return XTypedServices.Parse<reportLevel>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportLevel>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportKindkey)
    /// </para>
    /// </summary>
    public partial class reportKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportKind(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportKind-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public reportKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportKindkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportKindkey ReportKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportKindkey)(x));
            }
            set { this.SetElement(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportKind", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportKind Load(string xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportKind>(xmlFile);
        }

        public static reportKind Parse(string xml)
        {
            return XTypedServices.Parse<reportKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class reportConsumer : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator reportConsumer(XElement xe)
        {
            return XTypedServices.ToXTypedElement<reportConsumer>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static reportConsumer()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public reportConsumer()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set { this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("reportConsumer", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static reportConsumer Load(string xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<reportConsumer>(xmlFile);
        }

        public static reportConsumer Parse(string xml)
        {
            return XTypedServices.Parse<reportConsumer>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<reportConsumer>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Regionkey)
    /// </para>
    /// </summary>
    public partial class region : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator region(XElement xe)
        {
            return XTypedServices.ToXTypedElement<region>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static region()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Region-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Regionkey)
        /// </para>
        /// </summary>
        public region()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Regionkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Regionkey Regionkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Region-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Regionkey)(x));
            }
            set { this.SetElement(XName.Get("Region-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("region", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static region Load(string xmlFile)
        {
            return XTypedServices.Load<region>(xmlFile);
        }

        public static region Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<region>(xmlFile);
        }

        public static region Parse(string xml)
        {
            return XTypedServices.Parse<region>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<region>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Region-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Regionkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Personagekey)
    /// </para>
    /// </summary>
    public partial class personage : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator personage(XElement xe)
        {
            return XTypedServices.ToXTypedElement<personage>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static personage()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Personage-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Personagekey)
        /// </para>
        /// </summary>
        public personage()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Personagekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Personagekey Personagekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Personage-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Personagekey)(x));
            }
            set { this.SetElement(XName.Get("Personage-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("personage", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static personage Load(string xmlFile)
        {
            return XTypedServices.Load<personage>(xmlFile);
        }

        public static personage Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<personage>(xmlFile);
        }

        public static personage Parse(string xml)
        {
            return XTypedServices.Parse<personage>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<personage>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Personage-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Personagekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Officekey)
    /// </para>
    /// </summary>
    public partial class person : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator person(XElement xe)
        {
            return XTypedServices.ToXTypedElement<person>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static person()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Office-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public person()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Officekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Officekey Officekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Officekey)(x));
            }
            set { this.SetElement(XName.Get("Office-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("person", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static person Load(string xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<person>(xmlFile);
        }

        public static person Parse(string xml)
        {
            return XTypedServices.Parse<person>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<person>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKFSkey)
    /// </para>
    /// </summary>
    public partial class patternOfOwnership : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator patternOfOwnership(XElement xe)
        {
            return XTypedServices.ToXTypedElement<patternOfOwnership>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static patternOfOwnership()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKFS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKFSkey)
        /// </para>
        /// </summary>
        public patternOfOwnership()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKFSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKFSkey ClsOKFSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKFS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKFSkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("patternOfOwnership", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static patternOfOwnership Load(string xmlFile)
        {
            return XTypedServices.Load<patternOfOwnership>(xmlFile);
        }

        public static patternOfOwnership Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<patternOfOwnership>(xmlFile);
        }

        public static patternOfOwnership Parse(string xml)
        {
            return XTypedServices.Parse<patternOfOwnership>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<patternOfOwnership>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKFSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class oldChiefAccountant : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator oldChiefAccountant(XElement xe)
        {
            return XTypedServices.ToXTypedElement<oldChiefAccountant>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static oldChiefAccountant()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public oldChiefAccountant()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set { this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("oldChiefAccountant", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static oldChiefAccountant Load(string xmlFile)
        {
            return XTypedServices.Load<oldChiefAccountant>(xmlFile);
        }

        public static oldChiefAccountant Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<oldChiefAccountant>(xmlFile);
        }

        public static oldChiefAccountant Parse(string xml)
        {
            return XTypedServices.Parse<oldChiefAccountant>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<oldChiefAccountant>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employeekey)
    /// </para>
    /// </summary>
    public partial class oldChief : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator oldChief(XElement xe)
        {
            return XTypedServices.ToXTypedElement<oldChief>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static oldChief()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public oldChief()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Employeekey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Employeekey Employeekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Employee-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Employeekey)(x));
            }
            set { this.SetElement(XName.Get("Employee-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("oldChief", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static oldChief Load(string xmlFile)
        {
            return XTypedServices.Load<oldChief>(xmlFile);
        }

        public static oldChief Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<oldChief>(xmlFile);
        }

        public static oldChief Parse(string xml)
        {
            return XTypedServices.Parse<oldChief>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<oldChief>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKTMOkey)
    /// </para>
    /// </summary>
    public partial class oktmo : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator oktmo(XElement xe)
        {
            return XTypedServices.ToXTypedElement<oktmo>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static oktmo()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKTMO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public oktmo()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKTMOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKTMOkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("oktmo", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static oktmo Load(string xmlFile)
        {
            return XTypedServices.Load<oktmo>(xmlFile);
        }

        public static oktmo Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<oktmo>(xmlFile);
        }

        public static oktmo Parse(string xml)
        {
            return XTypedServices.Parse<oktmo>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<oktmo>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKSMkey)
    /// </para>
    /// </summary>
    public partial class oksm : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator oksm(XElement xe)
        {
            return XTypedServices.ToXTypedElement<oksm>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static oksm()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKSM-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKSMkey)
        /// </para>
        /// </summary>
        public oksm()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKSMkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKSMkey ClsOKSMkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKSM-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKSMkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKSM-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("oksm", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static oksm Load(string xmlFile)
        {
            return XTypedServices.Load<oksm>(xmlFile);
        }

        public static oksm Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<oksm>(xmlFile);
        }

        public static oksm Parse(string xml)
        {
            return XTypedServices.Parse<oksm>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<oksm>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKSM-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKSMkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsOKATOkey)
    /// </para>
    /// </summary>
    public partial class okato : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator okato(XElement xe)
        {
            return XTypedServices.ToXTypedElement<okato>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static okato()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsOKATO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsOKATOkey)
        /// </para>
        /// </summary>
        public okato()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsOKATOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsOKATOkey ClsOKATOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsOKATO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsOKATOkey)(x));
            }
            set { this.SetElement(XName.Get("ClsOKATO-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("okato", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static okato Load(string xmlFile)
        {
            return XTypedServices.Load<okato>(xmlFile);
        }

        public static okato Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<okato>(xmlFile);
        }

        public static okato Parse(string xml)
        {
            return XTypedServices.Parse<okato>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<okato>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsOKATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKATOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503130of20150101HR)
    /// </para>
    /// </summary>
    public partial class headerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator headerReqHolder(XElement xe)
        {
            return XTypedServices.ToXTypedElement<headerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static headerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503130of20150101HR)
        /// </para>
        /// </summary>
        public headerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101HR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503130of20150101HR F_0503130of20150101HR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503130of20150101HR)(x));
            }
            set { this.SetElement(XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("headerReqHolder", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static headerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<headerReqHolder>(xmlFile);
        }

        public static headerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<headerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<headerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101HR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ClsGRBSkey)
    /// </para>
    /// </summary>
    public partial class grbs : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator grbs(XElement xe)
        {
            return XTypedServices.ToXTypedElement<grbs>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static grbs()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClsGRBS-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public grbs()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClsGRBSkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ClsGRBSkey)(x));
            }
            set { this.SetElement(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("grbs", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static grbs Load(string xmlFile)
        {
            return XTypedServices.Load<grbs>(xmlFile);
        }

        public static grbs Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<grbs>(xmlFile);
        }

        public static grbs Parse(string xml)
        {
            return XTypedServices.Parse<grbs>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<grbs>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (F_0503130of20150101FR)
    /// </para>
    /// </summary>
    public partial class footerReqHolder : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator footerReqHolder(XElement xe)
        {
            return XTypedServices.ToXTypedElement<footerReqHolder>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static footerReqHolder()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (F_0503130of20150101FR)
        /// </para>
        /// </summary>
        public footerReqHolder()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (F_0503130of20150101FR)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503130of20150101FR F_0503130of20150101FR
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503130of20150101FR)(x));
            }
            set { this.SetElement(XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("footerReqHolder", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static footerReqHolder Load(string xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<footerReqHolder>(xmlFile);
        }

        public static footerReqHolder Parse(string xml)
        {
            return XTypedServices.Parse<footerReqHolder>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<footerReqHolder>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101FR));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Employee+)
    /// </para>
    /// </summary>
    public partial class employees : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<ru.krista.budget.model.Employee> EmployeeField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator employees(XElement xe)
        {
            return XTypedServices.ToXTypedElement<employees>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static employees()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Employee", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Employee+)
        /// </para>
        /// </summary>
        public employees()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Employee+)
        /// </para>
        /// </summary>
        public IList<ru.krista.budget.model.Employee> Employee
        {
            get
            {
                if ((this.EmployeeField == null))
                {
                    this.EmployeeField = new XTypedList<ru.krista.budget.model.Employee>(this, LinqToXsdTypeManager.Instance, XName.Get("Employee", "ru.krista.budget.model"));
                }
                return this.EmployeeField;
            }
            set
            {
                if ((value == null))
                {
                    this.EmployeeField = null;
                }
                else
                {
                    if ((this.EmployeeField == null))
                    {
                        this.EmployeeField = XTypedList<ru.krista.budget.model.Employee>.Initialize(
                            this,
                            LinqToXsdTypeManager.Instance,
                            value,
                            XName.Get("Employee", "ru.krista.budget.model"));
                    }
                    else
                    {
                        XTypedServices.SetList<ru.krista.budget.model.Employee>(this.EmployeeField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("employees", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static employees Load(string xmlFile)
        {
            return XTypedServices.Load<employees>(xmlFile);
        }

        public static employees Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<employees>(xmlFile);
        }

        public static employees Parse(string xml)
        {
            return XTypedServices.Parse<employees>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<employees>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Employee", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employee));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (EmployeeKindkey)
    /// </para>
    /// </summary>
    public partial class employeeKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator employeeKind(XElement xe)
        {
            return XTypedServices.ToXTypedElement<employeeKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static employeeKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EmployeeKind-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (EmployeeKindkey)
        /// </para>
        /// </summary>
        public employeeKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EmployeeKindkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.EmployeeKindkey EmployeeKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("EmployeeKind-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.EmployeeKindkey)(x));
            }
            set { this.SetElement(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("employeeKind", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static employeeKind Load(string xmlFile)
        {
            return XTypedServices.Load<employeeKind>(xmlFile);
        }

        public static employeeKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<employeeKind>(xmlFile);
        }

        public static employeeKind Parse(string xml)
        {
            return XTypedServices.Parse<employeeKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<employeeKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.EmployeeKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Statekey)
    /// </para>
    /// </summary>
    public partial class docState : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator docState(XElement xe)
        {
            return XTypedServices.ToXTypedElement<docState>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static docState()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("State-key", "ru.krista.core.docstate.model.meta")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public docState()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Statekey)
        /// </para>
        /// </summary>
        public ru.krista.core.docstate.model.meta.Statekey Statekey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"));
                return ((ru.krista.core.docstate.model.meta.Statekey)(x));
            }
            set { this.SetElement(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("docState", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static docState Load(string xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<docState>(xmlFile);
        }

        public static docState Parse(string xml)
        {
            return XTypedServices.Parse<docState>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<docState>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.Statekey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportCollectingPeriodkey)
    /// </para>
    /// </summary>
    public partial class collectingPeriod : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator collectingPeriod(XElement xe)
        {
            return XTypedServices.ToXTypedElement<collectingPeriod>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static collectingPeriod()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public collectingPeriod()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportCollectingPeriodkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportCollectingPeriodkey)(x));
            }
            set { this.SetElement(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("collectingPeriod", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static collectingPeriod Load(string xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<collectingPeriod>(xmlFile);
        }

        public static collectingPeriod Parse(string xml)
        {
            return XTypedServices.Parse<collectingPeriod>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<collectingPeriod>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Budgetkey)
    /// </para>
    /// </summary>
    public partial class budget : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator budget(XElement xe)
        {
            return XTypedServices.ToXTypedElement<budget>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static budget()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Budget-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public budget()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Budgetkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Budgetkey Budgetkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Budget-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Budgetkey)(x));
            }
            set { this.SetElement(XName.Get("Budget-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("budget", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static budget Load(string xmlFile)
        {
            return XTypedServices.Load<budget>(xmlFile);
        }

        public static budget Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<budget>(xmlFile);
        }

        public static budget Parse(string xml)
        {
            return XTypedServices.Parse<budget>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<budget>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Budget-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Budgetkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubjectkey)
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator author(XElement xe)
        {
            return XTypedServices.ToXTypedElement<author>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static author()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReportSubject-key", "ru.krista.consolidation.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public author()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubjectkey)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubjectkey)(x));
            }
            set { this.SetElement(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("author", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static author Load(string xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<author>(xmlFile);
        }

        public static author Parse(string xml)
        {
            return XTypedServices.Parse<author>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<author>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (AtoKindkey)
    /// </para>
    /// </summary>
    public partial class atoKind : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator atoKind(XElement xe)
        {
            return XTypedServices.ToXTypedElement<atoKind>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static atoKind()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AtoKind-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (AtoKindkey)
        /// </para>
        /// </summary>
        public atoKind()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AtoKindkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.AtoKindkey AtoKindkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("AtoKind-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.AtoKindkey)(x));
            }
            set { this.SetElement(XName.Get("AtoKind-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("atoKind", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static atoKind Load(string xmlFile)
        {
            return XTypedServices.Load<atoKind>(xmlFile);
        }

        public static atoKind Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<atoKind>(xmlFile);
        }

        public static atoKind Parse(string xml)
        {
            return XTypedServices.Parse<atoKind>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<atoKind>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("AtoKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.AtoKindkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ATOkey)
    /// </para>
    /// </summary>
    public partial class ato : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator ato(XElement xe)
        {
            return XTypedServices.ToXTypedElement<ato>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static ato()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ATO-key", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ato()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ATOkey)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ATOkey ATOkey
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ATO-key", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ATOkey)(x));
            }
            set { this.SetElement(XName.Get("ATO-key", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("ato", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ato Load(string xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ato>(xmlFile);
        }

        public static ato Parse(string xml)
        {
            return XTypedServices.Parse<ato>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ato>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
    /// </para>
    /// </summary>
    public partial class Objects : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

        public static explicit operator Objects(XElement xe)
        {
            return XTypedServices.ToXTypedElement<Objects>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
        }

        static Objects()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(
                new NamedContentModelEntity(XName.Get("ReportSubject", "ru.krista.consolidation.model")),
                new NamedContentModelEntity(XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report")),
                new NamedContentModelEntity(XName.Get("Office", "ru.krista.budget.model")),
                new NamedContentModelEntity(XName.Get("ATO", "ru.krista.budget.model")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
        /// </para>
        /// </summary>
        public Objects()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.ReportSubject ReportSubject
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportSubject", "ru.krista.consolidation.model"));
                return ((ru.krista.consolidation.model.ReportSubject)(x));
            }
            set { this.SetElement(XName.Get("ReportSubject", "ru.krista.consolidation.model"), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
        /// </para>
        /// </summary>
        public ru.krista.consolidation.model.report.F_0503130of20150101 F_0503130of20150101
        {
            get
            {
                XElement x = this.GetElement(XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report"));
                return ((ru.krista.consolidation.model.report.F_0503130of20150101)(x));
            }
            set { this.SetElement(XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report"), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.Office Office
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Office", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.Office)(x));
            }
            set { this.SetElement(XName.Get("Office", "ru.krista.budget.model"), value); }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ReportSubject, F_0503130of20150101, Office, ATO)
        /// </para>
        /// </summary>
        public ru.krista.budget.model.ATO ATO
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ATO", "ru.krista.budget.model"));
                return ((ru.krista.budget.model.ATO)(x));
            }
            set { this.SetElement(XName.Get("ATO", "ru.krista.budget.model"), value); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get { return localElementDictionary; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get { return XName.Get("Objects", ""); }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get { return SchemaOrigin.Element; }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get { return LinqToXsdTypeManager.Instance; }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Objects Load(string xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Objects>(xmlFile);
        }

        public static Objects Parse(string xml)
        {
            return XTypedServices.Parse<Objects>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Objects>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("ReportSubject", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubject));
            localElementDictionary.Add(XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101));
            localElementDictionary.Add(XName.Get("Office", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Office));
            localElementDictionary.Add(XName.Get("ATO", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATO));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set { schemaSet = value; }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get { return XTypedServices.EmptyDictionary; }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get { return elementDictionary; }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get { return XTypedServices.EmptyTypeMappingDictionary; }
        }

        public static LinqToXsdTypeManager Instance
        {
            get { return typeManagerSingleton; }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            elementDictionary.Add(XName.Get("scheme", ""), typeof(scheme));
            elementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            elementDictionary.Add(XName.Get("responsibleSubject", ""), typeof(responsibleSubject));
            elementDictionary.Add(XName.Get("responsibleConsumer", ""), typeof(responsibleConsumer));
            elementDictionary.Add(XName.Get("req9", ""), typeof(req9));
            elementDictionary.Add(XName.Get("req6", ""), typeof(req6));
            elementDictionary.Add(XName.Get("req5", ""), typeof(req5));
            elementDictionary.Add(XName.Get("req10", ""), typeof(req10));
            elementDictionary.Add(XName.Get("reportSubjectOffice", ""), typeof(reportSubjectOffice));
            elementDictionary.Add(XName.Get("reportSubject", ""), typeof(reportSubject));
            elementDictionary.Add(XName.Get("reportSections", ""), typeof(reportSections));
            elementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            elementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
            elementDictionary.Add(XName.Get("reportKind", ""), typeof(reportKind));
            elementDictionary.Add(XName.Get("reportConsumer", ""), typeof(reportConsumer));
            elementDictionary.Add(XName.Get("region", ""), typeof(region));
            elementDictionary.Add(XName.Get("personage", ""), typeof(personage));
            elementDictionary.Add(XName.Get("person", ""), typeof(person));
            elementDictionary.Add(XName.Get("patternOfOwnership", ""), typeof(patternOfOwnership));
            elementDictionary.Add(XName.Get("oldChiefAccountant", ""), typeof(oldChiefAccountant));
            elementDictionary.Add(XName.Get("oldChief", ""), typeof(oldChief));
            elementDictionary.Add(XName.Get("oktmo", ""), typeof(oktmo));
            elementDictionary.Add(XName.Get("oksm", ""), typeof(oksm));
            elementDictionary.Add(XName.Get("okato", ""), typeof(okato));
            elementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(headerReqHolder));
            elementDictionary.Add(XName.Get("grbs", ""), typeof(grbs));
            elementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(footerReqHolder));
            elementDictionary.Add(XName.Get("employees", ""), typeof(employees));
            elementDictionary.Add(XName.Get("employeeKind", ""), typeof(employeeKind));
            elementDictionary.Add(XName.Get("docState", ""), typeof(docState));
            elementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(collectingPeriod));
            elementDictionary.Add(XName.Get("budget", ""), typeof(budget));
            elementDictionary.Add(XName.Get("author", ""), typeof(author));
            elementDictionary.Add(XName.Get("atoKind", ""), typeof(atoKind));
            elementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            elementDictionary.Add(XName.Get("Objects", ""), typeof(Objects));
            elementDictionary.Add(XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.StatesSchemekey));
            elementDictionary.Add(XName.Get("State-key", "ru.krista.core.docstate.model.meta"), typeof(ru.krista.core.docstate.model.meta.Statekey));
            elementDictionary.Add(
                XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"),
                typeof(ru.krista.consolidation.model.report.F_0503130of20150101S2Row));
            elementDictionary.Add(XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S2));
            elementDictionary.Add(
                XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"),
                typeof(ru.krista.consolidation.model.report.F_0503130of20150101S1Row));
            elementDictionary.Add(XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101S1));
            elementDictionary.Add(XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101HR));
            elementDictionary.Add(XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101FR));
            elementDictionary.Add(XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report"), typeof(ru.krista.consolidation.model.report.F_0503130of20150101));
            elementDictionary.Add(XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectRolekey));
            elementDictionary.Add(XName.Get("ReportSubject-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubjectkey));
            elementDictionary.Add(XName.Get("ReportSubject", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportSubject));
            elementDictionary.Add(XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportPeriodPeriodickey));
            elementDictionary.Add(XName.Get("ReportLevel-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportLevelkey));
            elementDictionary.Add(XName.Get("ReportKind-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportKindkey));
            elementDictionary.Add(XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"), typeof(ru.krista.consolidation.model.ReportCollectingPeriodkey));
            elementDictionary.Add(XName.Get("Region-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Regionkey));
            elementDictionary.Add(XName.Get("Personage-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Personagekey));
            elementDictionary.Add(XName.Get("Office-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Officekey));
            elementDictionary.Add(XName.Get("Office", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Office));
            elementDictionary.Add(XName.Get("EmployeeKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.EmployeeKindkey));
            elementDictionary.Add(XName.Get("Employee-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employeekey));
            elementDictionary.Add(XName.Get("Employee", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Employee));
            elementDictionary.Add(XName.Get("ClsOKTMO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKTMOkey));
            elementDictionary.Add(XName.Get("ClsOKSM-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKSMkey));
            elementDictionary.Add(XName.Get("ClsOKFS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKFSkey));
            elementDictionary.Add(XName.Get("ClsOKEI-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKEIkey));
            elementDictionary.Add(XName.Get("ClsOKATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsOKATOkey));
            elementDictionary.Add(XName.Get("ClsGRBS-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ClsGRBSkey));
            elementDictionary.Add(XName.Get("Budget-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.Budgetkey));
            elementDictionary.Add(XName.Get("AtoKind-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.AtoKindkey));
            elementDictionary.Add(XName.Get("ATO-key", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATOkey));
            elementDictionary.Add(XName.Get("ATO", "ru.krista.budget.model"), typeof(ru.krista.budget.model.ATO));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("subjectRole", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


        public subjectRole subjectRole
        {
            get { return rootObject as subjectRole; }
        }

        public scheme scheme
        {
            get { return rootObject as scheme; }
        }

        public rows rows
        {
            get { return rootObject as rows; }
        }

        public responsibleSubject responsibleSubject
        {
            get { return rootObject as responsibleSubject; }
        }

        public responsibleConsumer responsibleConsumer
        {
            get { return rootObject as responsibleConsumer; }
        }

        public req9 req9
        {
            get { return rootObject as req9; }
        }

        public req6 req6
        {
            get { return rootObject as req6; }
        }

        public req5 req5
        {
            get { return rootObject as req5; }
        }

        public req10 req10
        {
            get { return rootObject as req10; }
        }

        public reportSubjectOffice reportSubjectOffice
        {
            get { return rootObject as reportSubjectOffice; }
        }

        public reportSubject reportSubject
        {
            get { return rootObject as reportSubject; }
        }

        public reportSections reportSections
        {
            get { return rootObject as reportSections; }
        }

        public reportPeriodAbstract reportPeriodAbstract
        {
            get { return rootObject as reportPeriodAbstract; }
        }

        public reportLevel reportLevel
        {
            get { return rootObject as reportLevel; }
        }

        public reportKind reportKind
        {
            get { return rootObject as reportKind; }
        }

        public reportConsumer reportConsumer
        {
            get { return rootObject as reportConsumer; }
        }

        public region region
        {
            get { return rootObject as region; }
        }

        public personage personage
        {
            get { return rootObject as personage; }
        }

        public person person
        {
            get { return rootObject as person; }
        }

        public patternOfOwnership patternOfOwnership
        {
            get { return rootObject as patternOfOwnership; }
        }

        public oldChiefAccountant oldChiefAccountant
        {
            get { return rootObject as oldChiefAccountant; }
        }

        public oldChief oldChief
        {
            get { return rootObject as oldChief; }
        }

        public oktmo oktmo
        {
            get { return rootObject as oktmo; }
        }

        public oksm oksm
        {
            get { return rootObject as oksm; }
        }

        public okato okato
        {
            get { return rootObject as okato; }
        }

        public headerReqHolder headerReqHolder
        {
            get { return rootObject as headerReqHolder; }
        }

        public grbs grbs
        {
            get { return rootObject as grbs; }
        }

        public footerReqHolder footerReqHolder
        {
            get { return rootObject as footerReqHolder; }
        }

        public employees employees
        {
            get { return rootObject as employees; }
        }

        public employeeKind employeeKind
        {
            get { return rootObject as employeeKind; }
        }

        public docState docState
        {
            get { return rootObject as docState; }
        }

        public collectingPeriod collectingPeriod
        {
            get { return rootObject as collectingPeriod; }
        }

        public budget budget
        {
            get { return rootObject as budget; }
        }

        public author author
        {
            get { return rootObject as author; }
        }

        public atoKind atoKind
        {
            get { return rootObject as atoKind; }
        }

        public ato ato
        {
            get { return rootObject as ato; }
        }

        public Objects Objects
        {
            get { return rootObject as Objects; }
        }

        private XRootNamespace()
        {
        }

        public XRootNamespace(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(responsibleSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(responsibleConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req9 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req6 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(req10 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSubjectOffice root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(region root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(personage root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(patternOfOwnership root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(oldChiefAccountant root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(oldChief root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(oktmo root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(oksm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(okato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(grbs root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(employees root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(employeeKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(budget root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(atoKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get { return doc; }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


        public subjectRole subjectRole
        {
            get { return rootObject as subjectRole; }
        }

        public scheme scheme
        {
            get { return rootObject as scheme; }
        }

        public rows rows
        {
            get { return rootObject as rows; }
        }

        public responsibleSubject responsibleSubject
        {
            get { return rootObject as responsibleSubject; }
        }

        public responsibleConsumer responsibleConsumer
        {
            get { return rootObject as responsibleConsumer; }
        }

        public req9 req9
        {
            get { return rootObject as req9; }
        }

        public req6 req6
        {
            get { return rootObject as req6; }
        }

        public req5 req5
        {
            get { return rootObject as req5; }
        }

        public req10 req10
        {
            get { return rootObject as req10; }
        }

        public reportSubjectOffice reportSubjectOffice
        {
            get { return rootObject as reportSubjectOffice; }
        }

        public reportSubject reportSubject
        {
            get { return rootObject as reportSubject; }
        }

        public reportSections reportSections
        {
            get { return rootObject as reportSections; }
        }

        public reportPeriodAbstract reportPeriodAbstract
        {
            get { return rootObject as reportPeriodAbstract; }
        }

        public reportLevel reportLevel
        {
            get { return rootObject as reportLevel; }
        }

        public reportKind reportKind
        {
            get { return rootObject as reportKind; }
        }

        public reportConsumer reportConsumer
        {
            get { return rootObject as reportConsumer; }
        }

        public region region
        {
            get { return rootObject as region; }
        }

        public personage personage
        {
            get { return rootObject as personage; }
        }

        public person person
        {
            get { return rootObject as person; }
        }

        public patternOfOwnership patternOfOwnership
        {
            get { return rootObject as patternOfOwnership; }
        }

        public oldChiefAccountant oldChiefAccountant
        {
            get { return rootObject as oldChiefAccountant; }
        }

        public oldChief oldChief
        {
            get { return rootObject as oldChief; }
        }

        public oktmo oktmo
        {
            get { return rootObject as oktmo; }
        }

        public oksm oksm
        {
            get { return rootObject as oksm; }
        }

        public okato okato
        {
            get { return rootObject as okato; }
        }

        public headerReqHolder headerReqHolder
        {
            get { return rootObject as headerReqHolder; }
        }

        public grbs grbs
        {
            get { return rootObject as grbs; }
        }

        public footerReqHolder footerReqHolder
        {
            get { return rootObject as footerReqHolder; }
        }

        public employees employees
        {
            get { return rootObject as employees; }
        }

        public employeeKind employeeKind
        {
            get { return rootObject as employeeKind; }
        }

        public docState docState
        {
            get { return rootObject as docState; }
        }

        public collectingPeriod collectingPeriod
        {
            get { return rootObject as collectingPeriod; }
        }

        public budget budget
        {
            get { return rootObject as budget; }
        }

        public author author
        {
            get { return rootObject as author; }
        }

        public atoKind atoKind
        {
            get { return rootObject as atoKind; }
        }

        public ato ato
        {
            get { return rootObject as ato; }
        }

        public Objects Objects
        {
            get { return rootObject as Objects; }
        }

        public ru.krista.core.docstate.model.meta.StatesSchemekey StatesSchemekey
        {
            get { return rootObject as ru.krista.core.docstate.model.meta.StatesSchemekey; }
        }

        public ru.krista.core.docstate.model.meta.Statekey Statekey
        {
            get { return rootObject as ru.krista.core.docstate.model.meta.Statekey; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101S2Row F_0503130of20150101S2Row
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101S2Row; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101S2 F_0503130of20150101S2
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101S2; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101S1Row F_0503130of20150101S1Row
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101S1Row; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101S1 F_0503130of20150101S1
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101S1; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101HR F_0503130of20150101HR
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101HR; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101FR F_0503130of20150101FR
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101FR; }
        }

        public ru.krista.consolidation.model.report.F_0503130of20150101 F_0503130of20150101
        {
            get { return rootObject as ru.krista.consolidation.model.report.F_0503130of20150101; }
        }

        public ru.krista.consolidation.model.ReportSubjectRolekey ReportSubjectRolekey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportSubjectRolekey; }
        }

        public ru.krista.consolidation.model.ReportSubjectkey ReportSubjectkey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportSubjectkey; }
        }

        public ru.krista.consolidation.model.ReportSubject ReportSubject1
        {
            get { return rootObject as ru.krista.consolidation.model.ReportSubject; }
        }

        public ru.krista.consolidation.model.ReportPeriodPeriodickey ReportPeriodPeriodickey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportPeriodPeriodickey; }
        }

        public ru.krista.consolidation.model.ReportLevelkey ReportLevelkey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportLevelkey; }
        }

        public ru.krista.consolidation.model.ReportKindkey ReportKindkey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportKindkey; }
        }

        public ru.krista.consolidation.model.ReportCollectingPeriodkey ReportCollectingPeriodkey
        {
            get { return rootObject as ru.krista.consolidation.model.ReportCollectingPeriodkey; }
        }

        public ru.krista.budget.model.Regionkey Regionkey
        {
            get { return rootObject as ru.krista.budget.model.Regionkey; }
        }

        public ru.krista.budget.model.Personagekey Personagekey
        {
            get { return rootObject as ru.krista.budget.model.Personagekey; }
        }

        public ru.krista.budget.model.Officekey Officekey
        {
            get { return rootObject as ru.krista.budget.model.Officekey; }
        }

        public ru.krista.budget.model.Office Office
        {
            get { return rootObject as ru.krista.budget.model.Office; }
        }

        public ru.krista.budget.model.EmployeeKindkey EmployeeKindkey
        {
            get { return rootObject as ru.krista.budget.model.EmployeeKindkey; }
        }

        public ru.krista.budget.model.Employeekey Employeekey
        {
            get { return rootObject as ru.krista.budget.model.Employeekey; }
        }

        public ru.krista.budget.model.Employee Employee
        {
            get { return rootObject as ru.krista.budget.model.Employee; }
        }

        public ru.krista.budget.model.ClsOKTMOkey ClsOKTMOkey
        {
            get { return rootObject as ru.krista.budget.model.ClsOKTMOkey; }
        }

        public ru.krista.budget.model.ClsOKSMkey ClsOKSMkey
        {
            get { return rootObject as ru.krista.budget.model.ClsOKSMkey; }
        }

        public ru.krista.budget.model.ClsOKFSkey ClsOKFSkey
        {
            get { return rootObject as ru.krista.budget.model.ClsOKFSkey; }
        }

        public ru.krista.budget.model.ClsOKEIkey ClsOKEIkey
        {
            get { return rootObject as ru.krista.budget.model.ClsOKEIkey; }
        }

        public ru.krista.budget.model.ClsOKATOkey ClsOKATOkey
        {
            get { return rootObject as ru.krista.budget.model.ClsOKATOkey; }
        }

        public ru.krista.budget.model.ClsGRBSkey ClsGRBSkey
        {
            get { return rootObject as ru.krista.budget.model.ClsGRBSkey; }
        }

        public ru.krista.budget.model.Budgetkey Budgetkey
        {
            get { return rootObject as ru.krista.budget.model.Budgetkey; }
        }

        public ru.krista.budget.model.AtoKindkey AtoKindkey
        {
            get { return rootObject as ru.krista.budget.model.AtoKindkey; }
        }

        public ru.krista.budget.model.ATOkey ATOkey
        {
            get { return rootObject as ru.krista.budget.model.ATOkey; }
        }

        public ru.krista.budget.model.ATO ATO1
        {
            get { return rootObject as ru.krista.budget.model.ATO; }
        }

        private XRoot()
        {
        }

        public XRoot(subjectRole root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(scheme root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(rows root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(responsibleSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(responsibleConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req9 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req6 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req5 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(req10 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSubjectOffice root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportSections root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportPeriodAbstract root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportLevel root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(reportConsumer root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(region root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(personage root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(person root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(patternOfOwnership root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(oldChiefAccountant root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(oldChief root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(oktmo root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(oksm root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(okato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(headerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(grbs root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(footerReqHolder root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(employees root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(employeeKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(docState root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(collectingPeriod root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(budget root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(author root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(atoKind root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ato root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(Objects root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.core.docstate.model.meta.StatesSchemekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.core.docstate.model.meta.Statekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101S2Row root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101S2 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101S1Row root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101S1 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101HR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101FR root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.report.F_0503130of20150101 root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportSubjectRolekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportSubjectkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportSubject root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportPeriodPeriodickey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportLevelkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.consolidation.model.ReportCollectingPeriodkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Regionkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Personagekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Officekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Office root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.EmployeeKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Employeekey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Employee root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKTMOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKSMkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKFSkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKEIkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsOKATOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ClsGRBSkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.Budgetkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.AtoKindkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ATOkey root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(ru.krista.budget.model.ATO root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get { return doc; }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    namespace ru.krista.core.docstate.model.meta
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class StatesSchemekey : XTypedElement, IXMetaData
        {

            public static explicit operator StatesSchemekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<StatesSchemekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public StatesSchemekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("StatesScheme-key", "ru.krista.core.docstate.model.meta"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static StatesSchemekey Load(string xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<StatesSchemekey>(xmlFile);
            }

            public static StatesSchemekey Parse(string xml)
            {
                return XTypedServices.Parse<StatesSchemekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<StatesSchemekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (scheme)
        /// </para>
        /// </summary>
        public partial class Statekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator Statekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Statekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Statekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("scheme", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public Statekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (scheme)
            /// </para>
            /// </summary>
            public scheme scheme
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("scheme", ""));
                    return ((scheme)(x));
                }
                set { this.SetElement(XName.Get("scheme", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("State-key", "ru.krista.core.docstate.model.meta"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Statekey Load(string xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Statekey>(xmlFile);
            }

            public static Statekey Parse(string xml)
            {
                return XTypedServices.Parse<Statekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Statekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("scheme", ""), typeof(scheme));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


            public StatesSchemekey StatesSchemekey
            {
                get { return rootObject as StatesSchemekey; }
            }

            public Statekey Statekey
            {
                get { return rootObject as Statekey; }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(StatesSchemekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Statekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get { return doc; }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.consolidation.model.report
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class F_0503130of20150101S2Row : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503130of20150101S2Row(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101S2Row>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503130of20150101S2Row()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int tableRowId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("tableRowId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col7
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col7", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col7", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col3", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("col2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col0
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col0", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("col0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101S2Row", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101S2Row Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S2Row>(xmlFile);
            }

            public static F_0503130of20150101S2Row Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S2Row>(xmlFile);
            }

            public static F_0503130of20150101S2Row Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101S2Row>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101S2Row>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (rows)
        /// </para>
        /// </summary>
        public partial class F_0503130of20150101S2 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator F_0503130of20150101S2(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101S2>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503130of20150101S2()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rows", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public F_0503130of20150101S2()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public rows rows
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("rows", ""));
                    return ((rows)(x));
                }
                set { this.SetElement(XName.Get("rows", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormSectionId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormSectionId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("reportFormSectionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public bool checkData
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkData", ""));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set { this.SetAttribute(XName.Get("checkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101S2", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101S2 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S2>(xmlFile);
            }

            public static F_0503130of20150101S2 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S2>(xmlFile);
            }

            public static F_0503130of20150101S2 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101S2>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101S2>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class F_0503130of20150101S1Row : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503130of20150101S1Row(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101S1Row>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503130of20150101S1Row()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int tableRowId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("tableRowId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("tableRowId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col8
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col8", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col6
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col6", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col5
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col5", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col3", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col11", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<decimal> col10
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col10", ""));
                    if ((x == null))
                    {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set { this.SetAttribute(XName.Get("col10", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string col1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("col1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string col0
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("col0", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("col0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101S1Row", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101S1Row Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S1Row>(xmlFile);
            }

            public static F_0503130of20150101S1Row Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S1Row>(xmlFile);
            }

            public static F_0503130of20150101S1Row Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101S1Row>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101S1Row>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (rows)
        /// </para>
        /// </summary>
        public partial class F_0503130of20150101S1 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator F_0503130of20150101S1(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101S1>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503130of20150101S1()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("rows", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public F_0503130of20150101S1()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (rows)
            /// </para>
            /// </summary>
            public rows rows
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("rows", ""));
                    return ((rows)(x));
                }
                set { this.SetElement(XName.Get("rows", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormSectionId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormSectionId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("reportFormSectionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public bool checkData
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkData", ""));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set { this.SetAttribute(XName.Get("checkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101S1", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101S1 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S1>(xmlFile);
            }

            public static F_0503130of20150101S1 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101S1>(xmlFile);
            }

            public static F_0503130of20150101S1 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101S1>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101S1>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("rows", ""), typeof(rows));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (req10, req5, req6, req9)
        /// </para>
        /// </summary>
        public partial class F_0503130of20150101HR : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator F_0503130of20150101HR(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101HR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503130of20150101HR()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("req10", "")),
                    new NamedContentModelEntity(XName.Get("req5", "")),
                    new NamedContentModelEntity(XName.Get("req6", "")),
                    new NamedContentModelEntity(XName.Get("req9", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (req10, req5, req6, req9)
            /// </para>
            /// </summary>
            public F_0503130of20150101HR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req5, req6, req9)
            /// </para>
            /// </summary>
            public req10 req10
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req10", ""));
                    return ((req10)(x));
                }
                set { this.SetElement(XName.Get("req10", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req5, req6, req9)
            /// </para>
            /// </summary>
            public req5 req5
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req5", ""));
                    return ((req5)(x));
                }
                set { this.SetElement(XName.Get("req5", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req5, req6, req9)
            /// </para>
            /// </summary>
            public req6 req6
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req6", ""));
                    return ((req6)(x));
                }
                set { this.SetElement(XName.Get("req6", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (req10, req5, req6, req9)
            /// </para>
            /// </summary>
            public req9 req9
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("req9", ""));
                    return ((req9)(x));
                }
                set { this.SetElement(XName.Get("req9", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req8
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req8", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req4
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req4", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req3
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req3", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req11
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req11", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req11", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101HR", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101HR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101HR>(xmlFile);
            }

            public static F_0503130of20150101HR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101HR>(xmlFile);
            }

            public static F_0503130of20150101HR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101HR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101HR>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("req10", ""), typeof(req10));
                localElementDictionary.Add(XName.Get("req5", ""), typeof(req5));
                localElementDictionary.Add(XName.Get("req6", ""), typeof(req6));
                localElementDictionary.Add(XName.Get("req9", ""), typeof(req9));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class F_0503130of20150101FR : XTypedElement, IXMetaData
        {

            public static explicit operator F_0503130of20150101FR(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101FR>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public F_0503130of20150101FR()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req2
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string req1
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("req1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("req1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101FR", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101FR Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101FR>(xmlFile);
            }

            public static F_0503130of20150101FR Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101FR>(xmlFile);
            }

            public static F_0503130of20150101FR Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101FR>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101FR>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
        /// </para>
        /// </summary>
        public partial class F_0503130of20150101 : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator F_0503130of20150101(XElement xe)
            {
                return XTypedServices.ToXTypedElement<F_0503130of20150101>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static F_0503130of20150101()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("collectingPeriod", "")),
                    new NamedContentModelEntity(XName.Get("docState", "")),
                    new NamedContentModelEntity(XName.Get("reportConsumer", "")),
                    new NamedContentModelEntity(XName.Get("reportSubject", "")),
                    new NamedContentModelEntity(XName.Get("reportSubjectOffice", "")),
                    new NamedContentModelEntity(XName.Get("responsibleConsumer", "")),
                    new NamedContentModelEntity(XName.Get("responsibleSubject", "")),
                    new NamedContentModelEntity(XName.Get("footerReqHolder", "")),
                    new NamedContentModelEntity(XName.Get("headerReqHolder", "")),
                    new NamedContentModelEntity(XName.Get("reportSections", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public F_0503130of20150101()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public collectingPeriod collectingPeriod
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("collectingPeriod", ""));
                    return ((collectingPeriod)(x));
                }
                set { this.SetElement(XName.Get("collectingPeriod", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public docState docState
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("docState", ""));
                    return ((docState)(x));
                }
                set { this.SetElement(XName.Get("docState", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportConsumer reportConsumer
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportConsumer", ""));
                    return ((reportConsumer)(x));
                }
                set { this.SetElement(XName.Get("reportConsumer", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSubject reportSubject
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSubject", ""));
                    return ((reportSubject)(x));
                }
                set { this.SetElement(XName.Get("reportSubject", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSubjectOffice reportSubjectOffice
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSubjectOffice", ""));
                    return ((reportSubjectOffice)(x));
                }
                set { this.SetElement(XName.Get("reportSubjectOffice", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public responsibleConsumer responsibleConsumer
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("responsibleConsumer", ""));
                    return ((responsibleConsumer)(x));
                }
                set { this.SetElement(XName.Get("responsibleConsumer", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public responsibleSubject responsibleSubject
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("responsibleSubject", ""));
                    return ((responsibleSubject)(x));
                }
                set { this.SetElement(XName.Get("responsibleSubject", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public footerReqHolder footerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("footerReqHolder", ""));
                    return ((footerReqHolder)(x));
                }
                set { this.SetElement(XName.Get("footerReqHolder", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public headerReqHolder headerReqHolder
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("headerReqHolder", ""));
                    return ((headerReqHolder)(x));
                }
                set { this.SetElement(XName.Get("headerReqHolder", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (collectingPeriod, docState, reportConsumer, reportSubject, reportSubjectOffice, responsibleConsumer, responsibleSubject, footerReqHolder, headerReqHolder, reportSections)
            /// </para>
            /// </summary>
            public reportSections reportSections
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportSections", ""));
                    return ((reportSections)(x));
                }
                set { this.SetElement(XName.Get("reportSections", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte warningCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("warningCount", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("warningCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string updateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("updateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("updateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string stateUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("stateUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("stateUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string signStatus
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signStatus", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("signStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte signCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signCount", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("signCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string signCheckDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("signCheckDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("signCheckDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte requiredSignCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("requiredSignCount", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("requiredSignCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("reportFormId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int reportFormCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormCode", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("reportFormCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string reportFormClassName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("reportFormClassName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("reportFormClassName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public bool isEmpty
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("isEmpty", ""));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set { this.SetAttribute(XName.Get("isEmpty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte freeSignCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("freeSignCount", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("freeSignCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string formUpdateTime
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("formUpdateTime", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("formUpdateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string evalDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("evalDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("evalDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte errorCount
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("errorCount", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("errorCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string endDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("endDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("endDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short deliveryYear
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryYear", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("deliveryYear", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string checkDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("checkDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("checkDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string caption
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("caption", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string beginDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("beginDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("beginDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string attachments
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("attachments", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("attachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("F_0503130of20150101", "ru.krista.consolidation.model.report"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static F_0503130of20150101 Load(string xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101>(xmlFile);
            }

            public static F_0503130of20150101 Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<F_0503130of20150101>(xmlFile);
            }

            public static F_0503130of20150101 Parse(string xml)
            {
                return XTypedServices.Parse<F_0503130of20150101>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<F_0503130of20150101>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("collectingPeriod", ""), typeof(collectingPeriod));
                localElementDictionary.Add(XName.Get("docState", ""), typeof(docState));
                localElementDictionary.Add(XName.Get("reportConsumer", ""), typeof(reportConsumer));
                localElementDictionary.Add(XName.Get("reportSubject", ""), typeof(reportSubject));
                localElementDictionary.Add(XName.Get("reportSubjectOffice", ""), typeof(reportSubjectOffice));
                localElementDictionary.Add(XName.Get("responsibleConsumer", ""), typeof(responsibleConsumer));
                localElementDictionary.Add(XName.Get("responsibleSubject", ""), typeof(responsibleSubject));
                localElementDictionary.Add(XName.Get("footerReqHolder", ""), typeof(footerReqHolder));
                localElementDictionary.Add(XName.Get("headerReqHolder", ""), typeof(headerReqHolder));
                localElementDictionary.Add(XName.Get("reportSections", ""), typeof(reportSections));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


            public F_0503130of20150101S2Row F_0503130of20150101S2Row
            {
                get { return rootObject as F_0503130of20150101S2Row; }
            }

            public F_0503130of20150101S2 F_0503130of20150101S2
            {
                get { return rootObject as F_0503130of20150101S2; }
            }

            public F_0503130of20150101S1Row F_0503130of20150101S1Row
            {
                get { return rootObject as F_0503130of20150101S1Row; }
            }

            public F_0503130of20150101S1 F_0503130of20150101S1
            {
                get { return rootObject as F_0503130of20150101S1; }
            }

            public F_0503130of20150101HR F_0503130of20150101HR
            {
                get { return rootObject as F_0503130of20150101HR; }
            }

            public F_0503130of20150101FR F_0503130of20150101FR
            {
                get { return rootObject as F_0503130of20150101FR; }
            }

            public F_0503130of20150101 F_0503130of20150101
            {
                get { return rootObject as F_0503130of20150101; }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(F_0503130of20150101S2Row root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101S2 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101S1Row root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101S1 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101HR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101FR root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(F_0503130of20150101 root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get { return doc; }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.consolidation.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class ReportSubjectRolekey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportSubjectRolekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportSubjectRolekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportSubjectRolekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportSubjectRole-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectRolekey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectRolekey>(xmlFile);
            }

            public static ReportSubjectRolekey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectRolekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectRolekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (person, reportLevel, subjectRole)
        /// </para>
        /// </summary>
        public partial class ReportSubjectkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator ReportSubjectkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportSubjectkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportSubjectkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("person", "")),
                    new NamedContentModelEntity(XName.Get("reportLevel", "")),
                    new NamedContentModelEntity(XName.Get("subjectRole", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public ReportSubjectkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set { this.SetElement(XName.Get("person", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public reportLevel reportLevel
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportLevel", ""));
                    return ((reportLevel)(x));
                }
                set { this.SetElement(XName.Get("reportLevel", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public subjectRole subjectRole
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("subjectRole", ""));
                    return ((subjectRole)(x));
                }
                set { this.SetElement(XName.Get("subjectRole", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportSubject-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubjectkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubjectkey>(xmlFile);
            }

            public static ReportSubjectkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubjectkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubjectkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
                localElementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (person, reportLevel, subjectRole)
        /// </para>
        /// </summary>
        public partial class ReportSubject : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator ReportSubject(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportSubject>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportSubject()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("person", "")),
                    new NamedContentModelEntity(XName.Get("reportLevel", "")),
                    new NamedContentModelEntity(XName.Get("subjectRole", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public ReportSubject()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public person person
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("person", ""));
                    return ((person)(x));
                }
                set { this.SetElement(XName.Get("person", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public reportLevel reportLevel
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportLevel", ""));
                    return ((reportLevel)(x));
                }
                set { this.SetElement(XName.Get("reportLevel", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (person, reportLevel, subjectRole)
            /// </para>
            /// </summary>
            public subjectRole subjectRole
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("subjectRole", ""));
                    return ((subjectRole)(x));
                }
                set { this.SetElement(XName.Get("subjectRole", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportSubject", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportSubject Load(string xmlFile)
            {
                return XTypedServices.Load<ReportSubject>(xmlFile);
            }

            public static ReportSubject Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportSubject>(xmlFile);
            }

            public static ReportSubject Parse(string xml)
            {
                return XTypedServices.Parse<ReportSubject>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportSubject>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("reportLevel", ""), typeof(reportLevel));
                localElementDictionary.Add(XName.Get("subjectRole", ""), typeof(subjectRole));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (reportKind)
        /// </para>
        /// </summary>
        public partial class ReportPeriodPeriodickey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator ReportPeriodPeriodickey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportPeriodPeriodickey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportPeriodPeriodickey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("reportKind", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public ReportPeriodPeriodickey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (reportKind)
            /// </para>
            /// </summary>
            public reportKind reportKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportKind", ""));
                    return ((reportKind)(x));
                }
                set { this.SetElement(XName.Get("reportKind", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportPeriodPeriodic-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportPeriodPeriodickey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportPeriodPeriodickey>(xmlFile);
            }

            public static ReportPeriodPeriodickey Parse(string xml)
            {
                return XTypedServices.Parse<ReportPeriodPeriodickey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportPeriodPeriodickey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("reportKind", ""), typeof(reportKind));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ReportLevelkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportLevelkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportLevelkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportLevelkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportLevel-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportLevelkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportLevelkey>(xmlFile);
            }

            public static ReportLevelkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportLevelkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportLevelkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ReportKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator ReportKindkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ReportKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string code
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportKind-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportKindkey>(xmlFile);
            }

            public static ReportKindkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (author, reportPeriodAbstract)
        /// </para>
        /// </summary>
        public partial class ReportCollectingPeriodkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator ReportCollectingPeriodkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ReportCollectingPeriodkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ReportCollectingPeriodkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("author", "")), new NamedContentModelEntity(XName.Get("reportPeriodAbstract", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public ReportCollectingPeriodkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public author author
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("author", ""));
                    return ((author)(x));
                }
                set { this.SetElement(XName.Get("author", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (author, reportPeriodAbstract)
            /// </para>
            /// </summary>
            public reportPeriodAbstract reportPeriodAbstract
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("reportPeriodAbstract", ""));
                    return ((reportPeriodAbstract)(x));
                }
                set { this.SetElement(XName.Get("reportPeriodAbstract", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string deliveryDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("deliveryDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("deliveryDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ReportCollectingPeriod-key", "ru.krista.consolidation.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ReportCollectingPeriodkey Load(string xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ReportCollectingPeriodkey>(xmlFile);
            }

            public static ReportCollectingPeriodkey Parse(string xml)
            {
                return XTypedServices.Parse<ReportCollectingPeriodkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ReportCollectingPeriodkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("author", ""), typeof(author));
                localElementDictionary.Add(XName.Get("reportPeriodAbstract", ""), typeof(reportPeriodAbstract));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


            public ReportSubjectRolekey ReportSubjectRolekey
            {
                get { return rootObject as ReportSubjectRolekey; }
            }

            public ReportSubjectkey ReportSubjectkey
            {
                get { return rootObject as ReportSubjectkey; }
            }

            public ReportSubject ReportSubject
            {
                get { return rootObject as ReportSubject; }
            }

            public ReportPeriodPeriodickey ReportPeriodPeriodickey
            {
                get { return rootObject as ReportPeriodPeriodickey; }
            }

            public ReportLevelkey ReportLevelkey
            {
                get { return rootObject as ReportLevelkey; }
            }

            public ReportKindkey ReportKindkey
            {
                get { return rootObject as ReportKindkey; }
            }

            public ReportCollectingPeriodkey ReportCollectingPeriodkey
            {
                get { return rootObject as ReportCollectingPeriodkey; }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(ReportSubjectRolekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubjectkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportSubject root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportPeriodPeriodickey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportLevelkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ReportCollectingPeriodkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get { return doc; }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }

    namespace ru.krista.budget.model
    {
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using System.IO;
        using System.Diagnostics;
        using System.Xml;
        using System.Xml.Schema;
        using System.Xml.Linq;
        using Xml.Schema.Linq;


        public partial class Regionkey : XTypedElement, IXMetaData
        {

            public static explicit operator Regionkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Regionkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public Regionkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Region-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Regionkey Load(string xmlFile)
            {
                return XTypedServices.Load<Regionkey>(xmlFile);
            }

            public static Regionkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Regionkey>(xmlFile);
            }

            public static Regionkey Parse(string xml)
            {
                return XTypedServices.Parse<Regionkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Regionkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class Personagekey : XTypedElement, IXMetaData
        {

            public static explicit operator Personagekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Personagekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public Personagekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string birthDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("birthDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("birthDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Personage-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Personagekey Load(string xmlFile)
            {
                return XTypedServices.Load<Personagekey>(xmlFile);
            }

            public static Personagekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Personagekey>(xmlFile);
            }

            public static Personagekey Parse(string xml)
            {
                return XTypedServices.Parse<Personagekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Personagekey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ato)
        /// </para>
        /// </summary>
        public partial class Officekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator Officekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Officekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Officekey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ato", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public Officekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set { this.SetElement(XName.Get("ato", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Office-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Officekey Load(string xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Officekey>(xmlFile);
            }

            public static Officekey Parse(string xml)
            {
                return XTypedServices.Parse<Officekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Officekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
        /// </para>
        /// </summary>
        public partial class Office : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator Office(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Office>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Office()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("ato", "")),
                    new NamedContentModelEntity(XName.Get("budget", "")),
                    new NamedContentModelEntity(XName.Get("grbs", "")),
                    new NamedContentModelEntity(XName.Get("oldChief", "")),
                    new NamedContentModelEntity(XName.Get("oldChiefAccountant", "")),
                    new NamedContentModelEntity(XName.Get("patternOfOwnership", "")),
                    new NamedContentModelEntity(XName.Get("employees", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public Office()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set { this.SetElement(XName.Get("ato", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public F_0503130of20150101.budget budget
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("budget", ""));
                    return ((F_0503130of20150101.budget)(x));
                }
                set { this.SetElement(XName.Get("budget", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public grbs grbs
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("grbs", ""));
                    return ((grbs)(x));
                }
                set { this.SetElement(XName.Get("grbs", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public oldChief oldChief
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("oldChief", ""));
                    return ((oldChief)(x));
                }
                set { this.SetElement(XName.Get("oldChief", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public oldChiefAccountant oldChiefAccountant
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("oldChiefAccountant", ""));
                    return ((oldChiefAccountant)(x));
                }
                set { this.SetElement(XName.Get("oldChiefAccountant", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public patternOfOwnership patternOfOwnership
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("patternOfOwnership", ""));
                    return ((patternOfOwnership)(x));
                }
                set { this.SetElement(XName.Get("patternOfOwnership", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato, budget, grbs, oldChief, oldChiefAccountant, patternOfOwnership, employees)
            /// </para>
            /// </summary>
            public employees employees
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("employees", ""));
                    return ((employees)(x));
                }
                set { this.SetElement(XName.Get("employees", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short rbps
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("rbps", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("rbps", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int okpo
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("okpo", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("okpo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public long ogrn
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ogrn", ""));
                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
                set { this.SetAttribute(XName.Get("ogrn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string mailingAddress
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("mailingAddress", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("mailingAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string locationAddress
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("locationAddress", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("locationAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string lastChangeUser
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeUser", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeUser", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string lastChangeDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int kpp
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("kpp", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("kpp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public long inn
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("inn", ""));
                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
                set { this.SetAttribute(XName.Get("inn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string fullName
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("fullName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("fullName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string caption
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("caption", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Office", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Office Load(string xmlFile)
            {
                return XTypedServices.Load<Office>(xmlFile);
            }

            public static Office Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Office>(xmlFile);
            }

            public static Office Parse(string xml)
            {
                return XTypedServices.Parse<Office>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Office>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
                localElementDictionary.Add(XName.Get("budget", ""), typeof(F_0503730of20150101.budget));
                localElementDictionary.Add(XName.Get("grbs", ""), typeof(grbs));
                localElementDictionary.Add(XName.Get("oldChief", ""), typeof(oldChief));
                localElementDictionary.Add(XName.Get("oldChiefAccountant", ""), typeof(oldChiefAccountant));
                localElementDictionary.Add(XName.Get("patternOfOwnership", ""), typeof(patternOfOwnership));
                localElementDictionary.Add(XName.Get("employees", ""), typeof(employees));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class EmployeeKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator EmployeeKindkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<EmployeeKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public EmployeeKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("EmployeeKind-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static EmployeeKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<EmployeeKindkey>(xmlFile);
            }

            public static EmployeeKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<EmployeeKindkey>(xmlFile);
            }

            public static EmployeeKindkey Parse(string xml)
            {
                return XTypedServices.Parse<EmployeeKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<EmployeeKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: ((person, personage)|(employeeKind, person?, personage))
        /// </para>
        /// </summary>
        public partial class Employeekey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<person> personField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedList<personage> personageField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            public static explicit operator Employeekey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Employeekey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Employeekey()
            {
                BuildElementDictionary();
            }

            /// <summary>
            /// <para>
            /// Regular expression: ((person, personage)|(employeeKind, person?, personage))
            /// </para>
            /// </summary>
            public Employeekey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((person, personage)|(employeeKind, person?, personage))
            /// </para>
            /// </summary>
            public IList<person> person
            {
                get
                {
                    if ((this.personField == null))
                    {
                        this.personField = new XTypedList<person>(this, LinqToXsdTypeManager.Instance, XName.Get("person", ""));
                    }
                    return this.personField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.personField = null;
                    }
                    else
                    {
                        if ((this.personField == null))
                        {
                            this.personField = XTypedList<person>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("person", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<person>(this.personField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((person, personage)|(employeeKind, person?, personage))
            /// </para>
            /// </summary>
            public IList<personage> personage
            {
                get
                {
                    if ((this.personageField == null))
                    {
                        this.personageField = new XTypedList<personage>(this, LinqToXsdTypeManager.Instance, XName.Get("personage", ""));
                    }
                    return this.personageField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.personageField = null;
                    }
                    else
                    {
                        if ((this.personageField == null))
                        {
                            this.personageField = XTypedList<personage>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("personage", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<personage>(this.personageField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((person, personage)|(employeeKind, person?, personage))
            /// </para>
            /// </summary>
            public employeeKind employeeKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("employeeKind", ""));
                    return ((employeeKind)(x));
                }
                set { this.SetElement(XName.Get("employeeKind", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string rank
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("rank", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("rank", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Employee-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Employeekey Load(string xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Employeekey>(xmlFile);
            }

            public static Employeekey Parse(string xml)
            {
                return XTypedServices.Parse<Employeekey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Employeekey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("person", ""), typeof(person));
                localElementDictionary.Add(XName.Get("personage", ""), typeof(personage));
                localElementDictionary.Add(XName.Get("employeeKind", ""), typeof(employeeKind));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (employeeKind?, personage)
        /// </para>
        /// </summary>
        public partial class Employee : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator Employee(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Employee>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Employee()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("employeeKind", "")), new NamedContentModelEntity(XName.Get("personage", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (employeeKind?, personage)
            /// </para>
            /// </summary>
            public Employee()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (employeeKind?, personage)
            /// </para>
            /// </summary>
            public employeeKind employeeKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("employeeKind", ""));
                    return ((employeeKind)(x));
                }
                set { this.SetElement(XName.Get("employeeKind", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (employeeKind?, personage)
            /// </para>
            /// </summary>
            public personage personage
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("personage", ""));
                    return ((personage)(x));
                }
                set { this.SetElement(XName.Get("personage", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string rank
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("rank", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("rank", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string lastChangeUser
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeUser", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeUser", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string lastChangeDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string comment
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("comment", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Employee", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Employee Load(string xmlFile)
            {
                return XTypedServices.Load<Employee>(xmlFile);
            }

            public static Employee Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Employee>(xmlFile);
            }

            public static Employee Parse(string xml)
            {
                return XTypedServices.Parse<Employee>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Employee>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("employeeKind", ""), typeof(employeeKind));
                localElementDictionary.Add(XName.Get("personage", ""), typeof(personage));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class ClsOKTMOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKTMOkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKTMOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKTMOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public long clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsOKTMO-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKTMOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKTMOkey>(xmlFile);
            }

            public static ClsOKTMOkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKTMOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKTMOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKSMkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKSMkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKSMkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKSMkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsOKSM-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKSMkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKSMkey>(xmlFile);
            }

            public static ClsOKSMkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKSMkey>(xmlFile);
            }

            public static ClsOKSMkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKSMkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKSMkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKFSkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKFSkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKFSkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKFSkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsOKFS-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKFSkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKFSkey>(xmlFile);
            }

            public static ClsOKFSkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKFSkey>(xmlFile);
            }

            public static ClsOKFSkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKFSkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKFSkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKEIkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKEIkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKEIkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKEIkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsOKEI-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKEIkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKEIkey>(xmlFile);
            }

            public static ClsOKEIkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKEIkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKEIkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsOKATOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsOKATOkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsOKATOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsOKATOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsOKATO-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsOKATOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsOKATOkey>(xmlFile);
            }

            public static ClsOKATOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsOKATOkey>(xmlFile);
            }

            public static ClsOKATOkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsOKATOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsOKATOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ClsGRBSkey : XTypedElement, IXMetaData
        {

            public static explicit operator ClsGRBSkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ClsGRBSkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ClsGRBSkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ClsGRBS-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ClsGRBSkey Load(string xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ClsGRBSkey>(xmlFile);
            }

            public static ClsGRBSkey Parse(string xml)
            {
                return XTypedServices.Parse<ClsGRBSkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClsGRBSkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ato)
        /// </para>
        /// </summary>
        public partial class Budgetkey : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator Budgetkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<Budgetkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static Budgetkey()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ato", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public Budgetkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ato)
            /// </para>
            /// </summary>
            public ato ato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ato", ""));
                    return ((ato)(x));
                }
                set { this.SetElement(XName.Get("ato", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public short clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("Budget-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static Budgetkey Load(string xmlFile)
            {
                return XTypedServices.Load<Budgetkey>(xmlFile);
            }

            public static Budgetkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<Budgetkey>(xmlFile);
            }

            public static Budgetkey Parse(string xml)
            {
                return XTypedServices.Parse<Budgetkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Budgetkey>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ato", ""), typeof(ato));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class AtoKindkey : XTypedElement, IXMetaData
        {

            public static explicit operator AtoKindkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<AtoKindkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public AtoKindkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public sbyte clsId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("clsId", ""));
                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                set { this.SetAttribute(XName.Get("clsId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("AtoKind-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static AtoKindkey Load(string xmlFile)
            {
                return XTypedServices.Load<AtoKindkey>(xmlFile);
            }

            public static AtoKindkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<AtoKindkey>(xmlFile);
            }

            public static AtoKindkey Parse(string xml)
            {
                return XTypedServices.Parse<AtoKindkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<AtoKindkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        public partial class ATOkey : XTypedElement, IXMetaData
        {

            public static explicit operator ATOkey(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ATOkey>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            public ATOkey()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ATO-key", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ATOkey Load(string xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ATOkey>(xmlFile);
            }

            public static ATOkey Parse(string xml)
            {
                return XTypedServices.Parse<ATOkey>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ATOkey>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (atoKind, okato, oksm, oktmo, region)
        /// </para>
        /// </summary>
        public partial class ATO : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private static ContentModelEntity contentModel;

            public static explicit operator ATO(XElement xe)
            {
                return XTypedServices.ToXTypedElement<ATO>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager);
            }

            static ATO()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(
                    new NamedContentModelEntity(XName.Get("atoKind", "")),
                    new NamedContentModelEntity(XName.Get("okato", "")),
                    new NamedContentModelEntity(XName.Get("oksm", "")),
                    new NamedContentModelEntity(XName.Get("oktmo", "")),
                    new NamedContentModelEntity(XName.Get("region", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public ATO()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public atoKind atoKind
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("atoKind", ""));
                    return ((atoKind)(x));
                }
                set { this.SetElement(XName.Get("atoKind", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public okato okato
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("okato", ""));
                    return ((okato)(x));
                }
                set { this.SetElement(XName.Get("okato", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public oksm oksm
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("oksm", ""));
                    return ((oksm)(x));
                }
                set { this.SetElement(XName.Get("oksm", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public oktmo oktmo
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("oktmo", ""));
                    return ((oktmo)(x));
                }
                set { this.SetElement(XName.Get("oktmo", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (atoKind, okato, oksm, oktmo, region)
            /// </para>
            /// </summary>
            public region region
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("region", ""));
                    return ((region)(x));
                }
                set { this.SetElement(XName.Get("region", ""), value); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string uuid
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("uuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("uuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string lastChangeUser
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeUser", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeUser", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string lastChangeDate
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("lastChangeDate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set { this.SetAttribute(XName.Get("lastChangeDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get { return localElementDictionary; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get { return XName.Get("ATO", "ru.krista.budget.model"); }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get { return SchemaOrigin.Element; }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get { return LinqToXsdTypeManager.Instance; }
            }

            public void Save(string xmlFile)
            {
                XTypedServices.Save(xmlFile, Untyped);
            }

            public void Save(System.IO.TextWriter tw)
            {
                XTypedServices.Save(tw, Untyped);
            }

            public void Save(System.Xml.XmlWriter xmlWriter)
            {
                XTypedServices.Save(xmlWriter, Untyped);
            }

            public static ATO Load(string xmlFile)
            {
                return XTypedServices.Load<ATO>(xmlFile);
            }

            public static ATO Load(System.IO.TextReader xmlFile)
            {
                return XTypedServices.Load<ATO>(xmlFile);
            }

            public static ATO Parse(string xml)
            {
                return XTypedServices.Parse<ATO>(xml);
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ATO>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("atoKind", ""), typeof(atoKind));
                localElementDictionary.Add(XName.Get("okato", ""), typeof(okato));
                localElementDictionary.Add(XName.Get("oksm", ""), typeof(oksm));
                localElementDictionary.Add(XName.Get("oktmo", ""), typeof(oktmo));
                localElementDictionary.Add(XName.Get("region", ""), typeof(region));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        public partial class XRootNamespace
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XDocument doc;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)] private XTypedElement rootObject;


            public Regionkey Regionkey
            {
                get { return rootObject as Regionkey; }
            }

            public Personagekey Personagekey
            {
                get { return rootObject as Personagekey; }
            }

            public Officekey Officekey
            {
                get { return rootObject as Officekey; }
            }

            public Office Office
            {
                get { return rootObject as Office; }
            }

            public EmployeeKindkey EmployeeKindkey
            {
                get { return rootObject as EmployeeKindkey; }
            }

            public Employeekey Employeekey
            {
                get { return rootObject as Employeekey; }
            }

            public Employee Employee
            {
                get { return rootObject as Employee; }
            }

            public ClsOKTMOkey ClsOKTMOkey
            {
                get { return rootObject as ClsOKTMOkey; }
            }

            public ClsOKSMkey ClsOKSMkey
            {
                get { return rootObject as ClsOKSMkey; }
            }

            public ClsOKFSkey ClsOKFSkey
            {
                get { return rootObject as ClsOKFSkey; }
            }

            public ClsOKEIkey ClsOKEIkey
            {
                get { return rootObject as ClsOKEIkey; }
            }

            public ClsOKATOkey ClsOKATOkey
            {
                get { return rootObject as ClsOKATOkey; }
            }

            public ClsGRBSkey ClsGRBSkey
            {
                get { return rootObject as ClsGRBSkey; }
            }

            public Budgetkey Budgetkey
            {
                get { return rootObject as Budgetkey; }
            }

            public AtoKindkey AtoKindkey
            {
                get { return rootObject as AtoKindkey; }
            }

            public ATOkey ATOkey
            {
                get { return rootObject as ATOkey; }
            }

            public ATO ATO
            {
                get { return rootObject as ATO; }
            }

            private XRootNamespace()
            {
            }

            public XRootNamespace(Regionkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Personagekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Officekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Office root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(EmployeeKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Employeekey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Employee root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKTMOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKSMkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKFSkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKEIkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsOKATOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ClsGRBSkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(Budgetkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(AtoKindkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ATOkey root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XRootNamespace(ATO root)
            {
                this.doc = new XDocument(root.Untyped);
                this.rootObject = root;
            }

            public XDocument XDocument
            {
                get { return doc; }
            }

            public static XRootNamespace Load(string xmlFile)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(string xmlFile, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlFile, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(TextReader textReader, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(textReader, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Load(XmlReader xmlReader)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Load(xmlReader);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public static XRootNamespace Parse(string text, LoadOptions options)
            {
                XRootNamespace root = new XRootNamespace();
                root.doc = XDocument.Parse(text, options);
                XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
                if ((typedRoot == null))
                {
                    throw new LinqToXsdException("Invalid root element in xml document.");
                }
                root.rootObject = typedRoot;
                return root;
            }

            public virtual void Save(string fileName)
            {
                doc.Save(fileName);
            }

            public virtual void Save(TextWriter textWriter)
            {
                doc.Save(textWriter);
            }

            public virtual void Save(XmlWriter writer)
            {
                doc.Save(writer);
            }

            public virtual void Save(TextWriter textWriter, SaveOptions options)
            {
                doc.Save(textWriter, options);
            }

            public virtual void Save(string fileName, SaveOptions options)
            {
                doc.Save(fileName, options);
            }
        }
    }
}