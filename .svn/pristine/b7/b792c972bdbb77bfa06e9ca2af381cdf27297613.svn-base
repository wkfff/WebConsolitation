//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Krista.FM.RIA.Extensions.EO15ExcCostsAIP.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Krista.FM.RIA.Extensions.EO15ExcCostsAIP.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.AIP&quot;);
        ///
        ///EO15AIP.View.AIP = {
        ///    acceptContractHandler: function (winId, gpId) {
        ///        var win = Ext.getCmp(winId);
        ///        var gp = Ext.getCmp(gpId);
        ///        var rec = win.getBody().Extension.entityBook.selectedRecord;
        ///        var recordToUpdate = gp.selModel.selection.record;
        ///        recordToUpdate.beginEdit();
        ///        recordToUpdate.set(&apos;ContractId&apos;, rec.data.ID);
        ///        recordToUpdate.set(&apos;ContractName&apos;, rec.data.PROPERTY);
        ///        recordToUpdate.set(&apos;PartnerId&apos;, rec.d [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EO15AIP {
            get {
                return ResourceManager.GetString("EO15AIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.CObjectCard&quot;);
        ///
        ///EO15AIP.View.CObjectCard.Data = {
        ///    updateButtonsClient: function (state) {
        ///        toEdit.hide();
        ///        toAccept.hide();
        ///        if (state == 1) {
        ///            toReview.show();
        ///        }
        ///        else {
        ///            toReview.hide();
        ///        }
        ///    },
        ///
        ///    updateButtonsCoord: function (state) {
        ///        if (state == 2) {
        ///            toEdit.show();
        ///            toReview.hide();
        ///            toAccept.show();
        ///        }
        ///        else if (state == 3) {
        ///       [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EO15AIPCObjectCard {
            get {
                return ResourceManager.GetString("EO15AIPCObjectCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.Control.CommonWin&quot;);
        ///
        ///EO15AIP.Control.CommonWin = {
        ///    resizeFn: function (winId) {
        ///        var win = Ext.getCmp(winId);
        ///        var size = Ext.getBody().getSize();
        ///        win.setSize({ width: size.width * 0.95, height: size.height * 0.95 });
        ///        if (win.iframe != undefined) {
        ///            win.reload();
        ///        }
        ///    }
        ///};
        ///
        ///.
        /// </summary>
        internal static string EO15AIPCommonControl {
            get {
                return ResourceManager.GetString("EO15AIPCommonControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.AdditObjectInfo&quot;);
        ///
        ///EO15AIP.View.AdditObjectInfo.Grid = {
        ///    addRecordInGrid: function (gpId, objId) {
        ///        var gp = Ext.getCmp(gpId);
        ///        gp.insertRecord();
        ///        var record = gp.store.data.items[0];
        ///        record.set(&apos;CObjectId&apos;, objId);
        ///        record.set(&apos;PeriodId&apos;, gp.store.baseParams.PeriodId);
        ///    }
        ///};.
        /// </summary>
        internal static string EO15AIPDetailAdditObjectInfo {
            get {
                return ResourceManager.GetString("EO15AIPDetailAdditObjectInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.Contract&quot;);
        ///
        ///EO15AIP.View.Contract.Grid = {
        ///    acceptContractHandler: function (winId, gpId) {
        ///        var win = Ext.getCmp(winId);
        ///        var gp = Ext.getCmp(gpId);
        ///        var rec = win.getBody().Extension.entityBook.selectedRecord;
        ///        var recordToUpdate = gp.selModel.selection.record;
        ///        recordToUpdate.beginEdit();
        ///        recordToUpdate.set(&apos;ContractId&apos;, rec.data.ID);
        ///        recordToUpdate.set(&apos;ContractName&apos;, rec.data.PROPERTY);
        ///        recordToUpdate.set(&apos;Pa [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EO15AIPDetailContract {
            get {
                return ResourceManager.GetString("EO15AIPDetailContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.Plan&quot;);
        ///
        ///EO15AIP.View.Plan.Grid = {
        ///    addRecordInGrid: function (gp, objId, stateId, stateName) {
        ///        gp.insertRecord();
        ///        var record = gp.store.data.items[0];
        ///        record.beginEdit();
        ///        record.set(&apos;CObjectId&apos;, objId);
        ///        record.set(&apos;StatusDId&apos;, stateId);
        ///        record.set(&apos;StatusDName&apos;, stateName);
        ///        record.endEdit();
        ///    },
        ///    acceptSourceFinanceHandler: function (winId, gpId) {
        ///        var win = Ext.getCmp(winId);
        ///        var gp = Ext.g [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EO15AIPDetailPlan {
            get {
                return ResourceManager.GetString("EO15AIPDetailPlan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.Review&quot;);
        ///
        ///EO15AIP.View.Review.Grid = {
        ///    addRecordInGrid: function (gpId, objId, stateId, stateName) {
        ///        var gp = Ext.getCmp(gpId);
        ///        gp.insertRecord();
        ///        var record = gp.store.data.items[0];
        ///        record.beginEdit();
        ///        record.set(&apos;CObjectId&apos;, objId);
        ///        record.set(&apos;PeriodId&apos;, cbQuarter.value);
        ///        record.set(&apos;StatusDId&apos;, stateId);
        ///        record.set(&apos;StatusDName&apos;, stateName); record.endEdit();
        ///    }
        ///};.
        /// </summary>
        internal static string EO15AIPDetailReview {
            get {
                return ResourceManager.GetString("EO15AIPDetailReview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.Finance&quot;);
        ///
        ///EO15AIP.View.Finance.Grid = {
        ///    rendererFn: function (v, p, r, rowIndex, colIndex, ds) {
        ///        if (!r.data.Editable) {
        ///            p.css = &apos;gray-cell&apos;;
        ///        }
        ///        var f = Ext.util.Format.numberRenderer(&apos;,00/i&apos;);
        ///        return f(v);
        ///    }
        ///};.
        /// </summary>
        internal static string EO15AIPFinance {
            get {
                return ResourceManager.GetString("EO15AIPFinance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.View.Register&quot;);
        ///
        ///var beforeCloseTabWithOneGrid = function (currentTab, grid) {
        ///    if (currentTab.forceClose != undefined &amp;&amp; currentTab.forceClose) {
        ///        return true;
        ///    }
        ///
        ///    currentTab.ownerCt.setActiveTab(currentTab);
        ///    if (grid.isDirty()) {
        ///        Ext.Msg.show({
        ///            title: &apos;Внимание&apos;,
        ///            msg: &apos;Все несохраненные изменения будут потеряны. Сохранить данные?&apos;,
        ///            buttons: { yes: &apos;Сохранить&apos;, no: &apos;Закрыть&apos;, cancel: &apos;Отмена&apos; },
        ///            animE [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EO15AIPRegister {
            get {
                return ResourceManager.GetString("EO15AIPRegister", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .gray-cell
        ///{
        ///    background-color: #DCDCDC !important; 
        ///    border-right-color: #FFFFFF !important;
        ///}.
        /// </summary>
        internal static string EO15AIPStyles {
            get {
                return ResourceManager.GetString("EO15AIPStyles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.ns(&quot;EO15AIP.Control.StatusD&quot;);
        ///
        ///EO15AIP.Control.StatusD = {
        ///    updateButtonsClient: function (state, gp) {
        ///        Ext.getCmp(&quot;toEdit_&quot; + gp.id).hide();
        ///        Ext.getCmp(&quot;toAccept_&quot; + gp.id).hide();
        ///        if (state == 1) {
        ///            Ext.getCmp(&quot;toReview_&quot; + gp.id).show();
        ///        }
        ///        else {
        ///            Ext.getCmp(&quot;toReview_&quot; + gp.id).hide();
        ///        }
        ///    },
        ///
        ///    updateButtonsCoord: function (state, gp) {
        ///        if (state == 2) {
        ///            Ext.getCmp(&quot;toEdit_&quot; + gp.id).sh [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string StatusDControl {
            get {
                return ResourceManager.GetString("StatusDControl", resourceCulture);
            }
        }
    }
}
